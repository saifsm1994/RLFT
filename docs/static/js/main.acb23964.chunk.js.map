{"version":3,"sources":["reportWebVitals.js","components/subComponents/TextArea.js","components/subComponents/TextAreaQuery.js","components/subComponents/Card1.js","components/subComponents/TextAreaQuery2.js","components/Lookup.js","components/subComponents/Navbar1.js","components/HomePage.js","components/LookupAdvanced.js","components/HCPC.js","components/Formatter.js","components/MasterPAFormatter.js","components/GSheetFormatter.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","TextArea","FormGroup","Label","for","this","props","name","Input","type","id","rows","value","onChange","style","styler","Component","TextAreaQuery","Form","Row","Col","lg","xl","md","sm","bsSize","Button","buttonName","onClick","buttonOnClick","color","hidden","buttonText","Card1","Card","body","heading","CardTitle","tag","text","CardText","linkName","link","TextAreaQuery2","ButtonGroup","size","className","buttonName2","buttonOnClick2","buttonText2","buttonName3","buttonOnClick3","borderLeft","buttonText3","HCPCandFilter","updateInputValue","bind","updateSearchValue","setName","updatesearchStringFlagsValue","updateRegexFlagsValue","setSearchValue","updateSearchType","saveStateToCookie","saveSearchesToSearchesCookie","loadSearchFromSavedSearches","pullStateFromCookie","hcpcManager","resetAll","state","input","output","noCountOutput","csvOutput","csvDedupeOutput","searchType","searchValue","searchStringFlags","searchRegexFlags","Searches","localStorage","removeItem","setState","num","setTimeout","cookieData","setItem","JSON","stringify","val","nameValue","undefined","alert","getItem","parse","fetchedCookie","Object","keys","forEach","element","fetchedCookie2","fetchedSearch","e","preventDefault","target","console","log","indexOf","replace","NumRegex","RegExp","LetterRegex","HCPCRegexRange","match","letters","numbers","store","length","i","push","join","caseSensitive","search","split","Array","from","Set","matcher2","matcher","test","exec","parseInt","index","isArray","sort","b","uniqueOutput","counts","countOutput","pos","map","toLowerCase","Container","Jumbotron","border","marginLeft","withRouter","Navbar1","useState","isOpen","setIsOpen","Navbar","light","expand","NavbarBrand","Home","NavbarToggler","Collapse","navbar","Nav","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","lookupLink","HCPC","lookupLinkAdvanced","Policies","MasterPA","GSheet","reset","NavbarText","HomePage","LookupAdvanced","updateSearchValueEnd","searchValueEnd","fetchedcookie3","searchEnd","test2","Formatter","launchFormatter","rulesManager","toggleexperimental","fontSizeChange","saveFontCookie","loadFontCookie","experimentalOutput","experimental","fontSize","font","Number","isInteger","inputer","result","result2","smallCapsStartingLine","obviousBulletPoints","letterBulletPoint","numberBulletPoint","RomanBulletPoint","doubleLine","commaLine","charAt","substring","placeholder","paddingRight","textAlign","marginTop","MasterPAFormatter","headerManager","toggleDoubleLine","noDoubleLineOutput","headingsRegex","wrongHeadingsRegex","bulletsRegex","noDoubleBulletRegex","CapsHeadings","newLine","trim","GSheetFormatter","updateGSheetCellValue","updateGSheetapplyFormula","updateRegexFlagsValue2","launchFunction","outputCsv","outputWithFormula","outputWithFormulaReverse","GSheetCellValue","GSheetFormulaFlag","GSheetFormulaFlag2","GSheetapplyFormula","removeDuplicatesFlag","splitAtNewLinesFlag","CommaSepListFlag","rege","filter","n","outputList","fontWeight","borderBottom","flexWrap","ReactDOM","render","StrictMode","to","textDecoration","exact","path","Lookup","document","getElementById"],"mappings":"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","file":"static/js/main.acb23964.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Component } from 'react';\r\nimport { FormGroup, Label, Input } from 'reactstrap';\r\n\r\n\r\nclass TextArea extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <FormGroup>\r\n                    <Label for={this.props.name}>{this.props.name}</Label>\r\n                    <Input \r\n                    type=\"textarea\" \r\n                    name={this.props.name}\r\n                    id={this.props.name} \r\n                    rows={this.props.rows} \r\n                    value={this.props.value} \r\n                    onChange={this.props.onChange}\r\n                    style={this.props.styler}\r\n                    />\r\n                </FormGroup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TextArea;","import React, { Component } from 'react';\r\nimport { Button, Col, Row, FormGroup, Form, Label, Input } from 'reactstrap';\r\n\r\n\r\nclass TextAreaQuery extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form  >\r\n                    <FormGroup >\r\n                        <Label for={this.props.name}>{this.props.name}</Label>\r\n                        <Row>\r\n                            <Col lg=\"10\" xl=\"10\" md=\"10\" sm=\"10\">\r\n                                <Input\r\n                                    bsSize=\"sm\"\r\n                                    type=\"textarea\"\r\n                                    name={this.props.name}\r\n                                    id={this.props.name}\r\n                                    rows={this.props.rows}\r\n                                    value={this.props.value}\r\n                                    onChange={this.props.onChange}\r\n                                />\r\n                            </Col>\r\n                            <Col lg=\"1\" xl=\"1\" md=\"1\" sm=\"1\">\r\n                               <Button\r\n                                    bsSize=\"sm\"\r\n                                    name={this.props.buttonName}\r\n                                    onClick={this.props.buttonOnClick}\r\n                                    color=\"success\"\r\n                                    hidden={ !this.props.buttonText }\r\n                                >\r\n                                    {this.props.buttonText}\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                    </FormGroup>\r\n\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TextAreaQuery;","import React from 'react';\r\nimport { Card, Button, CardTitle, CardText } from 'reactstrap';\r\n\r\nconst Card1 = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <Card body>\r\n    { props.heading &&  <CardTitle tag=\"h5\">{props.heading}</CardTitle> }\r\n    { props.text && <CardText>{props.text}</CardText>}\r\n    { props.linkName && <Button >Go to {props.link}</Button>}\r\n            </Card>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card1;","import React, { Component } from 'react';\r\nimport { Button, Col, Row, FormGroup, Form, Label, Input, ButtonGroup } from 'reactstrap';\r\n\r\n\r\nclass TextAreaQuery2 extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form  >\r\n                    <FormGroup >\r\n                        <Label for={this.props.name}>{this.props.name}</Label>\r\n                        <Row>\r\n                            <Col lg=\"12\" xl=\"12\" md=\"12\" sm=\"12\">\r\n                                <Input\r\n                                    bsSize=\"sm\"\r\n                                    type=\"textarea\"\r\n                                    name={this.props.name}\r\n                                    id={this.props.name}\r\n                                    rows={this.props.rows}\r\n                                    value={this.props.value}\r\n                                    onChange={this.props.onChange}\r\n                                />\r\n                            </Col>\r\n                            <Col lg=\"12\" xl=\"12\" md=\"12\" sm=\"12\">\r\n\r\n                                <ButtonGroup size=\"sm\" className=\"buttonGroup\">\r\n                                <Button\r\n                                    name={this.props.buttonName}\r\n                                    onClick={this.props.buttonOnClick}\r\n                                    color=\"success\"\r\n                                >\r\n                                    {this.props.buttonText}\r\n                                </Button>\r\n                                <Button\r\n                                    name={this.props.buttonName2}\r\n                                    onClick={this.props.buttonOnClick2}\r\n                                    color=\"secondary\"\r\n                                >\r\n                                    {this.props.buttonText2}\r\n                                </Button>\r\n                                <Button\r\n                                    name={this.props.buttonName3}\r\n                                    onClick={this.props.buttonOnClick3}\r\n                                    color=\"danger\"\r\n                                    style={{borderLeft:\"white 1px solid\"}}\r\n                                >\r\n                                    {this.props.buttonText3}\r\n                                </Button>\r\n                            </ButtonGroup>\r\n\r\n                            </Col>\r\n                        </Row>\r\n\r\n                    </FormGroup>\r\n\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TextAreaQuery2;","import React, { Component } from 'react';\r\nimport { Jumbotron, Button, Row, Container, Col, ButtonGroup } from 'reactstrap';\r\nimport { withRouter } from \"react-router\";\r\nimport './Universal.css';\r\nimport TextArea from './subComponents/TextArea';\r\nimport TextAreaQuery from './subComponents/TextAreaQuery';\r\nimport Card1 from './subComponents/Card1';\r\nimport TextAreaQuery2 from './subComponents/TextAreaQuery2';\r\n\r\n\r\nclass HCPCandFilter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateInputValue = this.updateInputValue.bind(this);\r\n        this.updateSearchValue = this.updateSearchValue.bind(this);\r\n        this.setName = this.setName.bind(this);\r\n        this.updatesearchStringFlagsValue = this.updatesearchStringFlagsValue.bind(this);\r\n        this.updateRegexFlagsValue = this.updateRegexFlagsValue.bind(this);\r\n        this.setSearchValue = this.setSearchValue.bind(this);\r\n        this.updateSearchType = this.updateSearchType.bind(this);\r\n        this.saveStateToCookie = this.saveStateToCookie.bind(this);\r\n        this.saveSearchesToSearchesCookie = this.saveSearchesToSearchesCookie.bind(this);\r\n        this.loadSearchFromSavedSearches = this.loadSearchFromSavedSearches.bind(this);\r\n        this.pullStateFromCookie = this.pullStateFromCookie.bind(this);\r\n        this.hcpcManager = this.hcpcManager.bind(this);\r\n        this.resetAll = this.resetAll.bind(this);\r\n\r\n\r\n        this.state = {\r\n            input: \"Input Placeholder\",\r\n            output: \"Output Placeholder\",\r\n            noCountOutput: \"Output Placeholder\",\r\n            csvOutput: \"Output Placeholder\",\r\n            csvDedupeOutput: \"Output Placeholder\",\r\n            searchType: \"string\",\r\n            searchValue: \"Placeholder\",\r\n            searchStringFlags: \"c\",\r\n            searchRegexFlags: \"gmi\",\r\n            Searches: {}\r\n        };\r\n\r\n    }\r\n\r\n    resetAll() {\r\n        localStorage.removeItem(\"cookie2\")\r\n\r\n\r\n        this.setState({\r\n            input: \"Input Placeholder\",\r\n            output: \"Output Placeholder\",\r\n            noCountOutput: \"Output Placeholder\",\r\n            csvOutput: \"Output Placeholder\",\r\n            csvDedupeOutput: \"Output Placeholder\",\r\n            searchType: \"string\",\r\n            searchValue: \"Placeholder\",\r\n            searchStringFlags: \"c\",\r\n            searchRegexFlags: \"gmi\",\r\n            name: \"\"\r\n        }, this.saveStateToCookie(100));\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.pullStateFromCookie()\r\n    }\r\n\r\n\r\n    saveStateToCookie(num) {\r\n        if (num) { } else { num = 0 }\r\n        setTimeout(() => {\r\n            let cookieData = {};\r\n            // let name = this.state.name ? this.state.name : \"\"; ;\r\n            // let input= this.state.input ? this.state.input : \"Input Placeholder\";\r\n            // let output= this.state.output ? this.state.output :\"Output Placeholder\";\r\n            // let noCountOutput= this.state.noCountOutput ? this.state.noCountOutput :\"Output Placeholder\";\r\n            // csvOutput:  \"Output Placeholder\",\r\n            // csvDedupeOutput:  \"Output Placeholder\",\r\n            let searchType = this.state.searchType ? this.state.searchType : \"string\";\r\n            let searchValue = this.state.searchValue ? this.state.searchValue : \"([A-CE-Z][0-9]{4})\";\r\n            let searchStringFlags = this.state.searchStringFlags ? this.state.searchStringFlags : \"ci\";\r\n            let searchRegexFlags = this.state.searchRegexFlags ? this.state.searchRegexFlags : \"gmi\";\r\n\r\n            cookieData.searchType = searchType;\r\n            cookieData.searchValue = searchValue;\r\n            cookieData.searchStringFlags = searchStringFlags;\r\n            cookieData.searchRegexFlags = searchRegexFlags;\r\n\r\n\r\n            localStorage.setItem('cookie2', JSON.stringify(cookieData));\r\n        }, num);\r\n\r\n    }\r\n\r\n    saveSearchesToSearchesCookie(val) {\r\n        //get the current proposed name\r\n        //save the current state to that name\r\n        //remove the searches subObject to prevent duplicates\r\n        //The final cookie will be a object like {name: state, name2: state2, Searches: null}\r\n\r\n        let cookieData = {};\r\n        let name = this.state.name;\r\n        // let input= this.state.input ? this.state.input : \"Input Placeholder\";\r\n        // let output= this.state.output ? this.state.output :\"Output Placeholder\";\r\n        // let noCountOutput= this.state.noCountOutput ? this.state.noCountOutput :\"Output Placeholder\";\r\n        // csvOutput:  \"Output Placeholder\",\r\n        // csvDedupeOutput:  \"Output Placeholder\",\r\n        let searchType = this.state.searchType ? this.state.searchType : \"string\";\r\n        let searchValue = this.state.searchValue ? this.state.searchValue : \"([A-CE-Z][0-9]{4})\";\r\n        let searchStringFlags = this.state.searchStringFlags ? this.state.searchStringFlags : \"ci\";\r\n        let searchRegexFlags = this.state.searchRegexFlags ? this.state.searchRegexFlags : \"gmi\";\r\n        let nameValue = this.state.name ? this.state.name : \"\";\r\n\r\n        if (name === null || name === undefined) { return } else {\r\n            alert(\"Current search saved as \" + name)\r\n        }\r\n\r\n        if (localStorage.getItem('Searches2')) {\r\n            cookieData = JSON.parse(localStorage.getItem('Searches2'));\r\n        }\r\n\r\n        cookieData[name] = {};\r\n        cookieData[name].searchType = searchType;\r\n        cookieData[name].searchValue = searchValue;\r\n        cookieData[name].searchStringFlags = searchStringFlags;\r\n        cookieData[name].searchRegexFlags = searchRegexFlags;\r\n        cookieData[name].name = nameValue;\r\n        //unsure if this one does anything except eat up storage, replacing.\r\n        // cookieData[name] = this.state;\r\n\r\n        \r\n\r\n\r\n        localStorage.setItem('Searches2', JSON.stringify(cookieData));\r\n        this.setState({ Searches: cookieData });\r\n\r\n        if (val) {\r\n            if (cookieData[this.state.name]) {\r\n                delete cookieData[this.state.name];\r\n                localStorage.setItem('Searches2', JSON.stringify(cookieData));\r\n                this.setState({ Searches: cookieData })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    pullStateFromCookie() {\r\n        if (localStorage.getItem('cookie2')) {\r\n            let fetchedCookie = JSON.parse(localStorage.getItem('cookie2'));\r\n            Object.keys(fetchedCookie).forEach(element => {\r\n                if (element === \"name\") { } else {\r\n                    this.setState({\r\n                        [element]: fetchedCookie[element]\r\n                    })\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n        if (localStorage.getItem('Searches2')) {\r\n            let fetchedCookie2 = JSON.parse(localStorage.getItem('Searches2'));\r\n            this.setState({\r\n                Searches: fetchedCookie2\r\n            })\r\n        }\r\n    }\r\n\r\n    loadSearchFromSavedSearches(val) {\r\n        if (this.state.Searches && this.state.Searches[val]) {\r\n            let fetchedSearch = this.state.Searches[val];\r\n            Object.keys(fetchedSearch).forEach(element => {\r\n                if (element !== \"Searches\" && element !== \"input\" && element !== \"output\" && element !== \"noCountOutput\" && element !== \"csvOutput\" && element !== \"csvDedupeOutput\") {\r\n                    this.setState({\r\n                        [element]: fetchedSearch[element]\r\n                    })\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    updateInputValue(e) {\r\n        e.preventDefault();\r\n        this.setState({ input: e.target.value });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    updateSearchValue(e) {\r\n        e.preventDefault();\r\n        this.setState({ searchValue: e.target.value });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    setName(e) {\r\n        e.preventDefault();\r\n        this.setState({ name: e.target.value });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    updatesearchStringFlagsValue(val) {\r\n        // console.log(\"calling searchStringFlags with \" + val)\r\n        // let searchStringFlags = this.state.searchStringFlags;\r\n\r\n        this.setState({ searchStringFlags: val });\r\n\r\n\r\n        // if (searchStringFlags.indexOf(val) !== -1) {\r\n        //     this.setState({ searchStringFlags: searchStringFlags.replace(val, \"\") });\r\n        // } else {\r\n        //     this.setState({ searchStringFlags: searchStringFlags + val });\r\n        // }\r\n\r\n        console.log(\"new value is now \" + this.state.searchStringFlags)\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    updateRegexFlagsValue(val) {\r\n        // console.log(\"calling updateRegexFlagsValue with \" + val)\r\n        let searchRegexFlags = this.state.searchRegexFlags;\r\n\r\n        if (searchRegexFlags.indexOf(val) !== -1) {\r\n            this.setState({ searchRegexFlags: searchRegexFlags.replace(val, \"\") });\r\n        } else {\r\n            this.setState({ searchRegexFlags: searchRegexFlags + val });\r\n        }\r\n\r\n        console.log(\"new value is now \" + this.state.searchRegexFlags)\r\n        this.saveStateToCookie()\r\n\r\n    }\r\n\r\n    updateSearchType(val) {\r\n\r\n        this.setState({ searchType: val });\r\n\r\n        console.log(\"new value is now \" + this.state.searchType)\r\n        this.saveStateToCookie()\r\n\r\n    }\r\n\r\n\r\n    hcpcManager(input) { // expands all hcpc ranges in document\r\n        let NumRegex = new RegExp(\"\\\\d{4}\", \"gmi\");\r\n        let LetterRegex = new RegExp(\"[A-CE-Z]\", \"gmi\");\r\n        let HCPCRegexRange = new RegExp(\"([A-CE-Z][0-9]{4}[\\\\t]{0,3}[-—]{0,2}(through){0,1}(to){0,1}[\\\\t]{0,3}[A-CE-Z][0-9]{4})\", \"gmi\");\r\n        console.log(\"range matches include\", input.match(HCPCRegexRange))\r\n\r\n        let result = input.replace(HCPCRegexRange, function (element) {\r\n\r\n            let letters = element.match(LetterRegex);\r\n            let numbers = element.match(NumRegex);\r\n            let store = [];\r\n\r\n            if (letters.length !== 2 | numbers.length !== 2 | numbers[0] > numbers[1]) { alert(\"failed match\") } else {\r\n                let i = numbers[0]\r\n                for (i; i <= numbers[1]; i++) {\r\n                    store.push(letters[0] + i)\r\n                }\r\n            }\r\n\r\n            store = store.join(\",\")\r\n            return store\r\n        });\r\n\r\n        return result\r\n\r\n\r\n\r\n    }\r\n\r\n    setSearchValue() {\r\n        let input = this.state.input;\r\n        let searchRegexFlags = this.state.searchRegexFlags;\r\n        let search = this.state.searchValue;\r\n        let searchType = this.state.searchType;\r\n        let caseSensitive;\r\n\r\n\r\n        input = this.hcpcManager(input);\r\n\r\n        if (searchRegexFlags.indexOf(\"i\") === -1) { // if case sensitive true  - no i flag\r\n            caseSensitive = true\r\n        } else {\r\n            caseSensitive = false\r\n        }\r\n\r\n        //if the regex option is chosen search as is - assign to array for the forEach loop below\r\n        //if the list option is chosen split into an array and regex search each element\r\n        if (searchType === \"string\") {\r\n            search = search.split(\",\");\r\n            search = Array.from(new Set(search));\r\n        } else {\r\n            search = [search]\r\n        }\r\n        let output = [];\r\n        let matcher2 = [];\r\n\r\n        search.forEach(element => {\r\n            // update this to keep a track of the specific order of matches\r\n            let match;\r\n            let matcher = []; // input.match(new RegExp(element, searchRegexFlags))\r\n            let test = new RegExp(element, searchRegexFlags);\r\n            while ((match = test.exec(input)) != null) {\r\n                matcher.push([match[0], parseInt(match.index)])\r\n\r\n            }\r\n\r\n            //if no matches\r\n            if (matcher === null) {\r\n                this.setState({ output: \"No Matches\" });\r\n                this.saveStateToCookie()\r\n                return\r\n            }\r\n            matcher2 = [...matcher2, ...matcher]\r\n        }\r\n        )\r\n\r\n        console.log(\"matcher2\", matcher2)\r\n\r\n        if (matcher2.length >= 1 && Array.isArray(matcher2)) {\r\n            // matcher = matcher.split(\",\") \r\n            matcher2 = matcher2.sort(([a, b], [c, d]) => b - d);\r\n            matcher2.forEach(element => {\r\n                console.log(\"matcher32\", element)\r\n                output = [...output, element[0]]\r\n            });\r\n\r\n        }\r\n\r\n\r\n\r\n        let noCountOutput = output.join(\"\\n\");\r\n        let csvOutput = output.join(\",\");\r\n\r\n        let uniqueOutput = [];\r\n        let counts = [];\r\n        let countOutput = [];\r\n        let csvDedupeOutput = [];\r\n\r\n        output.forEach(element => {\r\n            if (!caseSensitive) {\r\n                console.log(\"element,\", element)\r\n                let lowerCaseUniqueOutput = uniqueOutput.map(element => element.toLowerCase())\r\n                let pos = lowerCaseUniqueOutput.indexOf(element.toLowerCase());\r\n                if (pos === -1) {\r\n                    uniqueOutput.push(element)\r\n                    counts.push(1)\r\n                } else {\r\n                    counts[pos] = counts[pos] + 1;\r\n                }\r\n\r\n            } else {\r\n                let pos = uniqueOutput.indexOf(element);\r\n                if (pos === -1) {\r\n                    uniqueOutput.push(element)\r\n                    counts.push(1)\r\n                } else {\r\n                    counts[pos] = counts[pos] + 1;\r\n                }\r\n            }\r\n        });\r\n\r\n        uniqueOutput.forEach((element, index) => {\r\n            countOutput.push(element + \" - \" + counts[index] + \" times\");\r\n            csvDedupeOutput.push(element);\r\n        });\r\n\r\n\r\n\r\n        this.setState({\r\n            output: countOutput.join(\"\\n\"),\r\n            noCountOutput: noCountOutput,\r\n            csvOutput: csvOutput,\r\n            csvDedupeOutput: csvDedupeOutput.join(\",\")\r\n        });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Container >\r\n                <Row>\r\n\r\n                    <Col lg=\"9\" xl=\"9\" md=\"9\" sm=\"12\">\r\n                        <Jumbotron className=\"mainPanel panel\">\r\n                            <Row>\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    <TextArea\r\n                                        name=\"Input\"\r\n                                        value={this.state.input}\r\n                                        rows=\"12\"\r\n                                        onChange={this.updateInputValue}\r\n\r\n                                    />\r\n                                </Col>\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    {this.state.searchStringFlags.indexOf(\"c\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.noCountOutput}\r\n                                        rows=\"12\"\r\n                                    />}\r\n\r\n                                    {this.state.searchStringFlags.indexOf(\"a\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.output}\r\n                                        rows=\"12\"\r\n                                    />}\r\n\r\n                                    {this.state.searchStringFlags.indexOf(\"s\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.csvDedupeOutput}\r\n                                        rows=\"12\"\r\n                                    />}\r\n\r\n                                    {this.state.searchStringFlags.indexOf(\"h\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.csvOutput}\r\n                                        rows=\"12\"\r\n                                    />}\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <TextAreaQuery\r\n                                name=\"Search String\"\r\n                                value={this.state.searchValue}\r\n                                rows=\"6\"\r\n                                onChange={this.updateSearchValue}\r\n                                buttonOnClick={this.setSearchValue}\r\n                                buttonText=\"Search\"\r\n                            />\r\n\r\n                            <Card1\r\n                                text={<div><p>This tool checks for matches using regex or comma seperated lists of values. Use https://regexr.com/ to build the regex or note that\r\n                                    </p><ul>\r\n                                        <li>\\s means a space</li>\r\n                                        <li>\\n is a new line</li>\r\n                                        <li>\\d is any number</li>\r\n                                        <li>| is an or symbol</li>\r\n                                        <li>Don't include the flags portion of regexes as these are handled by buttons on the right</li>\r\n\r\n                                    </ul></div>}\r\n\r\n\r\n                            />\r\n\r\n\r\n                        </Jumbotron>\r\n                    </Col>\r\n                    <Col lg=\"3\" xl=\"3\" md=\"3\" sm=\"12\">\r\n                        <Jumbotron className=\"sidePanel panel\">\r\n                            <Col lg=\"12\" xl=\"12\" md=\"12\" sm=\"12\">\r\n                                <h5>Lookup</h5>\r\n                            </Col>\r\n                            <ButtonGroup size=\"sm\" className=\"buttonGroup\">\r\n                                <Button\r\n                                    color={this.state.searchRegexFlags.indexOf(\"i\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"i\")}\r\n                                >\r\n                                    Case Insensitive</Button>\r\n                                <Button\r\n                                    color={this.state.searchRegexFlags.indexOf(\"g\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"g\")}\r\n                                >\r\n                                    Global</Button>\r\n                                <Button\r\n                                    color={this.state.searchRegexFlags.indexOf(\"m\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"m\")}\r\n                                >\r\n                                    Multiline</Button>\r\n                            </ButtonGroup>\r\n\r\n\r\n                            <ButtonGroup size=\"sm\" className=\"buttonGroup\">\r\n                                <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"c\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"c\")}\r\n                                >\r\n                                    Show All</Button>\r\n                                <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"a\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"a\")}\r\n                                >\r\n                                    Count</Button>\r\n                                <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"s\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"s\")}\r\n                                >\r\n                                    CSV Trimmed</Button>\r\n                                <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"h\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"h\")}\r\n                                >\r\n                                    CSV</Button>\r\n\r\n                            </ButtonGroup>\r\n\r\n\r\n                            <ButtonGroup size=\"\" className=\"buttonGroup\">\r\n                                <label>Search Type</label>\r\n                                <Button\r\n                                    color={this.state.searchType.indexOf(\"regex\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateSearchType(\"regex\")}\r\n                                >\r\n                                    Regex</Button>\r\n                                <Button\r\n                                    color={this.state.searchType.indexOf(\"string\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateSearchType(\"string\")}\r\n                                >\r\n                                    List</Button>\r\n\r\n                            </ButtonGroup>\r\n\r\n                            <TextAreaQuery2\r\n                                name=\"Save Search\"\r\n                                value={this.state.name}\r\n                                rows=\"1\"\r\n                                onChange={this.setName}\r\n                                buttonOnClick={() => this.saveSearchesToSearchesCookie()}\r\n                                buttonOnClick2={() => this.saveSearchesToSearchesCookie(this.state.name)}\r\n                                buttonOnClick3={() => this.resetAll()}\r\n                                buttonText={\"Save\"}\r\n                                buttonText2={\"Delete\"}\r\n                                buttonText3={\"Reset Page\"}\r\n\r\n                            />\r\n\r\n                            {this.state.Searches && Object.keys(this.state.Searches).map((element) => {\r\n                                return element !== \"Searches\" ?\r\n                                    <Button\r\n                                        onClick={() => this.loadSearchFromSavedSearches(element)}\r\n                                        color=\"primary\"\r\n                                        style={{ border: \"solid white 1px\", marginLeft: \"1px\" }}\r\n                                    >{element}</Button> : \"\"\r\n                            })\r\n                            }\r\n\r\n\r\n\r\n                        </Jumbotron>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(HCPCandFilter)\r\n\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  NavbarText,\r\n  Button\r\n} from 'reactstrap';\r\nimport '../Universal.css'\r\nimport {\r\n  Route,\r\n  NavLink,\r\n  HashRouter,\r\n  Switch,\r\n  BrowserRouter\r\n} from \"react-router-dom\";\r\n\r\nimport Lookup from '../Lookup'\r\n\r\nconst Navbar1 = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color=\"light\" light expand=\"md\">\r\n        <NavbarBrand >\r\n        {props.Home ? props.Home : \"Home\"}\r\n        </NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"mr-auto\" navbar>\r\n\r\n            <UncontrolledDropdown nav inNavbar>\r\n              <DropdownToggle nav caret>\r\n                Lookup Tools\r\n              </DropdownToggle>\r\n              <DropdownMenu right>\r\n                <DropdownItem>\r\n                {props.lookupLink && props.lookupLink}\r\n                </DropdownItem>\r\n\r\n                <DropdownItem >\r\n                {props.HCPC && props.HCPC}\r\n                </DropdownItem>\r\n\r\n                <DropdownItem >\r\n                {props.lookupLinkAdvanced && props.lookupLinkAdvanced}\r\n                </DropdownItem>\r\n\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n\r\n            <UncontrolledDropdown nav inNavbar>\r\n              <DropdownToggle nav caret>\r\n                Formatters\r\n              </DropdownToggle>\r\n              <DropdownMenu right>\r\n                <DropdownItem>\r\n                {props.Policies && props.Policies}\r\n                </DropdownItem>\r\n                <DropdownItem >\r\n                {props.MasterPA && props.MasterPA}\r\n                </DropdownItem>\r\n                <DropdownItem>\r\n                  {props.GSheet && props.GSheet}\r\n                  </DropdownItem>\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n\r\n          </Nav>\r\n          {props.reset && <Button color=\"danger\" size=\"sm\" onClick={() => props.reset()} className=\"resetButton\">Reset</Button>}\r\n          <NavbarText>By Saif</NavbarText>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar1;","import React, { Component } from 'react';\r\nimport { Jumbotron, Row, Container, Col } from 'reactstrap';\r\nimport { withRouter } from \"react-router\";\r\nimport './Universal.css';\r\nimport Navbar1 from './subComponents/Navbar1';\r\nimport Card1 from './subComponents/Card1';\r\n\r\nclass HomePage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container >\r\n                <Row>\r\n\r\n                    {/* <Col lg=\"9\" xl=\"9\" md=\"9\" sm=\"9\"> */}\r\n                    <Jumbotron className=\"mainPanel panel\">\r\n                        <Row style={{\"marginBottom\": \"10px\"}}>\r\n                            <Col lg=\"4\" xl=\"4\" md=\"4\" sm=\"12\" >\r\n\r\n                                <Card1\r\n                                    heading=\"Go to Lookup Tool\"\r\n                                    text=\"This tool allows you to search for any term in a given list or Regex\"\r\n                                    linkName=\"Lookup Tool\"\r\n                                    link={this.props.lookupLink}\r\n                                />\r\n                            </Col>\r\n\r\n                            <Col lg=\"4\" xl=\"4\" md=\"4\" sm=\"12\">\r\n\r\n                                <Card1\r\n                                    heading=\"Go to ADVANCED Lookup Tool\"\r\n                                    text=\"Lookup tool with an ending regex, regex only  - experimental - for advanced users only\"\r\n                                    linkName=\"Lookup Tool - Advanced\"\r\n                                    link={this.props.lookupLinkAdvanced}\r\n                                />\r\n                            </Col>\r\n\r\n                            <Col lg=\"4\" xl=\"4\" md=\"4\" sm=\"12\">\r\n\r\n                                <Card1\r\n                                    heading=\"Go to HCPC Tool\"\r\n                                    text=\"Same as the Lookup Tool, but also expands HCPC Ranges\"\r\n                                    linkName=\"HCPC + Lookup Tool\"\r\n                                    link={this.props.HCPC}\r\n                                />\r\n                            </Col>\r\n\r\n                            </Row><Row>\r\n\r\n                            <Col lg=\"4\" xl=\"4\" md=\"4\" sm=\"12\">\r\n\r\n                                <Card1\r\n                                    heading=\"Go to Gsheet Tool\"\r\n                                    text=\"This tool applies the match formula for Gsheets. It also can be used to convert columsn to csv\"\r\n                                    linkName=\"Gsheet Tool\"\r\n                                    link={this.props.GSheet}\r\n                                />\r\n                            </Col>\r\n\r\n                            <Col lg=\"4\" xl=\"4\" md=\"4\" sm=\"12\">\r\n\r\n                                <Card1\r\n                                    heading=\"Go to Master PA Formatter\"\r\n                                    text=\"This tool takes Master PA text and adds new lines before headings / removes extra line breaks\"\r\n                                    linkName=\"Master PA Formatter\"\r\n                                    link={this.props.MasterPA}\r\n                                />\r\n                            </Col>\r\n\r\n                            <Col lg=\"4\" xl=\"4\" md=\"4\" sm=\"12\">\r\n\r\n                                <Card1\r\n                                    heading=\"Go to Policy Formatter\"\r\n                                    text=\"Experimental Tool which removes extra line breaks from Policy Coverage Criteria, can also add indents\"\r\n                                    linkName=\"Policy Formatter\"\r\n                                    link={this.props.Policies}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                    </Jumbotron>\r\n                    {/* </Col> */}\r\n                    {/* <Col lg=\"3\" xl=\"3\" md=\"3\" sm=\"3\">\r\n                        <Jumbotron className=\"sidePanel panel\">\r\n                        </Jumbotron>\r\n                    </Col> */}\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(HomePage)\r\n","import React, { Component } from 'react';\r\nimport { Jumbotron, Button, Row, Container, Col, ButtonGroup } from 'reactstrap';\r\nimport { withRouter } from \"react-router\";\r\nimport './Universal.css';\r\nimport TextArea from './subComponents/TextArea';\r\nimport TextAreaQuery from './subComponents/TextAreaQuery';\r\nimport Card1 from './subComponents/Card1';\r\nimport TextAreaQuery2 from './subComponents/TextAreaQuery2';\r\n\r\n\r\nclass LookupAdvanced extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateInputValue = this.updateInputValue.bind(this);\r\n        this.updateSearchValue = this.updateSearchValue.bind(this);\r\n        this.updateSearchValueEnd = this.updateSearchValueEnd.bind(this);\r\n        this.setName = this.setName.bind(this);\r\n        this.updatesearchStringFlagsValue = this.updatesearchStringFlagsValue.bind(this);\r\n        this.updateRegexFlagsValue = this.updateRegexFlagsValue.bind(this);\r\n        this.setSearchValue = this.setSearchValue.bind(this);\r\n        this.updateSearchType = this.updateSearchType.bind(this);\r\n        this.saveStateToCookie = this.saveStateToCookie.bind(this);\r\n        this.saveSearchesToSearchesCookie = this.saveSearchesToSearchesCookie.bind(this);\r\n        this.loadSearchFromSavedSearches = this.loadSearchFromSavedSearches.bind(this);\r\n        this.pullStateFromCookie = this.pullStateFromCookie.bind(this);\r\n        this.hcpcManager = this.hcpcManager.bind(this);\r\n        this.resetAll = this.resetAll.bind(this);\r\n\r\n\r\n        this.state = {\r\n            input: \"START Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has END been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\",\r\n            output: \"Output Placeholder\",\r\n            noCountOutput: \"Output Placeholder\",\r\n            csvOutput: \"Output Placeholder\",\r\n            csvDedupeOutput: \"Output Placeholder\",\r\n            searchType: \"regex\",\r\n            searchValue: \"(start[a-z\\\\s\\\\n0-9]{0,999})\",\r\n            searchValueEnd: \"(end)\",\r\n            searchStringFlags: \"c\",\r\n            searchRegexFlags: \"gmi\",\r\n            Searches: {}\r\n        };\r\n\r\n    }\r\n\r\n    resetAll() {\r\n        localStorage.removeItem(\"cookie3\")\r\n\r\n\r\n        this.setState({\r\n            input: \"START Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's END standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\",\r\n            output: \"Output Placeholder\",\r\n            noCountOutput: \"Output Placeholder\",\r\n            csvOutput: \"Output Placeholder\",\r\n            csvDedupeOutput: \"Output Placeholder\",\r\n            searchType: \"regex\",\r\n            searchValue: \"(start[a-z\\\\s\\\\n0-9]{0,999})\",\r\n            searchValueEnd: \"(end)\",\r\n            searchStringFlags: \"c\",\r\n            searchRegexFlags: \"gmi\",\r\n            name: \"\"\r\n        }, this.saveStateToCookie(100));\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.pullStateFromCookie()\r\n    }\r\n\r\n\r\n    saveStateToCookie(num) {\r\n        if (num) { } else { num = 0 }\r\n        setTimeout(() => {\r\n            let cookieData = {};\r\n            // let name = this.state.name ? this.state.name : \"\"; ;\r\n            // let input= this.state.input ? this.state.input : \"Input Placeholder\";\r\n            // let output= this.state.output ? this.state.output :\"Output Placeholder\";\r\n            // let noCountOutput= this.state.noCountOutput ? this.state.noCountOutput :\"Output Placeholder\";\r\n            // csvOutput:  \"Output Placeholder\",\r\n            // csvDedupeOutput:  \"Output Placeholder\",\r\n            let searchType = this.state.searchType ? this.state.searchType : \"regex\";\r\n            let searchValue = this.state.searchValue ? this.state.searchValue : \"(start[a-z\\\\s\\\\n0-9]{0,999})\";\r\n            let searchValueEnd = this.state.searchValueEnd ? this.state.searchValueEnd : \"(end)\";\r\n            let searchStringFlags = this.state.searchStringFlags ? this.state.searchStringFlags : \"ci\";\r\n            let searchRegexFlags = this.state.searchRegexFlags ? this.state.searchRegexFlags : \"gmi\";\r\n\r\n            cookieData.searchType = searchType;\r\n            cookieData.searchValue = searchValue;\r\n            cookieData.searchValueEnd = searchValueEnd;\r\n            cookieData.searchStringFlags = searchStringFlags;\r\n            cookieData.searchRegexFlags = searchRegexFlags;\r\n\r\n\r\n            localStorage.setItem('cookie3', JSON.stringify(cookieData));\r\n        }, num);\r\n\r\n    }\r\n\r\n    saveSearchesToSearchesCookie(val) {\r\n        //get the current proposed name\r\n        //save the current state to that name\r\n        //remove the searches subObject to prevent duplicates\r\n        //The final cookie will be a object like {name: state, name2: state2, Searches: null}\r\n\r\n        let cookieData = {};\r\n        let name = this.state.name;\r\n        // let input= this.state.input ? this.state.input : \"Input Placeholder\";\r\n        // let output= this.state.output ? this.state.output :\"Output Placeholder\";\r\n        // let noCountOutput= this.state.noCountOutput ? this.state.noCountOutput :\"Output Placeholder\";\r\n        // csvOutput:  \"Output Placeholder\",\r\n        // csvDedupeOutput:  \"Output Placeholder\",\r\n        let searchType = this.state.searchType ? this.state.searchType : \"regex\";\r\n        let searchValue = this.state.searchValue ? this.state.searchValue : \"(start[a-z\\\\s\\\\n0-9]{0,999})\";\r\n        let searchValueEnd = this.state.searchValueEnd ? this.state.searchValueEnd : \"(end)\";\r\n        let searchStringFlags = this.state.searchStringFlags ? this.state.searchStringFlags : \"ci\";\r\n        let searchRegexFlags = this.state.searchRegexFlags ? this.state.searchRegexFlags : \"gmi\";\r\n        let nameValue = this.state.name ? this.state.name : \"\";\r\n\r\n        if (name === null || name === undefined) { return } else {\r\n            alert(\"Current search saved as \" + name)\r\n        }\r\n\r\n        if (localStorage.getItem('Searches2')) {\r\n            cookieData = JSON.parse(localStorage.getItem('Searches2'));\r\n        }\r\n\r\n        cookieData[name] = {};\r\n        cookieData[name].searchType = searchType;\r\n        cookieData[name].searchValue = searchValue;\r\n        cookieData[name].searchValueEnd = searchValueEnd;\r\n        cookieData[name].searchStringFlags = searchStringFlags;\r\n        cookieData[name].searchRegexFlags = searchRegexFlags;\r\n        cookieData[name].name = nameValue;\r\n        //unsure if this one does anything except eat up storage, replacing.\r\n        // cookieData[name] = this.state;\r\n\r\n        \r\n\r\n\r\n        localStorage.setItem('Searches2', JSON.stringify(cookieData));\r\n        this.setState({ Searches: cookieData });\r\n\r\n        if (val) {\r\n            if (cookieData[this.state.name]) {\r\n                delete cookieData[this.state.name];\r\n                localStorage.setItem('Searches2', JSON.stringify(cookieData));\r\n                this.setState({ Searches: cookieData })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    pullStateFromCookie() {\r\n        if (localStorage.getItem('cookie3')) {\r\n            let fetchedCookie = JSON.parse(localStorage.getItem('cookie3'));\r\n            Object.keys(fetchedCookie).forEach(element => {\r\n                if (element === \"name\") { } else {\r\n                    this.setState({\r\n                        [element]: fetchedCookie[element]\r\n                    })\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n        if (localStorage.getItem('Searches2')) {\r\n            let fetchedcookie3 = JSON.parse(localStorage.getItem('Searches2'));\r\n            this.setState({\r\n                Searches: fetchedcookie3\r\n            })\r\n        }\r\n    }\r\n\r\n    loadSearchFromSavedSearches(val) {\r\n        if (this.state.Searches && this.state.Searches[val]) {\r\n            let fetchedSearch = this.state.Searches[val];\r\n            if(fetchedSearch.searchType === \"string\"){\r\n                alert(\"could not load - this page only accepts regex search types\")\r\n\r\n            }else{\r\n            Object.keys(fetchedSearch).forEach(element => {\r\n                if (element !== \"Searches\" && element !== \"input\" && element !== \"output\" && element !== \"noCountOutput\" && element !== \"csvOutput\" && element !== \"csvDedupeOutput\") {\r\n                    this.setState({\r\n                        [element]: fetchedSearch[element]\r\n                    })\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    updateInputValue(e) {\r\n        e.preventDefault();\r\n        this.setState({ input: e.target.value });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    updateSearchValue(e) {\r\n        e.preventDefault();\r\n        this.setState({ searchValue: e.target.value });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    updateSearchValueEnd(e) {\r\n        e.preventDefault();\r\n        this.setState({ searchValueEnd: e.target.value });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    setName(e) {\r\n        e.preventDefault();\r\n        this.setState({ name: e.target.value });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    updatesearchStringFlagsValue(val) {\r\n        // console.log(\"calling searchStringFlags with \" + val)\r\n        // let searchStringFlags = this.state.searchStringFlags;\r\n\r\n        this.setState({ searchStringFlags: val });\r\n\r\n\r\n        // if (searchStringFlags.indexOf(val) !== -1) {\r\n        //     this.setState({ searchStringFlags: searchStringFlags.replace(val, \"\") });\r\n        // } else {\r\n        //     this.setState({ searchStringFlags: searchStringFlags + val });\r\n        // }\r\n\r\n        console.log(\"new value is now \" + this.state.searchStringFlags)\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    updateRegexFlagsValue(val) {\r\n        // console.log(\"calling updateRegexFlagsValue with \" + val)\r\n        let searchRegexFlags = this.state.searchRegexFlags;\r\n\r\n        if (searchRegexFlags.indexOf(val) !== -1) {\r\n            this.setState({ searchRegexFlags: searchRegexFlags.replace(val, \"\") });\r\n        } else {\r\n            this.setState({ searchRegexFlags: searchRegexFlags + val });\r\n        }\r\n\r\n        console.log(\"new value is now \" + this.state.searchRegexFlags)\r\n        this.saveStateToCookie()\r\n\r\n    }\r\n\r\n    updateSearchType(val) {\r\n\r\n        this.setState({ searchType: val });\r\n\r\n        console.log(\"new value is now \" + this.state.searchType)\r\n        this.saveStateToCookie()\r\n\r\n    }\r\n\r\n\r\n    hcpcManager(input) { // expands all hcpc ranges in document\r\n        let NumRegex = new RegExp(\"\\\\d{4}\", \"gmi\");\r\n        let LetterRegex = new RegExp(\"[A-CE-Z]\", \"gmi\");\r\n        let HCPCRegexRange = new RegExp(\"([A-CE-Z][0-9]{4}[\\\\t]{0,3}[-—]{0,2}(through){0,1}(to){0,1}[\\\\t]{0,3}[A-CE-Z][0-9]{4})\", \"gmi\");\r\n        console.log(\"range matches include\", input.match(HCPCRegexRange))\r\n\r\n        let result = input.replace(HCPCRegexRange, function (element) {\r\n\r\n            let letters = element.match(LetterRegex);\r\n            let numbers = element.match(NumRegex);\r\n            let store = [];\r\n\r\n            if (letters.length !== 2 | numbers.length !== 2 | numbers[0] > numbers[1]) { alert(\"failed match\") } else {\r\n                let i = numbers[0]\r\n                for (i; i <= numbers[1]; i++) {\r\n                    store.push(letters[0] + i)\r\n                }\r\n            }\r\n\r\n            store = store.join(\",\")\r\n            return store\r\n        });\r\n\r\n        return result\r\n\r\n\r\n\r\n    }\r\n\r\n    setSearchValue() {\r\n        let input = this.state.input;\r\n        let searchRegexFlags = this.state.searchRegexFlags;\r\n        let search = this.state.searchValue;\r\n        let searchEnd = this.state.searchValueEnd;\r\n        let searchType = this.state.searchType;\r\n        let caseSensitive;\r\n\r\n\r\n        input = this.hcpcManager(input);\r\n\r\n        if (searchRegexFlags.indexOf(\"i\") === -1) { // if case sensitive true  - no i flag\r\n            caseSensitive = true\r\n        } else {\r\n            caseSensitive = false\r\n        }\r\n\r\n        //if the regex option is chosen search as is - assign to array for the forEach loop below\r\n        //if the list option is chosen split into an array and regex search each element\r\n        if (searchType === \"string\") {\r\n            search = search.split(\",\");\r\n            search = Array.from(new Set(search));\r\n        } else {\r\n            search = [search]\r\n        }\r\n        let output = [];\r\n        let matcher2 = [];\r\n\r\n        search.forEach(element => {\r\n            // update this to keep a track of the specific order of matches\r\n            let match;\r\n            let matcher = []; // input.match(new RegExp(element, searchRegexFlags))\r\n            let test = new RegExp(element, searchRegexFlags);\r\n            while ((match = test.exec(input)) != null) {\r\n                matcher.push([match[0], parseInt(match.index)])\r\n\r\n            }\r\n\r\n            //if no matches\r\n            if (matcher === null) {\r\n                this.setState({ output: \"No Matches\" });\r\n                this.saveStateToCookie()\r\n                return\r\n            }\r\n            matcher2 = [...matcher2, ...matcher]\r\n        }\r\n        )\r\n\r\n        console.log(\"matcher2\", matcher2)\r\n\r\n        if (matcher2.length >= 1 && Array.isArray(matcher2)) {\r\n            // matcher = matcher.split(\",\") \r\n            matcher2 = matcher2.sort(([a, b], [c, d]) => b - d);\r\n            matcher2.forEach(element => {\r\n                console.log(\"matcher32\", element)\r\n                let test2 = new RegExp(searchEnd, searchRegexFlags);\r\n                element[0] = element[0].split(test2)[0]\r\n                output = [...output, element[0]]\r\n            });\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n        let noCountOutput = output.join(\"\\n\\n\\n\\n\");\r\n        let csvOutput = output.join(\",\");\r\n\r\n        let uniqueOutput = [];\r\n        let counts = [];\r\n        let countOutput = [];\r\n        let csvDedupeOutput = [];\r\n\r\n        output.forEach(element => {\r\n            if (!caseSensitive) {\r\n                console.log(\"element,\", element)\r\n                let lowerCaseUniqueOutput = uniqueOutput.map(element => element.toLowerCase())\r\n                let pos = lowerCaseUniqueOutput.indexOf(element.toLowerCase());\r\n                if (pos === -1) {\r\n                    uniqueOutput.push(element)\r\n                    counts.push(1)\r\n                } else {\r\n                    counts[pos] = counts[pos] + 1;\r\n                }\r\n\r\n            } else {\r\n                let pos = uniqueOutput.indexOf(element);\r\n                if (pos === -1) {\r\n                    uniqueOutput.push(element)\r\n                    counts.push(1)\r\n                } else {\r\n                    counts[pos] = counts[pos] + 1;\r\n                }\r\n            }\r\n        });\r\n\r\n        uniqueOutput.forEach((element, index) => {\r\n            countOutput.push(element + \" - \" + counts[index] + \" times\");\r\n            csvDedupeOutput.push(element);\r\n        });\r\n\r\n\r\n\r\n\r\n\r\n        this.setState({\r\n            output: countOutput.join(\"\\n\\n\\n\"),\r\n            noCountOutput: noCountOutput,\r\n            csvOutput: csvOutput,\r\n            csvDedupeOutput: csvDedupeOutput.join(\",\")\r\n        });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Container >\r\n                <Row>\r\n\r\n                    <Col lg=\"9\" xl=\"9\" md=\"9\" sm=\"12\">\r\n                        <Jumbotron className=\"mainPanel panel\">\r\n                            <Row>\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    <TextArea\r\n                                        name=\"Input\"\r\n                                        value={this.state.input}\r\n                                        rows=\"12\"\r\n                                        onChange={this.updateInputValue}\r\n\r\n                                    />\r\n                                </Col>\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    {this.state.searchStringFlags.indexOf(\"c\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.noCountOutput}\r\n                                        rows=\"12\"\r\n                                    />}\r\n\r\n                                    {this.state.searchStringFlags.indexOf(\"a\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.output}\r\n                                        rows=\"12\"\r\n                                    />}\r\n\r\n                                    {this.state.searchStringFlags.indexOf(\"s\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.csvDedupeOutput}\r\n                                        rows=\"12\"\r\n                                    />}\r\n\r\n                                    {this.state.searchStringFlags.indexOf(\"h\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.csvOutput}\r\n                                        rows=\"12\"\r\n                                    />}\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <TextAreaQuery\r\n                                name=\"Search String\"\r\n                                value={this.state.searchValue}\r\n                                rows=\"3\"\r\n                                onChange={this.updateSearchValue}\r\n                                buttonOnClick={this.setSearchValue}\r\n                                buttonText=\"Search\"\r\n                            />\r\n\r\n                            <TextAreaQuery\r\n                                name=\"Search String End\"\r\n                                value={this.state.searchValueEnd}\r\n                                rows=\"3\"\r\n                                onChange={this.updateSearchValueEnd}\r\n                                // buttonOnClick={this.setSearchValueEnd}\r\n                                // buttonText=\"Search\"\r\n                            />\r\n\r\n                            <Card1\r\n                                text={<div><p>A variant of the lookup tool, this page takes 2 regexes and returns any match for the first regex and truncates it where the second regex starts.\r\n                                    </p><ul>\r\n                                        <p style={{\"fontWeight\":\"900\"}}>Press Reset Page and click search for an example</p>\r\n                                        <li>The first regex matches the keyword 'Start' and 999 characters after it</li>\r\n                                        <li>The second regex matches the keyword 'End'</li>\r\n                                        <li>As a result we get the first 999 characters after Start until End cuts it off early</li>\r\n                                        \r\n\r\n                                    </ul></div>}\r\n\r\n\r\n                            />\r\n\r\n\r\n                        </Jumbotron>\r\n                    </Col>\r\n                    <Col lg=\"3\" xl=\"3\" md=\"3\" sm=\"12\">\r\n                        <Jumbotron className=\"sidePanel panel\">\r\n                            <Col lg=\"12\" xl=\"12\" md=\"12\" sm=\"12\">\r\n                                <h5>Lookup</h5>\r\n                            </Col>\r\n                            <ButtonGroup size=\"sm\" className=\"buttonGroup\">\r\n                                <Button\r\n                                    color={this.state.searchRegexFlags.indexOf(\"i\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"i\")}\r\n                                >\r\n                                    Case Insensitive</Button>\r\n                                <Button\r\n                                    color={this.state.searchRegexFlags.indexOf(\"g\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"g\")}\r\n                                >\r\n                                    Global</Button>\r\n                                <Button\r\n                                    color={this.state.searchRegexFlags.indexOf(\"m\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"m\")}\r\n                                >\r\n                                    Multiline</Button>\r\n                            </ButtonGroup>\r\n\r\n\r\n                            <ButtonGroup size=\"lg\" className=\"buttonGroup\">\r\n                                <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"c\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"c\")}\r\n                                >\r\n                                    Show All</Button>\r\n                                {/* <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"a\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"a\")}\r\n                                >\r\n                                    Count</Button>\r\n                                <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"s\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"s\")}\r\n                                >\r\n                                    CSV Trimmed</Button>\r\n                                <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"h\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"h\")}\r\n                                >\r\n                                    CSV</Button> */}\r\n\r\n                            </ButtonGroup>\r\n\r\n\r\n                            <ButtonGroup size=\"lg\" className=\"buttonGroup\">\r\n                                {/* <label>Search Type</label> */}\r\n                                <Button\r\n                                    color={this.state.searchType.indexOf(\"regex\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateSearchType(\"regex\")}\r\n                                >\r\n                                    Regex</Button>\r\n                                {/* <Button\r\n                                    color={this.state.searchType.indexOf(\"string\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateSearchType(\"string\")}\r\n                                >\r\n                                    List</Button> */}\r\n\r\n                            </ButtonGroup>\r\n\r\n                            <TextAreaQuery2\r\n                                name=\"Save Search\"\r\n                                value={this.state.name}\r\n                                rows=\"1\"\r\n                                onChange={this.setName}\r\n                                buttonOnClick={() => this.saveSearchesToSearchesCookie()}\r\n                                buttonOnClick2={() => this.saveSearchesToSearchesCookie(this.state.name)}\r\n                                buttonOnClick3={() => this.resetAll()}\r\n                                buttonText={\"Save\"}\r\n                                buttonText2={\"Delete\"}\r\n                                buttonText3={\"Reset Page\"}\r\n\r\n                            />\r\n\r\n                            {this.state.Searches && Object.keys(this.state.Searches).map((element) => {\r\n                                return element !== \"Searches\" ?\r\n                                    <Button\r\n                                        onClick={() => this.loadSearchFromSavedSearches(element)}\r\n                                        color=\"primary\"\r\n                                        style={{ border: \"solid white 1px\", marginLeft: \"1px\" }}\r\n                                    >{element}</Button> : \"\"\r\n                            })\r\n                            }\r\n\r\n\r\n\r\n                        </Jumbotron>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(LookupAdvanced)\r\n\r\n","import React, { Component } from 'react';\r\nimport { Jumbotron, Button, Row, Container, Col, ButtonGroup } from 'reactstrap';\r\nimport { withRouter } from \"react-router\";\r\nimport './Universal.css';\r\nimport TextArea from './subComponents/TextArea';\r\nimport TextAreaQuery from './subComponents/TextAreaQuery';\r\nimport Card1 from './subComponents/Card1';\r\nimport TextAreaQuery2 from './subComponents/TextAreaQuery2';\r\n\r\n\r\nclass HCPCandFilter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateInputValue = this.updateInputValue.bind(this);\r\n        this.updateSearchValue = this.updateSearchValue.bind(this);\r\n        this.setName = this.setName.bind(this);\r\n        this.updatesearchStringFlagsValue = this.updatesearchStringFlagsValue.bind(this);\r\n        this.updateRegexFlagsValue = this.updateRegexFlagsValue.bind(this);\r\n        this.setSearchValue = this.setSearchValue.bind(this);\r\n        this.updateSearchType = this.updateSearchType.bind(this);\r\n        this.saveStateToCookie = this.saveStateToCookie.bind(this);\r\n        this.saveSearchesToSearchesCookie = this.saveSearchesToSearchesCookie.bind(this);\r\n        this.loadSearchFromSavedSearches = this.loadSearchFromSavedSearches.bind(this);\r\n        this.pullStateFromCookie = this.pullStateFromCookie.bind(this);\r\n        this.hcpcManager = this.hcpcManager.bind(this);\r\n        this.resetAll = this.resetAll.bind(this);\r\n\r\n\r\n        this.state = {\r\n            input: \"Input Placeholder\",\r\n            output: \"Output Placeholder\",\r\n            noCountOutput: \"Output Placeholder\",\r\n            csvOutput: \"Output Placeholder\",\r\n            csvDedupeOutput: \"Output Placeholder\",\r\n            searchType: \"string\",\r\n            searchValue: \"Placeholder\",\r\n            searchStringFlags: \"c\",\r\n            searchRegexFlags: \"gmi\",\r\n            Searches: {}\r\n        };\r\n\r\n    }\r\n\r\n    resetAll() {\r\n        localStorage.removeItem(\"cookie2\")\r\n\r\n\r\n        this.setState({\r\n            input: \"Input Placeholder\",\r\n            output: \"Output Placeholder\",\r\n            noCountOutput: \"Output Placeholder\",\r\n            csvOutput: \"Output Placeholder\",\r\n            csvDedupeOutput: \"Output Placeholder\",\r\n            searchType: \"string\",\r\n            searchValue: \"Placeholder\",\r\n            searchStringFlags: \"c\",\r\n            searchRegexFlags: \"gmi\",\r\n            name: \"\"\r\n        }, this.saveStateToCookie(100));\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.pullStateFromCookie()\r\n    }\r\n\r\n\r\n    saveStateToCookie(num) {\r\n        if (num) { } else { num = 0 }\r\n        setTimeout(() => {\r\n            let cookieData = {};\r\n            // let name = this.state.name ? this.state.name : \"\"; ;\r\n            // let input= this.state.input ? this.state.input : \"Input Placeholder\";\r\n            // let output= this.state.output ? this.state.output :\"Output Placeholder\";\r\n            // let noCountOutput= this.state.noCountOutput ? this.state.noCountOutput :\"Output Placeholder\";\r\n            // csvOutput:  \"Output Placeholder\",\r\n            // csvDedupeOutput:  \"Output Placeholder\",\r\n            let searchType = this.state.searchType ? this.state.searchType : \"string\";\r\n            let searchValue = this.state.searchValue ? this.state.searchValue : \"([A-CE-Z][0-9]{4})\";\r\n            let searchStringFlags = this.state.searchStringFlags ? this.state.searchStringFlags : \"ci\";\r\n            let searchRegexFlags = this.state.searchRegexFlags ? this.state.searchRegexFlags : \"gmi\";\r\n\r\n            cookieData.searchType = searchType;\r\n            cookieData.searchValue = searchValue;\r\n            cookieData.searchStringFlags = searchStringFlags;\r\n            cookieData.searchRegexFlags = searchRegexFlags;\r\n\r\n\r\n            localStorage.setItem('cookie2', JSON.stringify(cookieData));\r\n        }, num);\r\n\r\n    }\r\n\r\n    saveSearchesToSearchesCookie(val) {\r\n        //get the current proposed name\r\n        //save the current state to that name\r\n        //remove the searches subObject to prevent duplicates\r\n        //The final cookie will be a object like {name: state, name2: state2, Searches: null}\r\n\r\n        let cookieData = {};\r\n        let name = this.state.name;\r\n        // let input= this.state.input ? this.state.input : \"Input Placeholder\";\r\n        // let output= this.state.output ? this.state.output :\"Output Placeholder\";\r\n        // let noCountOutput= this.state.noCountOutput ? this.state.noCountOutput :\"Output Placeholder\";\r\n        // csvOutput:  \"Output Placeholder\",\r\n        // csvDedupeOutput:  \"Output Placeholder\",\r\n        let searchType = this.state.searchType ? this.state.searchType : \"string\";\r\n        let searchValue = this.state.searchValue ? this.state.searchValue : \"([A-CE-Z][0-9]{4})\";\r\n        let searchStringFlags = this.state.searchStringFlags ? this.state.searchStringFlags : \"ci\";\r\n        let searchRegexFlags = this.state.searchRegexFlags ? this.state.searchRegexFlags : \"gmi\";\r\n\r\n        if (name === null || name === undefined) { return } else {\r\n            alert(\"Current search saved as \" + name)\r\n        }\r\n\r\n        if (localStorage.getItem('Searches2')) {\r\n            cookieData = JSON.parse(localStorage.getItem('Searches2'));\r\n        }\r\n\r\n        cookieData[name] = {};\r\n        cookieData[name].searchType = searchType;\r\n        cookieData[name].searchValue = searchValue;\r\n        cookieData[name].searchStringFlags = searchStringFlags;\r\n        cookieData[name].searchRegexFlags = searchRegexFlags;\r\n        cookieData[name] = this.state;\r\n\r\n\r\n        localStorage.setItem('Searches2', JSON.stringify(cookieData));\r\n        this.setState({ Searches: cookieData });\r\n\r\n        if (val) {\r\n            if (cookieData[this.state.name]) {\r\n                delete cookieData[this.state.name];\r\n                localStorage.setItem('Searches2', JSON.stringify(cookieData));\r\n                this.setState({ Searches: cookieData })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    pullStateFromCookie() {\r\n        if (localStorage.getItem('cookie2')) {\r\n            let fetchedCookie = JSON.parse(localStorage.getItem('cookie2'));\r\n            Object.keys(fetchedCookie).forEach(element => {\r\n                if (element === \"name\") { } else {\r\n                    this.setState({\r\n                        [element]: fetchedCookie[element]\r\n                    })\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n        if (localStorage.getItem('Searches2')) {\r\n            let fetchedCookie2 = JSON.parse(localStorage.getItem('Searches2'));\r\n            this.setState({\r\n                Searches: fetchedCookie2\r\n            })\r\n        }\r\n    }\r\n\r\n    loadSearchFromSavedSearches(val) {\r\n        if (this.state.Searches && this.state.Searches[val]) {\r\n            let fetchedSearch = this.state.Searches[val];\r\n            Object.keys(fetchedSearch).forEach(element => {\r\n                if (element !== \"Searches\" && element !== \"input\" && element !== \"output\" && element !== \"noCountOutput\" && element !== \"csvOutput\" && element !== \"csvDedupeOutput\") {\r\n                    this.setState({\r\n                        [element]: fetchedSearch[element]\r\n                    })\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    updateInputValue(e) {\r\n        e.preventDefault();\r\n        this.setState({ input: e.target.value });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    updateSearchValue(e) {\r\n        e.preventDefault();\r\n        this.setState({ searchValue: e.target.value });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    setName(e) {\r\n        e.preventDefault();\r\n        this.setState({ name: e.target.value });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    updatesearchStringFlagsValue(val) {\r\n        // console.log(\"calling searchStringFlags with \" + val)\r\n        // let searchStringFlags = this.state.searchStringFlags;\r\n\r\n        this.setState({ searchStringFlags: val });\r\n\r\n\r\n        // if (searchStringFlags.indexOf(val) !== -1) {\r\n        //     this.setState({ searchStringFlags: searchStringFlags.replace(val, \"\") });\r\n        // } else {\r\n        //     this.setState({ searchStringFlags: searchStringFlags + val });\r\n        // }\r\n\r\n        console.log(\"new value is now \" + this.state.searchStringFlags)\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    updateRegexFlagsValue(val) {\r\n        // console.log(\"calling updateRegexFlagsValue with \" + val)\r\n        let searchRegexFlags = this.state.searchRegexFlags;\r\n\r\n        if (searchRegexFlags.indexOf(val) !== -1) {\r\n            this.setState({ searchRegexFlags: searchRegexFlags.replace(val, \"\") });\r\n        } else {\r\n            this.setState({ searchRegexFlags: searchRegexFlags + val });\r\n        }\r\n\r\n        console.log(\"new value is now \" + this.state.searchRegexFlags)\r\n        this.saveStateToCookie()\r\n\r\n    }\r\n\r\n    updateSearchType(val) {\r\n\r\n        this.setState({ searchType: val });\r\n\r\n        console.log(\"new value is now \" + this.state.searchType)\r\n        this.saveStateToCookie()\r\n\r\n    }\r\n\r\n\r\n    hcpcManager(input) { // expands all hcpc ranges in document\r\n        let NumRegex = new RegExp(\"\\\\d{4}\", \"gmi\");\r\n        let LetterRegex = new RegExp(\"[A-CE-Z]\", \"gmi\");\r\n        let HCPCRegexRange = new RegExp(\"([A-CE-Z][0-9]{4}[\\\\t]{0,3}[-—]{0,2}(through){0,1}(to){0,1}[\\\\t]{0,3}[A-CE-Z][0-9]{4})\", \"gmi\");\r\n        console.log(\"range matches include\", input.match(HCPCRegexRange))\r\n\r\n        let result = input.replace(HCPCRegexRange, function (element) {\r\n\r\n            let letters = element.match(LetterRegex);\r\n            let numbers = element.match(NumRegex);\r\n            let store = [];\r\n\r\n            if (letters.length !== 2 | numbers.length !== 2 | numbers[0] > numbers[1]) { alert(\"failed match\") } else {\r\n                let i = numbers[0]\r\n                for (i; i <= numbers[1]; i++) {\r\n                    store.push(letters[0] + i)\r\n                }\r\n            }\r\n\r\n            store = store.join(\",\")\r\n            return store\r\n        });\r\n\r\n        return result\r\n\r\n\r\n\r\n    }\r\n\r\n    setSearchValue() {\r\n        let input = this.state.input;\r\n        let searchRegexFlags = this.state.searchRegexFlags;\r\n        let search = this.state.searchValue;\r\n        let searchType = this.state.searchType;\r\n        let caseSensitive;\r\n\r\n\r\n        input = this.hcpcManager(input);\r\n\r\n        if (searchRegexFlags.indexOf(\"i\") === -1) { // if case sensitive true  - no i flag\r\n            caseSensitive = true\r\n        } else {\r\n            caseSensitive = false\r\n        }\r\n\r\n        //if the regex option is chosen search as is - assign to array for the forEach loop below\r\n        //if the list option is chosen split into an array and regex search each element\r\n        if (searchType === \"string\") {\r\n            search = search.split(\",\");\r\n            search = Array.from(new Set(search));\r\n        } else {\r\n            search = [search]\r\n        }\r\n        let output = [];\r\n        let matcher2 = [];\r\n\r\n        search.forEach(element => {\r\n            // update this to keep a track of the specific order of matches\r\n            let match;\r\n            let matcher = []; // input.match(new RegExp(element, searchRegexFlags))\r\n            let test = new RegExp(element, searchRegexFlags);\r\n            while ((match = test.exec(input)) != null) {\r\n                matcher.push([match[0], parseInt(match.index)])\r\n\r\n            }\r\n\r\n            //if no matches\r\n            if (matcher === null) {\r\n                this.setState({ output: \"No Matches\" });\r\n                this.saveStateToCookie()\r\n                return\r\n            }\r\n            matcher2 = [...matcher2, ...matcher]\r\n        }\r\n        )\r\n\r\n        console.log(\"matcher2\", matcher2)\r\n\r\n        if (matcher2.length >= 1 && Array.isArray(matcher2)) {\r\n            // matcher = matcher.split(\",\") \r\n            matcher2 = matcher2.sort(([a, b], [c, d]) => b - d);\r\n            matcher2.forEach(element => {\r\n                console.log(\"matcher32\", element)\r\n                output = [...output, element[0]]\r\n            });\r\n\r\n        }\r\n\r\n\r\n\r\n        let noCountOutput = output.join(\"\\n\");\r\n        let csvOutput = output.join(\",\");\r\n\r\n        let uniqueOutput = [];\r\n        let counts = [];\r\n        let countOutput = [];\r\n        let csvDedupeOutput = [];\r\n\r\n        output.forEach(element => {\r\n            if (!caseSensitive) {\r\n                console.log(\"element,\", element)\r\n                let lowerCaseUniqueOutput = uniqueOutput.map(element => element.toLowerCase())\r\n                let pos = lowerCaseUniqueOutput.indexOf(element.toLowerCase());\r\n                if (pos === -1) {\r\n                    uniqueOutput.push(element)\r\n                    counts.push(1)\r\n                } else {\r\n                    counts[pos] = counts[pos] + 1;\r\n                }\r\n\r\n            } else {\r\n                let pos = uniqueOutput.indexOf(element);\r\n                if (pos === -1) {\r\n                    uniqueOutput.push(element)\r\n                    counts.push(1)\r\n                } else {\r\n                    counts[pos] = counts[pos] + 1;\r\n                }\r\n            }\r\n        });\r\n\r\n        uniqueOutput.forEach((element, index) => {\r\n            countOutput.push(element + \" - \" + counts[index] + \" times\");\r\n            csvDedupeOutput.push(element);\r\n        });\r\n\r\n\r\n\r\n        this.setState({\r\n            output: countOutput.join(\"\\n\"),\r\n            noCountOutput: noCountOutput,\r\n            csvOutput: csvOutput,\r\n            csvDedupeOutput: csvDedupeOutput.join(\",\")\r\n        });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Container >\r\n                <Row>\r\n\r\n                    <Col lg=\"9\" xl=\"9\" md=\"9\" sm=\"12\">\r\n                        <Jumbotron className=\"mainPanel panel\">\r\n                            <Row>\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    <TextArea\r\n                                        name=\"Input\"\r\n                                        value={this.state.input}\r\n                                        rows=\"12\"\r\n                                        onChange={this.updateInputValue}\r\n\r\n                                    />\r\n                                </Col>\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    {this.state.searchStringFlags.indexOf(\"c\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.noCountOutput}\r\n                                        rows=\"12\"\r\n                                    />}\r\n\r\n                                    {this.state.searchStringFlags.indexOf(\"a\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.output}\r\n                                        rows=\"12\"\r\n                                    />}\r\n\r\n                                    {this.state.searchStringFlags.indexOf(\"s\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.csvDedupeOutput}\r\n                                        rows=\"12\"\r\n                                    />}\r\n\r\n                                    {this.state.searchStringFlags.indexOf(\"h\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.csvOutput}\r\n                                        rows=\"12\"\r\n                                    />}\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <TextAreaQuery\r\n                                name=\"Search String\"\r\n                                value={this.state.searchValue}\r\n                                rows=\"6\"\r\n                                onChange={this.updateSearchValue}\r\n                                buttonOnClick={this.setSearchValue}\r\n                                buttonText=\"Search\"\r\n                            />\r\n\r\n                            <Card1\r\n                                text='This tool is the same as the lookup tool, but also expands HCPC ranges'\r\n                            />\r\n\r\n\r\n                        </Jumbotron>\r\n                    </Col>\r\n                    <Col lg=\"3\" xl=\"3\" md=\"3\" sm=\"12\">\r\n                        <Jumbotron className=\"sidePanel panel\">\r\n                            <Col lg=\"12\" xl=\"12\" md=\"12\" sm=\"12\">\r\n                                <h5>HCPC Lookup</h5>\r\n                            </Col>\r\n                            <ButtonGroup size=\"sm\" className=\"buttonGroup\">\r\n                                <Button\r\n                                    color={this.state.searchRegexFlags.indexOf(\"i\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"i\")}\r\n                                >\r\n                                    Case Insensitive</Button>\r\n                                <Button\r\n                                    color={this.state.searchRegexFlags.indexOf(\"g\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"g\")}\r\n                                >\r\n                                    Global</Button>\r\n                                <Button\r\n                                    color={this.state.searchRegexFlags.indexOf(\"m\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"m\")}\r\n                                >\r\n                                    Multiline</Button>\r\n                            </ButtonGroup>\r\n\r\n\r\n                            <ButtonGroup size=\"sm\" className=\"buttonGroup\">\r\n                                <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"c\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"c\")}\r\n                                >\r\n                                    Show All</Button>\r\n                                <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"a\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"a\")}\r\n                                >\r\n                                    Count</Button>\r\n                                <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"s\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"s\")}\r\n                                >\r\n                                    CSV Trimmed</Button>\r\n                                <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"h\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"h\")}\r\n                                >\r\n                                    CSV</Button>\r\n\r\n                            </ButtonGroup>\r\n\r\n\r\n                            <ButtonGroup size=\"\" className=\"buttonGroup\">\r\n                                <label>Search Type</label>\r\n                                <Button\r\n                                    color={this.state.searchType.indexOf(\"regex\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateSearchType(\"regex\")}\r\n                                >\r\n                                    Regex</Button>\r\n                                <Button\r\n                                    color={this.state.searchType.indexOf(\"string\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateSearchType(\"string\")}\r\n                                >\r\n                                    List</Button>\r\n\r\n                            </ButtonGroup>\r\n\r\n                            <TextAreaQuery2\r\n                                name=\"Save Search\"\r\n                                value={this.state.name}\r\n                                rows=\"1\"\r\n                                onChange={this.setName}\r\n                                buttonOnClick={() => this.saveSearchesToSearchesCookie()}\r\n                                buttonOnClick2={() => this.saveSearchesToSearchesCookie(this.state.name)}\r\n                                buttonOnClick3={() => this.resetAll()}\r\n                                buttonText={\"Save\"}\r\n                                buttonText2={\"Delete\"}\r\n                                buttonText3={\"Reset Page\"}\r\n\r\n                            />\r\n\r\n                            {this.state.Searches && Object.keys(this.state.Searches).map((element) => {\r\n                                return element !== \"Searches\" ?\r\n                                    <Button\r\n                                        onClick={() => this.loadSearchFromSavedSearches(element)}\r\n                                        color=\"primary\"\r\n                                        style={{ border: \"solid white 1px\", marginLeft: \"1px\" }}\r\n                                    >{element}</Button> : \"\"\r\n                            })\r\n                            }\r\n\r\n\r\n\r\n                        </Jumbotron>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(HCPCandFilter)\r\n\r\n","import React, { Component } from 'react';\r\nimport { Jumbotron, Button, Row, Container, Col, ButtonGroup } from 'reactstrap';\r\nimport { withRouter } from \"react-router\";\r\nimport './Universal.css';\r\nimport TextArea from './subComponents/TextArea';\r\nimport Card1 from './subComponents/Card1';\r\n\r\n\r\nclass Formatter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateInputValue = this.updateInputValue.bind(this);\r\n        this.launchFormatter = this.launchFormatter.bind(this);\r\n        this.rulesManager = this.rulesManager.bind(this);\r\n        this.toggleexperimental = this.toggleexperimental.bind(this);\r\n        this.fontSizeChange = this.fontSizeChange.bind(this);\r\n        this.saveFontCookie = this.saveFontCookie.bind(this);\r\n        this.loadFontCookie = this.loadFontCookie.bind(this);\r\n\r\n        this.state = {\r\n            input: \"Placeholder\",\r\n            output: \"Output Placeholder\",\r\n            experimentalOutput: \"Output Placeholder\",\r\n            experimental: false,\r\n            fontSize: 10\r\n        };\r\n\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.loadFontCookie()\r\n    }\r\n\r\n    fontSizeChange(num) {\r\n        let fontSize = this.state.fontSize;\r\n        if (num === \"0\" || num === 0) { this.setState({ fontSize: fontSize - 2 }) }\r\n        if (num === \"1\" || num === 1) { this.setState({ fontSize: fontSize + 2 }) }\r\n        this.saveFontCookie()\r\n    }\r\n\r\n    saveFontCookie() {\r\n        let font = this.state.fontSize;\r\n        localStorage.setItem('fontSize', font);\r\n    }\r\n\r\n    loadFontCookie() {\r\n        let font = localStorage.getItem('fontSize');\r\n        console.log(\"fontSize\", font)\r\n        if (font !== null && Number.isInteger(font)) {\r\n            this.setState({ fontSize: font })\r\n        }\r\n    }\r\n\r\n\r\n    updateInputValue(e) {\r\n        e.preventDefault();\r\n        this.setState({ input: e.target.value });\r\n    }\r\n\r\n\r\n    toggleexperimental() {\r\n        // console.log(\"calling experimental with \" + val)\r\n        let experimental = this.state.experimental;\r\n\r\n        if (experimental === true) {\r\n            this.setState({ experimental: false });\r\n        } else {\r\n            this.setState({ experimental: true });\r\n        }\r\n\r\n        // console.log(\"new double line value is now \" + this.state.experimental)\r\n    }\r\n\r\n\r\n    updateSearchType(val) {\r\n\r\n        this.setState({ searchType: val });\r\n\r\n        // console.log(\"new value is now \" + this.state.searchType)\r\n\r\n    }\r\n\r\n\r\n\r\n    rulesManager(inputer, type) { // expands all hcpc ranges in document\r\n        // flow\r\n        // 1. Take input and remove line breaks where first word is lower case and not direcly followed by a .)-\r\n        // a. match regexes for different bullet points and insert line breaks before them\r\n        // 2.remove extra line breaks\r\n        // 3.\r\n        // 4.\r\n\r\n\r\n        let result;\r\n        let result2;\r\n\r\n        let smallCapsStartingLine = new RegExp(\"[\\\\n]{1,99}[\\\\s]{0,99}([a-z]{0,40}[\\\\s,]|AND|OR|NOT)\", \"gm\");\r\n        let obviousBulletPoints = new RegExp(\"([•])|([\\\\s\\\\n]o[\\\\s\\\\n])\", \"gmi\");\r\n        let letterBulletPoint = new RegExp(\"((?<!\\\\([\\\\sa-z]{2,99})[\\\\s\\\\n][a-z]{1,2}[.)][\\\\s])\", \"gmi\");\r\n        let numberBulletPoint = new RegExp(\"((?<!\\\\([\\\\sa-z]{2,99})[\\\\s\\\\n][0-9]{1,2}[.)]([\\\\s]|[A-Za-z]{2}))\", \"gmi\");\r\n        let RomanBulletPoint = new RegExp(\"((?<!\\\\([\\\\sa-z]{2,99})[\\\\s\\\\n][IVX]{1,5}[.)][\\\\s])\", \"gmi\");\r\n        let doubleLine = new RegExp(\"\\\\n\\\\n\", \"gmi\")\r\n        let commaLine = new RegExp(\"([\\\\,][\\\\s]{0,3}[\\\\n])\", \"gmi\")\r\n\r\n        console.log(\"inputer called\")\r\n\r\n        result = inputer.replace(smallCapsStartingLine, function (element) {\r\n            console.log(\"smallCapsStartingLine\",element)\r\n            if (element.match(obviousBulletPoints)) { return element }\r\n            return element.replace(\"\\n\", \" \")\r\n        })\r\n\r\n        result2 = result.replace(obviousBulletPoints, function (element) {\r\n            // console.log(\"obviousBulletPoints\",element)\r\n            if (element.charAt(0) !== \"\\n\") { if(element.charAt(0) === \" \"){return \"\\n\" + element.substring(1) }else{return \"\\n\" + element }}\r\n            return element //.replace(\"\\n\", \" \")\r\n        })\r\n\r\n        result2 = result2.replace(letterBulletPoint, function (element) {\r\n            // console.log(\"letterBulletPoint\",element)\r\n            if (element.match(obviousBulletPoints)) { return element }\r\n            if (element.charAt(0) !== \"\\n\") { \r\n                // console.log(\"letterBulletPoint first letter is not newline \",element)\r\n                if(element.charAt(0) === \" \"){\r\n                    // console.log(\"letterBulletPoint first letter is space \",element)\r\n                    return \"\\n\" + element.substring(1) }else{\r\n                        // console.log(\"letterBulletPoint first letter is not space or new line, returning as new row \",element)\r\n                        return \"\\n\" + element }}\r\n            return element //.replace(\"\\n\", \" \")\r\n        })\r\n\r\n        result2 = result2.replace(numberBulletPoint, function (element) {\r\n            // console.log(\"numberBulletPoint\",element)\r\n            if (element.match(obviousBulletPoints) || element.match(obviousBulletPoints)) { return element }\r\n            if (element.charAt(0) !== \"\\n\") { if(element.charAt(0) === \" \"){return \"\\n\" + element.substring(1) }else{return \"\\n\" + element }}\r\n            return element //.replace(\"\\n\", \" \")\r\n        })\r\n\r\n        result2 = result2.replace(RomanBulletPoint, function (element) {\r\n            console.log(\"RomanBulletPoint\",element)\r\n            if (element.match(obviousBulletPoints) || element.match(numberBulletPoint) || element.match(obviousBulletPoints)) {\r\n                        console.log(\"RomanBulletPoint first letter is a match for other regexes returning \",element)\r\n                        return element }\r\n            if (element.charAt(0) !== \"\\n\") {\r\n                console.log(\"RomanBulletPoint first letter is a newline \",element)\r\n                if(element.charAt(0) === \" \"){\r\n                    console.log(\"RomanBulletPoint first letter is a space returning as new row minus 1 letter  \",element)\r\n                    return \"\\n\" + element.substring(1) }else{\r\n                        console.log(\"RomanBulletPoint first letter is a not a space or a new line returning as new row  \",element)\r\n                        return \"\\n\" + element }}\r\n            return element\r\n        })\r\n\r\n        result = result.replace(doubleLine, \"\\n\")\r\n        result2 = result2.replace(doubleLine, \"\\n\")\r\n        result = result.replace(commaLine, \", \")\r\n        result2 = result2.replace(commaLine, \", \")\r\n\r\n        return [result, result2]\r\n    }\r\n\r\n    launchFormatter(type) {\r\n        // console.log(\"LaunchFormatter called\")\r\n        let input = this.state.input;\r\n        input = this.rulesManager(input, type);\r\n\r\n\r\n        this.setState({\r\n            output: input[0],\r\n            experimentalOutput: input[1]\r\n        });\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Container >\r\n                <Row>\r\n\r\n\r\n                    <Col lg=\"12\" xl=\"12\" md=\"12\" sm=\"12\">\r\n                        <Jumbotron className=\"mainPanel panel\">\r\n                            <Col lg=\"12\" xl=\"12\" md=\"12\" sm=\"12\">\r\n                                <h5>Policy Formatter (Experimental)</h5>\r\n                            </Col>\r\n                            <Row>\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    <TextArea\r\n                                        name=\"Input\"\r\n                                        placeholder={this.state.input}\r\n                                        rows=\"18\"\r\n                                        onChange={this.updateInputValue}\r\n                                        styler={{ fontSize: this.state.fontSize }}\r\n\r\n                                    />\r\n                                </Col>\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.experimental === true ? this.state.experimentalOutput : this.state.output}\r\n                                        rows=\"18\"\r\n                                        styler={{ fontSize: this.state.fontSize }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Col lg=\"12\" xl=\"12\" md=\"12\" sm=\"12\">\r\n                                <ButtonGroup size=\"\" className=\"buttonGroup\">\r\n                                    {/* <label>Options</label> */}\r\n                                    <Button\r\n                                        bsSize=\"\"\r\n                                        name=\"launchFormatter\"\r\n                                        onClick={() => this.launchFormatter(1)}\r\n                                        color=\"success\"\r\n                                    >\r\n                                        Format\r\n                                </Button>\r\n                                    <Button\r\n                                        color={this.state.experimental === true ? \"primary\" : \"secondary\"}\r\n                                        onClick={() => this.toggleexperimental(\"c\")}\r\n                                    >\r\n                                        Experimental formatting</Button>\r\n\r\n\r\n                                </ButtonGroup>\r\n                                <ButtonGroup size=\"\" className=\"buttonGroup float-right\">\r\n                                    <label style={{ paddingRight: \"10px\", textAlign: \"center\", marginTop: \"5px\" }}>Font Size: </label>\r\n                                    <Button\r\n                                        bsSize=\"\"\r\n                                        name=\"fontSizeChange0\"\r\n                                        onClick={() => this.fontSizeChange(0)}\r\n                                        color=\"secondary\"\r\n                                    >\r\n                                        -\r\n                                </Button>\r\n                                    <Button\r\n                                        name=\"fontSizeChange1\"\r\n                                        color=\"secondary\"\r\n                                        onClick={() => this.fontSizeChange(1)}\r\n                                    >\r\n                                        +</Button>\r\n                                </ButtonGroup>\r\n\r\n\r\n                            </Col>\r\n\r\n                            <Card1\r\n                                text='This tool tries to remove extra line breaks. Experimental Formatting makes sure each bullet point is on a new line'\r\n                            />\r\n\r\n                        </Jumbotron>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(Formatter)\r\n\r\n","import React, { Component } from 'react';\r\nimport { Jumbotron, Button, Row, Container, Col, ButtonGroup } from 'reactstrap';\r\nimport { withRouter } from \"react-router\";\r\nimport './Universal.css';\r\nimport TextArea from './subComponents/TextArea';\r\nimport Card1 from './subComponents/Card1';\r\n\r\n\r\nclass MasterPAFormatter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateInputValue = this.updateInputValue.bind(this);\r\n        this.launchFormatter = this.launchFormatter.bind(this);\r\n        this.headerManager = this.headerManager.bind(this);\r\n        this.toggleDoubleLine = this.toggleDoubleLine.bind(this);\r\n        this.fontSizeChange = this.fontSizeChange.bind(this);\r\n        this.saveFontCookie = this.saveFontCookie.bind(this);\r\n        this.loadFontCookie = this.loadFontCookie.bind(this);\r\n\r\n        \r\n        this.state = {\r\n            input: \"Placeholder\",\r\n            output: \"Output Placeholder\",\r\n            noDoubleLineOutput: \"Output Placeholder\",\r\n            doubleLine: false,\r\n            fontSize: 10\r\n        };\r\n\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.loadFontCookie()\r\n    }\r\n\r\n    fontSizeChange(num) {\r\n        let fontSize = this.state.fontSize;\r\n        if (num === \"0\" || num === 0) { this.setState({ fontSize: fontSize - 2 }) }\r\n        if (num === \"1\" || num === 1) { this.setState({ fontSize: fontSize + 2 }) }\r\n        this.saveFontCookie()\r\n    }\r\n\r\n    saveFontCookie() {\r\n        let font = this.state.fontSize;\r\n        localStorage.setItem('fontSize', font);\r\n    }\r\n\r\n    loadFontCookie() {\r\n        let font = localStorage.getItem('fontSize');\r\n        console.log(\"fontSize\",font)\r\n        if(font !== null && Number.isInteger(font)){\r\n            this.setState({fontSize: font})\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    updateInputValue(e) {\r\n        e.preventDefault();\r\n        this.setState({ input: e.target.value });\r\n    }\r\n\r\n\r\n    toggleDoubleLine() {\r\n        // console.log(\"calling doubleLine with \" + val)\r\n        let doubleLine = this.state.doubleLine;\r\n\r\n        if (doubleLine === true) {\r\n            this.setState({ doubleLine: false });\r\n        } else {\r\n            this.setState({ doubleLine: true });\r\n        }\r\n\r\n        console.log(\"new double line value is now \" + this.state.doubleLine)\r\n    }\r\n\r\n\r\n    updateSearchType(val) {\r\n\r\n        this.setState({ searchType: val });\r\n\r\n        console.log(\"new value is now \" + this.state.searchType)\r\n\r\n    }\r\n\r\n\r\n    headerManager(inputer) {\r\n        let headingsRegex = new RegExp(\"(Affected[\\\\s]Drugs)|(Exclusion[\\\\s ]Criteria)|(PA[\\\\s ]Indication[\\\\s ]Indicator)|(Required[\\\\s ]Medical[\\\\s ]Information)|(Medical[\\\\s ]Information)|(Age[\\\\s ]Restriction[()s]{0,3})|(Prescriber[\\\\s ]Restriction[()s]{0,3})|(Coverage[\\\\s ]Duration)|(Other[\\\\s ]Criteria)|(Off[\\-\\\\s ]]{0,1}Label[\\\\s ]Use[()s]{0,3})|(Products[\\\\s ]Affected)|(PA[\\\\s ]Criteria)|(Last[\\\\s ]Updated)|([pP]age[\\\\s ][\\\\d]{1,4})|(Covered[\\\\s ]Use[()s]{0,3})|(Medication[()s]{0,3})|(Prior[\\\\-\\\\s ]{0,1}Authorization[\\\\-\\\\s ]{0,1}Group)|(Formulary ID [\\\\d]{2,10})|(Required[\\\\s ]Medical[\\\\s ]Info)|(Criteria[\\\\s ]Details)|(Prior[\\\\s ]Authorization[\\\\s ]Indication)|(Prior[\\\\s ]Authorization[\\\\s ]Group[\\\\s ]Description)|(Required[\\\\s ]Medical:)|(Updated [\\\\d]{2})|(AFFECTED[\\\\S]DRUGS)|(EXCLUSION[\\\\S ]CRITERIA)|(PA[\\\\S ]INDICATION[\\\\S ]INDICATOR)|(REQUIRED[\\\\S ]MEDICAL[\\\\S ]INFORMATION)|(MEDICAL[\\\\S ]INFORMATION)|(AGE[\\\\S ]RESTRICTION[()S]{0,3})|(PRESCRIBER[\\\\S ]RESTRICTION[()S]{0,3})|(COVERAGE[\\\\S ]DURATION)|(OTHER[\\\\S ]CRITERIA)|(OFF[\\-\\\\S ]]{0,1}LABEL[\\\\S ]USE[()S]{0,3})|(PRODUCTS[\\\\S ]AFFECTED)|(PA[\\\\S ]CRITERIA)|(LAST[\\\\S ]UPDATED)|([PP]AGE[\\\\S ][\\\\D]{1,4})|(COVERED[\\\\S ]USE[()S]{0,3})|(MEDICATION[()S]{0,3})|(PRIOR[\\\\-\\\\S ]{0,1}AUTHORIZATION[\\\\-\\\\S ]{0,1}GROUP)|(FORMULARY ID [\\\\D]{2,10})|(REQUIRED[\\\\S ]MEDICAL[\\\\S ]INFO)|(CRITERIA[\\\\S ]DETAILS)|(PRIOR[\\\\S ]AUTHORIZATION[\\\\S ]INDICATION)|(PRIOR[\\\\S ]AUTHORIZATION[\\\\S ]GROUP[\\\\S ]DESCRIPTION)|(REQUIRED[\\\\S ]MEDICAL:)|(UPDATED [\\\\D]{2})\", \"gm\")\r\n\r\n        let wrongHeadingsRegex = new RegExp(\"(accepted[\\\\s]{0,3}[\\\\n]Indications)|(approved[\\\\s]{0,3}[\\\\n]Indications)|(No[\\\\s]{0,3}[\\\\n]Age[\\\\s ]{0,3}Restriction)|(No[\\\\s]{0,3}[\\\\n]Exclusion[\\\\s ]{0,3}Criteria)\", \"gmi\")\r\n\r\n        let bulletsRegex = new RegExp(\"[•]|([\\\\s ]o[\\\\s ])\",\"gmi\")\r\n        let noDoubleBulletRegex =  new RegExp(\"[\\\\n]{2}[•]|([\\\\n]{2}[\\\\s ]o[\\\\s ])\",\"gmi\")\r\n\r\n        let CapsHeadings = new RegExp(\"[\\\\s ]{0,1}Indications[\\\\s ]\", \"gm\");\r\n        let newLine = new RegExp(\"\\\\n{1,55}\", \"gmi\");\r\n\r\n\r\n        let input = inputer.replace(newLine, function (element) {\r\n            element = \" \";\r\n            return element\r\n        })\r\n\r\n        //handling the different regex for special headings\r\n        input = input.replace(CapsHeadings, function (element) {\r\n            if (element.charAt(0) === \" \") { element = \"\\n\" + element.substring(1) } else {\r\n                element = \"\\n\" + element\r\n            }\r\n            return element\r\n        })\r\n\r\n\r\n        input = input.replace(bulletsRegex,function(element){\r\n            return \"\\n\" + element\r\n        })\r\n        //END handling the different regex for special headings\r\n\r\n\r\n\r\n        let result = input.replace(headingsRegex, function (element) {\r\n            element = \"\\n\" + element;\r\n            return element\r\n        });\r\n\r\n        result = result.replace(wrongHeadingsRegex, function (element) {\r\n            console.log(element)\r\n            element = element.replace(\"\\n\",\" \");\r\n            element = element.replace(\"  \",\" \");\r\n            return element\r\n        });\r\n\r\n        let result2 = result.replace(newLine,\"\\n\\n\")\r\n        result2 = result2.replace(noDoubleBulletRegex, function (element) {\r\n            element = element.replace(\"\\n\\n\",\"\\n\");\r\n            return element\r\n        });\r\n        \r\n        \r\n      \r\n\r\n\r\n        result = result.trim();\r\n        result2 = result2.trim();\r\n\r\n        return [result, result2]\r\n    }\r\n\r\n    launchFormatter() {\r\n        console.log(\"LaunchFormatter called\")\r\n        let input = this.state.input;\r\n        input = this.headerManager(input);\r\n\r\n\r\n        this.setState({\r\n            output: input[0],\r\n            noDoubleLineOutput: input[1]\r\n        });\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Container >\r\n                <Row>\r\n\r\n\r\n                    <Col lg=\"12\" xl=\"12\" md=\"12\" sm=\"12\">\r\n                        <Jumbotron className=\"mainPanel panel\">\r\n                            <Col lg=\"12\" xl=\"12\" md=\"12\" sm=\"12\">\r\n                                <h5>Master PA Formatter <span style={{fontSize: \"10px\"}}>v1.05</span></h5>\r\n                            </Col>\r\n                            <Row>\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    <TextArea\r\n                                        name=\"Input\"\r\n                                        placeholder={this.state.input}\r\n                                        rows=\"18\"\r\n                                        onChange={this.updateInputValue}\r\n                                        styler={{ fontSize: this.state.fontSize }}\r\n\r\n                                    />\r\n                                </Col>\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.doubleLine === true ? this.state.noDoubleLineOutput : this.state.output}\r\n                                        rows=\"18\"\r\n                                        styler={{ fontSize: this.state.fontSize }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n\r\n\r\n                            <ButtonGroup size=\"\" className=\"buttonGroup\">\r\n                                <Button\r\n                                    bsSize=\"\"\r\n                                    name=\"launchFormatter\"\r\n                                    onClick={() => this.launchFormatter()}\r\n                                    color=\"success\"\r\n                                >\r\n                                    Format\r\n                                </Button>                                <Button\r\n                                    color={this.state.doubleLine === true ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.toggleDoubleLine(\"c\")}\r\n                                >\r\n                                    Double Lines</Button>\r\n\r\n                            </ButtonGroup>\r\n\r\n                            <ButtonGroup size=\"\" className=\"buttonGroup float-right\">\r\n                                <label style={{ paddingRight: \"10px\", textAlign: \"center\", marginTop: \"5px\" }}>Font Size: </label>\r\n                                <Button\r\n                                    bsSize=\"\"\r\n                                    name=\"fontSizeChange0\"\r\n                                    onClick={() => this.fontSizeChange(0)}\r\n                                    color=\"secondary\"\r\n                                >\r\n                                    -\r\n                                </Button>\r\n                                <Button\r\n                                    name=\"fontSizeChange1\"\r\n                                    color=\"secondary\"\r\n                                    onClick={() => this.fontSizeChange(1)}\r\n                                >\r\n                                    +</Button>\r\n                            </ButtonGroup>\r\n\r\n                            <Card1\r\n                                text={<div><p>This tool removes all line breaks before finding  pre-defined headings and inserts linebreaks before them\r\n                                    </p></div>}\r\n\r\n\r\n                            />\r\n\r\n                        </Jumbotron>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(MasterPAFormatter)\r\n\r\n","import React, { Component } from 'react';\r\nimport { Jumbotron, Button, Row, Container, Col, ButtonGroup } from 'reactstrap';\r\nimport { withRouter } from \"react-router\";\r\nimport './Universal.css';\r\nimport TextArea from './subComponents/TextArea';\r\nimport Card1 from './subComponents/Card1';\r\n\r\n\r\nclass GSheetFormatter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateInputValue = this.updateInputValue.bind(this);\r\n        this.updateGSheetCellValue = this.updateGSheetCellValue.bind(this);\r\n        this.updateGSheetapplyFormula = this.updateGSheetapplyFormula.bind(this);\r\n        this.updateRegexFlagsValue = this.updateRegexFlagsValue.bind(this);\r\n        this.updateRegexFlagsValue2 = this.updateRegexFlagsValue2.bind(this);\r\n        this.launchFunction = this.launchFunction.bind(this);\r\n        this.resetAll = this.resetAll.bind(this);\r\n        this.fontSizeChange = this.fontSizeChange.bind(this);\r\n        this.saveFontCookie = this.saveFontCookie.bind(this);\r\n        this.loadFontCookie = this.loadFontCookie.bind(this);\r\n\r\n\r\n        this.state = {\r\n            input: \"Input Placeholder\",\r\n            output: \"Output Placeholder\",\r\n            outputCsv: \"Output Placeholder Csv\",\r\n            outputWithFormula: \"Output Placeholder With Formula\",\r\n            outputWithFormulaReverse: \"Output Placeholder With Is Not a Match Formula\",\r\n            GSheetCellValue: \"A2\",\r\n            GSheetFormulaFlag: \"rd\",\r\n            GSheetFormulaFlag2: \"rdrl\",\r\n            GSheetapplyFormula: \"normal\",\r\n            fontSize: 14\r\n\r\n        }\r\n\r\n        setTimeout(() => {\r\n            this.loadFontCookie()\r\n        }, 100);\r\n    }\r\n\r\n    resetAll() {\r\n\r\n\r\n        this.setState({\r\n            input: \"Input Placeholder\",\r\n            output: \"Output Placeholder\",\r\n            outputCsv: \"Output Placeholder Csv\",\r\n            outputWithFormula: \"Output Placeholder With Formula\",\r\n            outputWithFormulaReverse: \"Output Placeholder With Is Not a Match Formula\",\r\n            GSheetCellValue: \"A2\",\r\n            GSheetFormulaFlag: \"rd\",\r\n            GSheetFormulaFlag2: \"rdrl\",\r\n            GSheetapplyFormula: \"normal\"\r\n        });\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    fontSizeChange(num) {\r\n        let fontSize = this.state.fontSize;\r\n        if (num === \"0\" || num === 0) { this.setState({ fontSize: fontSize - 2 }) }\r\n        if (num === \"1\" || num === 1) { this.setState({ fontSize: fontSize + 2 }) }\r\n        this.saveFontCookie()\r\n    }\r\n\r\n    saveFontCookie() {\r\n        let font = this.state.fontSize;\r\n        localStorage.setItem('fontSize', font);\r\n    }\r\n\r\n    loadFontCookie() {\r\n        let font = localStorage.getItem('fontSize');\r\n        console.log(\"fontSize\", font)\r\n        if (font !== null && Number.isInteger(font)) {\r\n            this.setState({ fontSize: font })\r\n        }\r\n    }\r\n\r\n    updateInputValue(e) {\r\n        e.preventDefault();\r\n        this.setState({ input: e.target.value });\r\n    }\r\n\r\n    updateGSheetCellValue(e) {\r\n        e.preventDefault();\r\n        this.setState({ GSheetCellValue: e.target.value });\r\n    }\r\n\r\n\r\n\r\n    updateGSheetapplyFormula(val) {\r\n        // console.log(\"calling doubleLine with \" + val)\r\n        // let GSheetapplyFormula = this.state.GSheetapplyFormula;\r\n\r\n        this.setState({ GSheetapplyFormula: val });\r\n\r\n        // if (val === \"normal\") {\r\n        //     if (GSheetapplyFormula === \"normal\") {\r\n        //         this.setState({ GSheetapplyFormula: \"false\" });\r\n        //     } else {\r\n        //         this.setState({ GSheetapplyFormula: \"normal\" });\r\n        //     }\r\n        // } else {\r\n        //     if (GSheetapplyFormula === \"reverse\") {\r\n        //         this.setState({ GSheetapplyFormula: \"false\" });\r\n        //     } else {\r\n        //         this.setState({ GSheetapplyFormula: \"reverse\" });\r\n        //     }\r\n        // }\r\n\r\n        // console.log(\"new gSheet Formula value is now \" + this.state.GSheetFormulaFlag)\r\n    }\r\n\r\n    updateRegexFlagsValue(val) {\r\n        // console.log(\"calling updateRegexFlagsValue with \" + val)\r\n        let GSheetFormulaFlag = this.state.GSheetFormulaFlag;\r\n\r\n        if (GSheetFormulaFlag.indexOf(val) !== -1 && val !== \"rl\" && val !== \"rcm\") {\r\n            GSheetFormulaFlag = GSheetFormulaFlag.replace(val, \"\");\r\n        } else {\r\n            GSheetFormulaFlag = GSheetFormulaFlag + val;\r\n        }\r\n\r\n        //radio settings for list/csv splits on input - nl is plit at new line, cs is split at comma\r\n        if (val === \"cs\" && GSheetFormulaFlag.indexOf(\"nl\") !== -1) {\r\n            GSheetFormulaFlag = GSheetFormulaFlag.replace(\"nl\", \"\");\r\n        } else {\r\n            if (val === \"nl\" && GSheetFormulaFlag.indexOf(\"cs\") !== -1) {\r\n                GSheetFormulaFlag = GSheetFormulaFlag.replace(\"cs\", \"\");\r\n            }\r\n        }\r\n\r\n        // //radio settings for list/csv - rl is return list rcm is return csv\r\n        // if (val === \"rl\") {\r\n        //     GSheetFormulaFlag = GSheetFormulaFlag.replace(\"rcm\", \"\");\r\n        //     GSheetFormulaFlag = GSheetFormulaFlag.replace(\"rl\", \"\");\r\n        //     GSheetFormulaFlag = GSheetFormulaFlag + val;\r\n        // } else {\r\n        //     if (val === \"rcm\") {\r\n        //         GSheetFormulaFlag = GSheetFormulaFlag.replace(\"rcm\", \"\");\r\n        //         GSheetFormulaFlag = GSheetFormulaFlag.replace(\"rl\", \"\");\r\n        //         GSheetFormulaFlag = GSheetFormulaFlag + val;\r\n\r\n        //     } else {\r\n\r\n        //     }\r\n        // }\r\n\r\n\r\n\r\n        this.setState({ GSheetFormulaFlag: GSheetFormulaFlag })\r\n\r\n        console.log(\"new value is now \" + this.state.GSheetFormulaFlag)\r\n\r\n    }\r\n\r\n    \r\n    updateRegexFlagsValue2(val) {\r\n        // console.log(\"calling updateRegexFlagsValue with \" + val)\r\n        let GSheetFormulaFlag = this.state.GSheetFormulaFlag2;\r\n\r\n   \r\n        //radio settings for list/csv - rl is return list rcm is return csv\r\n        if (val === \"rl\") {\r\n            GSheetFormulaFlag = GSheetFormulaFlag.replace(\"rcm\", \"\");\r\n            GSheetFormulaFlag = GSheetFormulaFlag.replace(\"rl\", \"\");\r\n            GSheetFormulaFlag = GSheetFormulaFlag + val;\r\n        } else {\r\n            if (val === \"rcm\") {\r\n                GSheetFormulaFlag = GSheetFormulaFlag.replace(\"rcm\", \"\");\r\n                GSheetFormulaFlag = GSheetFormulaFlag.replace(\"rl\", \"\");\r\n                GSheetFormulaFlag = GSheetFormulaFlag + val;\r\n\r\n            } else {\r\n\r\n            }\r\n        }\r\n\r\n\r\n\r\n        this.setState({ GSheetFormulaFlag2: GSheetFormulaFlag })\r\n\r\n        console.log(\"new value is now \" + this.state.GSheetFormulaFlag2)\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    launchFunction() { //main function at play\r\n        let input = this.state.input;\r\n        console.log(\"running with \", input)\r\n        let GSheetFormulaFlag = this.state.GSheetFormulaFlag;\r\n        let GSheetapplyFormula = this.state.GSheetapplyFormula;\r\n        let GSheetCellValue = this.state.GSheetCellValue;\r\n        let removeDuplicatesFlag, splitAtNewLinesFlag, CommaSepListFlag, returnType;\r\n        let output, outputWithFormula;\r\n\r\n        if (GSheetFormulaFlag.indexOf(\"rd\") === -1) { removeDuplicatesFlag = false } else { removeDuplicatesFlag = true }\r\n        if (GSheetFormulaFlag.indexOf(\"nl\") === -1) { splitAtNewLinesFlag = false } else { splitAtNewLinesFlag = true }\r\n        if (GSheetFormulaFlag.indexOf(\"cs\") === -1) { CommaSepListFlag = false } else { CommaSepListFlag = true }\r\n        if (GSheetFormulaFlag.indexOf(\"rcm\") === -1) { returnType = false } else { returnType = true }\r\n\r\n        // if(splitAtNewLinesFlag){ input = input.split(\"\\n\")}else{input = input.split(\"\\\\s\")}\r\n        if (CommaSepListFlag) {\r\n            input = input.split(\",\")\r\n            console.log(\"split 1\")\r\n        } else {\r\n            if (splitAtNewLinesFlag) {\r\n                input = input.split(\"\\n\")\r\n                console.log(\"split 2\")\r\n\r\n            } else {\r\n                let rege = new RegExp(\"[\\\\s\\\\n]\", \"gmi\")\r\n                input = input.split(rege)\r\n            }\r\n            console.log(\"split 3\")\r\n\r\n        }\r\n        if (removeDuplicatesFlag) { output = Array.from(new Set(input)) } else { output = input }\r\n\r\n        output.forEach(element => { element = element.trim() });\r\n        output = output.filter(n => n)\r\n\r\n        console.log(\"updated to \", input)\r\n\r\n        let LetterRegex = new RegExp(\"[A-Za-z\\\\s]{1,99}\", \"gmi\");\r\n\r\n        outputWithFormula = output.map((element) => {\r\n            if (element.match(LetterRegex)) {\r\n                element = '\"' + element + '\"';\r\n                return element\r\n            } else {\r\n                return element\r\n            }\r\n        }\r\n        )\r\n        console.log(\"updated to \", output)\r\n\r\n\r\n        // if (GSheetapplyFormula === \"reverse\") {\r\n        let outputWithFormulaReverse = \"=isna(match(\" + GSheetCellValue + \",{\" + outputWithFormula + \"},0))\";\r\n        // } else {\r\n        outputWithFormula = \"=match(\" + GSheetCellValue + \",{\" + outputWithFormula + \"},0)\";\r\n        // }\r\n\r\n        // if (returnType) {\r\n        let outputList = output.join(\",\")\r\n        // } else {\r\n        let outputCsv = output.join(\"\\n\")\r\n        // }\r\n\r\n        this.setState({\r\n            output: outputList,\r\n            outputCsv: outputCsv,\r\n            outputWithFormula: outputWithFormula,\r\n            outputWithFormulaReverse: outputWithFormulaReverse\r\n        });\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Container >\r\n                <Row>\r\n\r\n\r\n                    <Col lg=\"9\" xl=\"9\" md=\"9\" sm=\"12\">\r\n                        <Jumbotron className=\"mainPanel panel\">\r\n                            <Row>\r\n\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    <TextArea\r\n                                        name=\"Input\"\r\n                                        value={this.state.input}\r\n                                        rows=\"12\"\r\n                                        onChange={this.updateInputValue}\r\n                                        styler={{ fontSize: this.state.fontSize }}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    {this.state.GSheetapplyFormula === \"false\" && this.state.GSheetFormulaFlag2.indexOf(\"rcm\") === -1 &&\r\n                                        <TextArea\r\n                                            name=\"Output\"\r\n                                            value={this.state.output}\r\n                                            rows=\"12\"\r\n                                            styler={{ fontSize: this.state.fontSize }}\r\n                                            />}\r\n\r\n                                    {this.state.GSheetapplyFormula === \"false\" && this.state.GSheetFormulaFlag2.indexOf(\"rcm\") !== -1 &&\r\n                                        <TextArea\r\n                                            name=\"Output\"\r\n                                            value={this.state.outputCsv}\r\n                                            rows=\"12\"\r\n                                            styler={{ fontSize: this.state.fontSize }}\r\n                                            />}\r\n\r\n                                    {this.state.GSheetapplyFormula === \"normal\" &&\r\n                                        <TextArea\r\n                                            name=\"Output\"\r\n                                            value={this.state.outputWithFormula}\r\n                                            rows=\"12\"\r\n                                            styler={{ fontSize: this.state.fontSize }}\r\n                                            />}\r\n\r\n                                    {this.state.GSheetapplyFormula === \"reverse\" &&\r\n                                        <TextArea\r\n                                            name=\"Output\"\r\n                                            value={this.state.outputWithFormulaReverse}\r\n                                            rows=\"12\"\r\n                                            styler={{ fontSize: this.state.fontSize }}\r\n                                            />}\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <label>First cell under Header</label>\r\n                            <br />\r\n                            <ButtonGroup size=\"sm\" className=\"buttonGroup\">\r\n                            <input\r\n                                name=\"First Cell Under Header\"\r\n                                value={this.state.GSheetCellValue}\r\n                                onChange={this.updateGSheetCellValue}\r\n                            />\r\n                            <Button\r\n                                color=\"primary\"\r\n                                style={{ fontSize: 11, marginLeft: \"5px\" }}\r\n                                onClick={() => this.launchFunction()}\r\n                            >Run</Button>\r\n                            <Button\r\n                                color=\"danger\"\r\n                                style={{ fontSize: 11, marginLeft: \"5px\" }}\r\n                                onClick={() => this.resetAll()}\r\n                            >Reset</Button>\r\n                            </ButtonGroup>\r\n\r\n                            <ButtonGroup size=\"sm\" className=\"buttonGroup float-right\">\r\n                                <label style={{ paddingRight: \"10px\", textAlign: \"center\", marginTop: \"5px\" }}>Font Size: </label>\r\n                                <Button\r\n                                    bsSize=\"\"\r\n                                    name=\"fontSizeChange0\"\r\n                                    onClick={() => this.fontSizeChange(0)}\r\n                                    color=\"secondary\"\r\n                                >\r\n                                    -\r\n                                </Button>\r\n                                <Button\r\n                                    name=\"fontSizeChange1\"\r\n                                    color=\"secondary\"\r\n                                    onClick={() => this.fontSizeChange(1)}\r\n                                >\r\n                                    +</Button>\r\n                            </ButtonGroup>\r\n                            <br />\r\n                            <br />\r\n                            <Card1\r\n                                text={\r\n                                    <div>\r\n                                        <p style={{ fontSize: \"12px\" }}>This tool wraps inputs in the =Match Gsheet Formula. Using Gsheet's filters we can use this to only see rows with the desired values.</p>\r\n                                        <p style={{ fontSize: \"12px\" }}><span style={{ fontSize: \"12px\", fontWeight: \"Bold\" }}> Unless \"Split at xyz\" is selected </span>every space or new line is regarded as a new input</p>\r\n                                    </div>}\r\n                            />\r\n\r\n                        </Jumbotron>\r\n                    </Col>\r\n\r\n                    <Col lg=\"3\" xl=\"3\" md=\"3\" sm=\"12\">\r\n                        <Jumbotron className=\"sidePanel panel\" >\r\n                            <Col lg=\"12\" xl=\"12\" md=\"12\" sm=\"12\">\r\n                                <h5>Gsheet Formatter</h5>\r\n                            </Col>\r\n                            <br />\r\n                            <label style={{ fontSize: 14, borderBottom: \"solid black 1px\" }}>Dynamic Options:</label>\r\n                            <ButtonGroup size=\"sm\" className=\"buttonGroup\" >\r\n                                <Button\r\n                                    color={this.state.GSheetapplyFormula === \"normal\" ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateGSheetapplyFormula(\"normal\")}\r\n                                    style={{ fontSize: 10, border: \"2px black solid\", flexWrap: \"wrap\" }}\r\n                                >\r\n                                    Match Formula</Button>\r\n                                <Button\r\n                                    color={this.state.GSheetapplyFormula === \"reverse\" ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateGSheetapplyFormula(\"reverse\")}\r\n                                    style={{ fontSize: 10, border: \"2px black solid\", flexWrap: \"wrap\" }}\r\n                                >\r\n                                    Is not Match Formula</Button>\r\n                                <Button\r\n                                    color={this.state.GSheetapplyFormula === \"false\" ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateGSheetapplyFormula(\"false\")}\r\n                                    style={{ fontSize: 10, border: \"2px black solid\", flexWrap: \"wrap\" }}\r\n                                >\r\n                                    No Formula</Button>\r\n                            </ButtonGroup>\r\n\r\n\r\n                            <ButtonGroup size=\"sm\" className=\"buttonGroup\">\r\n                                <label style={{ fontSize: 14 }}>If No formula - return as:</label>\r\n                                <Button\r\n                                    color={this.state.GSheetFormulaFlag2.indexOf(\"rl\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue2(\"rl\")}\r\n                                    style={{ fontSize: 10, border: \"2px black solid\" }}\r\n                                >\r\n                                    CSV</Button>\r\n                                <Button\r\n                                    color={this.state.GSheetFormulaFlag2.indexOf(\"rcm\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue2(\"rcm\")}\r\n                                    style={{ fontSize: 10, border: \"2px black solid\" }}\r\n                                >\r\n                                    List</Button>\r\n                            </ButtonGroup>\r\n                            <br />\r\n                            <br />\r\n                            <label style={{ fontSize: 14, borderBottom: \"solid black 1px\" }}>Options that require re-run:</label>\r\n                            <ButtonGroup size=\"sm\" className=\"buttonGroup\">\r\n                                <Button\r\n                                    color={this.state.GSheetFormulaFlag.indexOf(\"rd\") !== -1 ? \"success\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"rd\")}\r\n                                    style={{ fontSize: 10, border: \"2px black solid\" }}\r\n                                >\r\n                                    Remove Duplicates</Button>\r\n                                <Button\r\n                                    color={this.state.GSheetFormulaFlag.indexOf(\"nl\") !== -1 ? \"success\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"nl\")}\r\n                                    style={{ fontSize: 10, border: \"2px black solid\" }}\r\n                                >\r\n                                    Split at New Lines</Button>\r\n                                <Button\r\n                                    color={this.state.GSheetFormulaFlag.indexOf(\"cs\") !== -1 ? \"success\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"cs\")}\r\n                                    style={{ fontSize: 10, border: \"2px black solid\" }}\r\n                                >\r\n                                    Split at Commas</Button>\r\n                            </ButtonGroup>\r\n\r\n                        </Jumbotron>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(GSheetFormatter)\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Navbar1 from './components/subComponents/Navbar1';\n\nimport './App.css';\nimport {\n  Route,\n  NavLink,\n  HashRouter,\n  Switch,\n  BrowserRouter\n} from \"react-router-dom\";\nimport HomePage from './components/HomePage';\nimport Lookup from './components/Lookup';\nimport LookupAdvanced from './components/LookupAdvanced';\nimport HCPC from './components/HCPC';\nimport Formatter from './components/Formatter';\nimport MasterPAFormatter from './components/MasterPAFormatter';\nimport GSheetFormatter from './components/GSheetFormatter';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <div>\n      <Navbar1 \n      Home={<NavLink to=\"/\" style={{color: \"black\",textDecoration: 'none'}}>Home</NavLink>}\n      lookupLink={<NavLink to=\"/Lookup\">Lookup</NavLink>}\n      lookupLinkAdvanced={<NavLink to=\"/LookupAdvanced\">Lookup Advanced</NavLink>}\n      HCPC={<NavLink to=\"/HCPC\">HCPC Range Expander</NavLink>}\n      Policies={<NavLink to=\"/Formatter\">Policies</NavLink>}\n      GSheet={<NavLink to=\"/GSheetFormatter\">GSheet</NavLink>}\n      MasterPA={<NavLink to=\"/MasterPAFormatter\">MasterPA</NavLink>}\n      />\n        <div className=\"content\">\n          <Route exact path=\"/\" render={(props) => <HomePage \n\n          lookupLink={<NavLink style={{color:\"white\"}} to=\"/Lookup\">Lookup</NavLink>}\n          \n          lookupLinkAdvanced={<NavLink  style={{color:\"white\"}} to=\"/LookupAdvanced\">Lookup Advanced</NavLink>}\n\n          HCPC={<NavLink style={{color:\"white\"}} to=\"/HCPC\">HCPC Range Expander</NavLink>}\n\n          Policies={<NavLink  style={{color:\"white\"}} to=\"/Formatter\">Policies</NavLink>}\n\n          GSheet={<NavLink  style={{color:\"white\"}} to=\"/GSheetFormatter\">GSheet</NavLink>}\n\n          MasterPA={<NavLink  style={{color:\"white\"}} to=\"/MasterPAFormatter\">MasterPA</NavLink>}\n          \n\n          \n\n          />} />\n          <Route exact path=\"/Lookup\" render={(props) => <Lookup />} />\n          <Route exact path=\"/LookupAdvanced\" render={(props) => <LookupAdvanced />} />\n          <Route exact path=\"/HCPC\" render={(props) => <HCPC />} />\n          <Route exact path=\"/Formatter\" render={(props) => <Formatter />} />\n          <Route exact path=\"/MasterPAFormatter\" render={(props) => <MasterPAFormatter />} />\n          <Route exact path=\"/GSheetFormatter\" render={(props) => <GSheetFormatter />} />\n        </div>\n      </div>\n\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}