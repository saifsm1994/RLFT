{"version":3,"sources":["reportWebVitals.js","components/subComponents/TextArea.js","components/subComponents/TextAreaQuery.js","components/subComponents/Card1.js","components/subComponents/TextAreaQuery2.js","components/Lookup.js","components/subComponents/Navbar1.js","components/HomePage.js","components/HCPC.js","components/Formatter.js","components/MasterPAFormatter.js","components/GSheetFormatter.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","TextArea","FormGroup","Label","for","this","props","name","Input","type","id","rows","value","onChange","style","styler","Component","TextAreaQuery","Form","Row","Col","lg","xl","md","sm","bsSize","Button","buttonName","onClick","buttonOnClick","color","buttonText","Card1","Card","body","heading","CardTitle","tag","text","CardText","linkName","link","TextAreaQuery2","ButtonGroup","size","className","buttonName2","buttonOnClick2","buttonText2","buttonName3","buttonOnClick3","borderLeft","buttonText3","HCPCandFilter","updateInputValue","bind","updateSearchValue","setName","updatesearchStringFlagsValue","updateRegexFlagsValue","setSearchValue","updateSearchType","saveStateToCookie","saveSearchesToSearchesCookie","loadSearchFromSavedSearches","pullStateFromCookie","hcpcManager","resetAll","state","input","output","noCountOutput","csvOutput","csvDedupeOutput","searchType","searchValue","searchStringFlags","searchRegexFlags","Searches","localStorage","removeItem","setState","num","setTimeout","cookieData","setItem","JSON","stringify","val","undefined","alert","getItem","parse","fetchedCookie","Object","keys","forEach","element","fetchedCookie2","fetchedSearch","e","preventDefault","target","console","log","indexOf","replace","NumRegex","RegExp","LetterRegex","HCPCRegexRange","match","letters","numbers","store","length","i","push","join","caseSensitive","search","split","Array","from","Set","matcher2","matcher","test","exec","parseInt","index","isArray","sort","b","uniqueOutput","counts","countOutput","pos","map","toLowerCase","Container","Jumbotron","border","marginLeft","withRouter","Navbar1","useState","isOpen","setIsOpen","Navbar","light","expand","NavbarBrand","Home","NavbarToggler","Collapse","navbar","Nav","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","lookupLink","HCPC","Policies","MasterPA","GSheet","reset","NavbarText","HomePage","Formatter","launchFormatter","rulesManager","bulletRanker","toggleexperimental","fontSizeChange","saveFontCookie","loadFontCookie","experimentalOutput","experimental","fontSize","font","Number","isInteger","inputer","allBullets","ranking","element2","bulletRegexPosition","currentIndex","bulletRegex","spacer","lineBetweenNoCaps","extraSpaces","extraSpaces2","bullets","failedBullets","extraLine","result","result2","charAt","substring","trim","placeholder","paddingRight","textAlign","marginTop","MasterPAFormatter","headerManager","toggleDoubleLine","noDoubleLineOutput","doubleLine","headingsRegex","CapsHeadings","newLine","GSheetFormatter","updateGSheetCellValue","updateGSheetapplyFormula","launchFunction","outputCsv","outputWithFormula","outputWithFormulaReverse","GSheetCellValue","GSheetFormulaFlag","GSheetapplyFormula","removeDuplicatesFlag","splitAtNewLinesFlag","CommaSepListFlag","rege","filter","n","outputList","fontWeight","borderBottom","flexWrap","ReactDOM","render","StrictMode","to","textDecoration","exact","path","Lookup","document","getElementById"],"mappings":"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","file":"static/js/main.ac820890.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Component } from 'react';\r\nimport { FormGroup, Label, Input } from 'reactstrap';\r\n\r\n\r\nclass TextArea extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <FormGroup>\r\n                    <Label for={this.props.name}>{this.props.name}</Label>\r\n                    <Input \r\n                    type=\"textarea\" \r\n                    name={this.props.name}\r\n                    id={this.props.name} \r\n                    rows={this.props.rows} \r\n                    value={this.props.value} \r\n                    onChange={this.props.onChange}\r\n                    style={this.props.styler}\r\n                    />\r\n                </FormGroup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TextArea;","import React, { Component } from 'react';\r\nimport { Button, Col, Row, FormGroup, Form, Label, Input } from 'reactstrap';\r\n\r\n\r\nclass TextAreaQuery extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form  >\r\n                    <FormGroup >\r\n                        <Label for={this.props.name}>{this.props.name}</Label>\r\n                        <Row>\r\n                            <Col lg=\"10\" xl=\"10\" md=\"10\" sm=\"10\">\r\n                                <Input\r\n                                    bsSize=\"sm\"\r\n                                    type=\"textarea\"\r\n                                    name={this.props.name}\r\n                                    id={this.props.name}\r\n                                    rows={this.props.rows}\r\n                                    value={this.props.value}\r\n                                    onChange={this.props.onChange}\r\n                                />\r\n                            </Col>\r\n                            <Col lg=\"1\" xl=\"1\" md=\"1\" sm=\"1\">\r\n                                <Button\r\n                                    bsSize=\"sm\"\r\n                                    name={this.props.buttonName}\r\n                                    onClick={this.props.buttonOnClick}\r\n                                    color=\"success\"\r\n                                >\r\n                                    {this.props.buttonText}\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                    </FormGroup>\r\n\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TextAreaQuery;","import React from 'react';\r\nimport { Card, Button, CardTitle, CardText } from 'reactstrap';\r\n\r\nconst Card1 = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <Card body>\r\n    { props.heading &&  <CardTitle tag=\"h5\">{props.heading}</CardTitle> }\r\n    { props.text && <CardText>{props.text}</CardText>}\r\n    { props.linkName && <Button >Go to {props.link}</Button>}\r\n            </Card>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card1;","import React, { Component } from 'react';\r\nimport { Button, Col, Row, FormGroup, Form, Label, Input, ButtonGroup } from 'reactstrap';\r\n\r\n\r\nclass TextAreaQuery2 extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form  >\r\n                    <FormGroup >\r\n                        <Label for={this.props.name}>{this.props.name}</Label>\r\n                        <Row>\r\n                            <Col lg=\"12\" xl=\"12\" md=\"12\" sm=\"12\">\r\n                                <Input\r\n                                    bsSize=\"sm\"\r\n                                    type=\"textarea\"\r\n                                    name={this.props.name}\r\n                                    id={this.props.name}\r\n                                    rows={this.props.rows}\r\n                                    value={this.props.value}\r\n                                    onChange={this.props.onChange}\r\n                                />\r\n                            </Col>\r\n                            <Col lg=\"12\" xl=\"12\" md=\"12\" sm=\"12\">\r\n\r\n                                <ButtonGroup size=\"sm\" className=\"buttonGroup\">\r\n                                <Button\r\n                                    name={this.props.buttonName}\r\n                                    onClick={this.props.buttonOnClick}\r\n                                    color=\"success\"\r\n                                >\r\n                                    {this.props.buttonText}\r\n                                </Button>\r\n                                <Button\r\n                                    name={this.props.buttonName2}\r\n                                    onClick={this.props.buttonOnClick2}\r\n                                    color=\"secondary\"\r\n                                >\r\n                                    {this.props.buttonText2}\r\n                                </Button>\r\n                                <Button\r\n                                    name={this.props.buttonName3}\r\n                                    onClick={this.props.buttonOnClick3}\r\n                                    color=\"danger\"\r\n                                    style={{borderLeft:\"white 1px solid\"}}\r\n                                >\r\n                                    {this.props.buttonText3}\r\n                                </Button>\r\n                            </ButtonGroup>\r\n\r\n                            </Col>\r\n                        </Row>\r\n\r\n                    </FormGroup>\r\n\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TextAreaQuery2;","import React, { Component } from 'react';\r\nimport { Jumbotron, Button, Row, Container, Col, ButtonGroup } from 'reactstrap';\r\nimport { withRouter } from \"react-router\";\r\nimport './Universal.css';\r\nimport TextArea from './subComponents/TextArea';\r\nimport TextAreaQuery from './subComponents/TextAreaQuery';\r\nimport Card1 from './subComponents/Card1';\r\nimport TextAreaQuery2 from './subComponents/TextAreaQuery2';\r\n\r\n\r\nclass HCPCandFilter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateInputValue = this.updateInputValue.bind(this);\r\n        this.updateSearchValue = this.updateSearchValue.bind(this);\r\n        this.setName = this.setName.bind(this);\r\n        this.updatesearchStringFlagsValue = this.updatesearchStringFlagsValue.bind(this);\r\n        this.updateRegexFlagsValue = this.updateRegexFlagsValue.bind(this);\r\n        this.setSearchValue = this.setSearchValue.bind(this);\r\n        this.updateSearchType = this.updateSearchType.bind(this);\r\n        this.saveStateToCookie = this.saveStateToCookie.bind(this);\r\n        this.saveSearchesToSearchesCookie = this.saveSearchesToSearchesCookie.bind(this);\r\n        this.loadSearchFromSavedSearches = this.loadSearchFromSavedSearches.bind(this);\r\n        this.pullStateFromCookie = this.pullStateFromCookie.bind(this);\r\n        this.hcpcManager = this.hcpcManager.bind(this);\r\n        this.resetAll = this.resetAll.bind(this);\r\n\r\n\r\n        this.state = {\r\n            input: \"Input Placeholder\",\r\n            output: \"Output Placeholder\",\r\n            noCountOutput: \"Output Placeholder\",\r\n            csvOutput: \"Output Placeholder\",\r\n            csvDedupeOutput: \"Output Placeholder\",\r\n            searchType: \"string\",\r\n            searchValue: \"Placeholder\",\r\n            searchStringFlags: \"c\",\r\n            searchRegexFlags: \"gmi\",\r\n            Searches: {}\r\n        };\r\n\r\n    }\r\n\r\n    resetAll() {\r\n        localStorage.removeItem(\"cookie2\")\r\n\r\n\r\n        this.setState({\r\n            input: \"Input Placeholder\",\r\n            output: \"Output Placeholder\",\r\n            noCountOutput: \"Output Placeholder\",\r\n            csvOutput: \"Output Placeholder\",\r\n            csvDedupeOutput: \"Output Placeholder\",\r\n            searchType: \"string\",\r\n            searchValue: \"Placeholder\",\r\n            searchStringFlags: \"c\",\r\n            searchRegexFlags: \"gmi\",\r\n            name: \"\"\r\n        }, this.saveStateToCookie(100));\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.pullStateFromCookie()\r\n    }\r\n\r\n\r\n    saveStateToCookie(num) {\r\n        if (num) { } else { num = 0 }\r\n        setTimeout(() => {\r\n            let cookieData = {};\r\n            // let name = this.state.name ? this.state.name : \"\"; ;\r\n            // let input= this.state.input ? this.state.input : \"Input Placeholder\";\r\n            // let output= this.state.output ? this.state.output :\"Output Placeholder\";\r\n            // let noCountOutput= this.state.noCountOutput ? this.state.noCountOutput :\"Output Placeholder\";\r\n            // csvOutput:  \"Output Placeholder\",\r\n            // csvDedupeOutput:  \"Output Placeholder\",\r\n            let searchType = this.state.searchType ? this.state.searchType : \"string\";\r\n            let searchValue = this.state.searchValue ? this.state.searchValue : \"([A-CE-Z][0-9]{4})\";\r\n            let searchStringFlags = this.state.searchStringFlags ? this.state.searchStringFlags : \"ci\";\r\n            let searchRegexFlags = this.state.searchRegexFlags ? this.state.searchRegexFlags : \"gmi\";\r\n\r\n            cookieData.searchType = searchType;\r\n            cookieData.searchValue = searchValue;\r\n            cookieData.searchStringFlags = searchStringFlags;\r\n            cookieData.searchRegexFlags = searchRegexFlags;\r\n\r\n\r\n            localStorage.setItem('cookie2', JSON.stringify(cookieData));\r\n        }, num);\r\n\r\n    }\r\n\r\n    saveSearchesToSearchesCookie(val) {\r\n        //get the current proposed name\r\n        //save the current state to that name\r\n        //remove the searches subObject to prevent duplicates\r\n        //The final cookie will be a object like {name: state, name2: state2, Searches: null}\r\n\r\n        let cookieData = {};\r\n        let name = this.state.name;\r\n        // let input= this.state.input ? this.state.input : \"Input Placeholder\";\r\n        // let output= this.state.output ? this.state.output :\"Output Placeholder\";\r\n        // let noCountOutput= this.state.noCountOutput ? this.state.noCountOutput :\"Output Placeholder\";\r\n        // csvOutput:  \"Output Placeholder\",\r\n        // csvDedupeOutput:  \"Output Placeholder\",\r\n        let searchType = this.state.searchType ? this.state.searchType : \"string\";\r\n        let searchValue = this.state.searchValue ? this.state.searchValue : \"([A-CE-Z][0-9]{4})\";\r\n        let searchStringFlags = this.state.searchStringFlags ? this.state.searchStringFlags : \"ci\";\r\n        let searchRegexFlags = this.state.searchRegexFlags ? this.state.searchRegexFlags : \"gmi\";\r\n\r\n        if (name === null || name === undefined) { return } else {\r\n            alert(\"Current search saved as \" + name)\r\n        }\r\n\r\n        if (localStorage.getItem('Searches2')) {\r\n            cookieData = JSON.parse(localStorage.getItem('Searches2'));\r\n        }\r\n\r\n        cookieData[name] = {};\r\n        cookieData[name].searchType = searchType;\r\n        cookieData[name].searchValue = searchValue;\r\n        cookieData[name].searchStringFlags = searchStringFlags;\r\n        cookieData[name].searchRegexFlags = searchRegexFlags;\r\n        cookieData[name] = this.state;\r\n\r\n\r\n        localStorage.setItem('Searches2', JSON.stringify(cookieData));\r\n        this.setState({ Searches: cookieData });\r\n\r\n        if (val) {\r\n            if (cookieData[this.state.name]) {\r\n                delete cookieData[this.state.name];\r\n                localStorage.setItem('Searches2', JSON.stringify(cookieData));\r\n                this.setState({ Searches: cookieData })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    pullStateFromCookie() {\r\n        if (localStorage.getItem('cookie2')) {\r\n            let fetchedCookie = JSON.parse(localStorage.getItem('cookie2'));\r\n            Object.keys(fetchedCookie).forEach(element => {\r\n                if (element === \"name\") { } else {\r\n                    this.setState({\r\n                        [element]: fetchedCookie[element]\r\n                    })\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n        if (localStorage.getItem('Searches2')) {\r\n            let fetchedCookie2 = JSON.parse(localStorage.getItem('Searches2'));\r\n            this.setState({\r\n                Searches: fetchedCookie2\r\n            })\r\n        }\r\n    }\r\n\r\n    loadSearchFromSavedSearches(val) {\r\n        if (this.state.Searches && this.state.Searches[val]) {\r\n            let fetchedSearch = this.state.Searches[val];\r\n            Object.keys(fetchedSearch).forEach(element => {\r\n                if (element !== \"Searches\" && element !== \"input\" && element !== \"output\" && element !== \"noCountOutput\" && element !== \"csvOutput\" && element !== \"csvDedupeOutput\") {\r\n                    this.setState({\r\n                        [element]: fetchedSearch[element]\r\n                    })\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    updateInputValue(e) {\r\n        e.preventDefault();\r\n        this.setState({ input: e.target.value });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    updateSearchValue(e) {\r\n        e.preventDefault();\r\n        this.setState({ searchValue: e.target.value });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    setName(e) {\r\n        e.preventDefault();\r\n        this.setState({ name: e.target.value });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    updatesearchStringFlagsValue(val) {\r\n        // console.log(\"calling searchStringFlags with \" + val)\r\n        // let searchStringFlags = this.state.searchStringFlags;\r\n\r\n        this.setState({ searchStringFlags: val });\r\n\r\n\r\n        // if (searchStringFlags.indexOf(val) !== -1) {\r\n        //     this.setState({ searchStringFlags: searchStringFlags.replace(val, \"\") });\r\n        // } else {\r\n        //     this.setState({ searchStringFlags: searchStringFlags + val });\r\n        // }\r\n\r\n        console.log(\"new value is now \" + this.state.searchStringFlags)\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    updateRegexFlagsValue(val) {\r\n        // console.log(\"calling updateRegexFlagsValue with \" + val)\r\n        let searchRegexFlags = this.state.searchRegexFlags;\r\n\r\n        if (searchRegexFlags.indexOf(val) !== -1) {\r\n            this.setState({ searchRegexFlags: searchRegexFlags.replace(val, \"\") });\r\n        } else {\r\n            this.setState({ searchRegexFlags: searchRegexFlags + val });\r\n        }\r\n\r\n        console.log(\"new value is now \" + this.state.searchRegexFlags)\r\n        this.saveStateToCookie()\r\n\r\n    }\r\n\r\n    updateSearchType(val) {\r\n\r\n        this.setState({ searchType: val });\r\n\r\n        console.log(\"new value is now \" + this.state.searchType)\r\n        this.saveStateToCookie()\r\n\r\n    }\r\n\r\n\r\n    hcpcManager(input) { // expands all hcpc ranges in document\r\n        let NumRegex = new RegExp(\"\\\\d{4}\", \"gmi\");\r\n        let LetterRegex = new RegExp(\"[A-CE-Z]\", \"gmi\");\r\n        let HCPCRegexRange = new RegExp(\"([A-CE-Z][0-9]{4}[\\\\t]{0,3}[-—]{0,2}(through){0,1}(to){0,1}[\\\\t]{0,3}[A-CE-Z][0-9]{4})\", \"gmi\");\r\n        console.log(\"range matches include\", input.match(HCPCRegexRange))\r\n\r\n        let result = input.replace(HCPCRegexRange, function (element) {\r\n\r\n            let letters = element.match(LetterRegex);\r\n            let numbers = element.match(NumRegex);\r\n            let store = [];\r\n\r\n            if (letters.length !== 2 | numbers.length !== 2 | numbers[0] > numbers[1]) { alert(\"failed match\") } else {\r\n                let i = numbers[0]\r\n                for (i; i <= numbers[1]; i++) {\r\n                    store.push(letters[0] + i)\r\n                }\r\n            }\r\n\r\n            store = store.join(\",\")\r\n            return store\r\n        });\r\n\r\n        return result\r\n\r\n\r\n\r\n    }\r\n\r\n    setSearchValue() {\r\n        let input = this.state.input;\r\n        let searchRegexFlags = this.state.searchRegexFlags;\r\n        let search = this.state.searchValue;\r\n        let searchType = this.state.searchType;\r\n        let caseSensitive;\r\n\r\n\r\n        input = this.hcpcManager(input);\r\n\r\n        if (searchRegexFlags.indexOf(\"i\") === -1) { // if case sensitive true  - no i flag\r\n            caseSensitive = true\r\n        } else {\r\n            caseSensitive = false\r\n        }\r\n\r\n        //if the regex option is chosen search as is - assign to array for the forEach loop below\r\n        //if the list option is chosen split into an array and regex search each element\r\n        if (searchType === \"string\") {\r\n            search = search.split(\",\");\r\n            search = Array.from(new Set(search));\r\n        } else {\r\n            search = [search]\r\n        }\r\n        let output = [];\r\n        let matcher2 = [];\r\n\r\n        search.forEach(element => {\r\n            // update this to keep a track of the specific order of matches\r\n            let match;\r\n            let matcher = []; // input.match(new RegExp(element, searchRegexFlags))\r\n            let test = new RegExp(element, searchRegexFlags);\r\n            while ((match = test.exec(input)) != null) {\r\n                matcher.push([match[0], parseInt(match.index)])\r\n\r\n            }\r\n\r\n            //if no matches\r\n            if (matcher === null) {\r\n                this.setState({ output: \"No Matches\" });\r\n                this.saveStateToCookie()\r\n                return\r\n            }\r\n            matcher2 = [...matcher2, ...matcher]\r\n        }\r\n        )\r\n\r\n        console.log(\"matcher2\", matcher2)\r\n\r\n        if (matcher2.length >= 1 && Array.isArray(matcher2)) {\r\n            // matcher = matcher.split(\",\") \r\n            matcher2 = matcher2.sort(([a, b], [c, d]) => b - d);\r\n            matcher2.forEach(element => {\r\n                console.log(\"matcher32\", element)\r\n                output = [...output, element[0]]\r\n            });\r\n\r\n        }\r\n\r\n\r\n\r\n        let noCountOutput = output.join(\"\\n\");\r\n        let csvOutput = output.join(\",\");\r\n\r\n        let uniqueOutput = [];\r\n        let counts = [];\r\n        let countOutput = [];\r\n        let csvDedupeOutput = [];\r\n\r\n        output.forEach(element => {\r\n            if (!caseSensitive) {\r\n                console.log(\"element,\", element)\r\n                let lowerCaseUniqueOutput = uniqueOutput.map(element => element.toLowerCase())\r\n                let pos = lowerCaseUniqueOutput.indexOf(element.toLowerCase());\r\n                if (pos === -1) {\r\n                    uniqueOutput.push(element)\r\n                    counts.push(1)\r\n                } else {\r\n                    counts[pos] = counts[pos] + 1;\r\n                }\r\n\r\n            } else {\r\n                let pos = uniqueOutput.indexOf(element);\r\n                if (pos === -1) {\r\n                    uniqueOutput.push(element)\r\n                    counts.push(1)\r\n                } else {\r\n                    counts[pos] = counts[pos] + 1;\r\n                }\r\n            }\r\n        });\r\n\r\n        uniqueOutput.forEach((element, index) => {\r\n            countOutput.push(element + \" - \" + counts[index] + \" times\");\r\n            csvDedupeOutput.push(element);\r\n        });\r\n\r\n\r\n\r\n        this.setState({\r\n            output: countOutput.join(\"\\n\"),\r\n            noCountOutput: noCountOutput,\r\n            csvOutput: csvOutput,\r\n            csvDedupeOutput: csvDedupeOutput.join(\",\")\r\n        });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Container >\r\n                <Row>\r\n\r\n                    <Col lg=\"9\" xl=\"9\" md=\"9\" sm=\"12\">\r\n                        <Jumbotron className=\"mainPanel panel\">\r\n                            <Row>\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    <TextArea\r\n                                        name=\"Input\"\r\n                                        value={this.state.input}\r\n                                        rows=\"12\"\r\n                                        onChange={this.updateInputValue}\r\n\r\n                                    />\r\n                                </Col>\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    {this.state.searchStringFlags.indexOf(\"c\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.noCountOutput}\r\n                                        rows=\"12\"\r\n                                    />}\r\n\r\n                                    {this.state.searchStringFlags.indexOf(\"a\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.output}\r\n                                        rows=\"12\"\r\n                                    />}\r\n\r\n                                    {this.state.searchStringFlags.indexOf(\"s\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.csvDedupeOutput}\r\n                                        rows=\"12\"\r\n                                    />}\r\n\r\n                                    {this.state.searchStringFlags.indexOf(\"h\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.csvOutput}\r\n                                        rows=\"12\"\r\n                                    />}\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <TextAreaQuery\r\n                                name=\"Search String\"\r\n                                value={this.state.searchValue}\r\n                                rows=\"6\"\r\n                                onChange={this.updateSearchValue}\r\n                                buttonOnClick={this.setSearchValue}\r\n                                buttonText=\"Search\"\r\n                            />\r\n\r\n                            <Card1\r\n                                text={<div><p>This tool checks for matches using regex or comma seperated lists of values. Use https://regexr.com/ to build the regex or note that\r\n                                    </p><ul>\r\n                                        <li>\\s means a space</li>\r\n                                        <li>\\n is a new line</li>\r\n                                        <li>\\d is any number</li>\r\n                                        <li>| is an or symbol</li>\r\n                                        <li>Don't include the flags portion of regexes as these are handled by buttons on the right</li>\r\n\r\n                                    </ul></div>}\r\n\r\n\r\n                            />\r\n\r\n\r\n                        </Jumbotron>\r\n                    </Col>\r\n                    <Col lg=\"3\" xl=\"3\" md=\"3\" sm=\"12\">\r\n                        <Jumbotron className=\"sidePanel panel\">\r\n                            <Col lg=\"12\" xl=\"12\" md=\"12\" sm=\"12\">\r\n                                <h5>Lookup</h5>\r\n                            </Col>\r\n                            <ButtonGroup size=\"sm\" className=\"buttonGroup\">\r\n                                <Button\r\n                                    color={this.state.searchRegexFlags.indexOf(\"i\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"i\")}\r\n                                >\r\n                                    Case Insensitive</Button>\r\n                                <Button\r\n                                    color={this.state.searchRegexFlags.indexOf(\"g\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"g\")}\r\n                                >\r\n                                    Global</Button>\r\n                                <Button\r\n                                    color={this.state.searchRegexFlags.indexOf(\"m\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"m\")}\r\n                                >\r\n                                    Multiline</Button>\r\n                            </ButtonGroup>\r\n\r\n\r\n                            <ButtonGroup size=\"sm\" className=\"buttonGroup\">\r\n                                <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"c\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"c\")}\r\n                                >\r\n                                    Show All</Button>\r\n                                <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"a\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"a\")}\r\n                                >\r\n                                    Count</Button>\r\n                                <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"s\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"s\")}\r\n                                >\r\n                                    CSV Trimmed</Button>\r\n                                <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"h\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"h\")}\r\n                                >\r\n                                    CSV</Button>\r\n\r\n                            </ButtonGroup>\r\n\r\n\r\n                            <ButtonGroup size=\"\" className=\"buttonGroup\">\r\n                                <label>Search Type</label>\r\n                                <Button\r\n                                    color={this.state.searchType.indexOf(\"regex\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateSearchType(\"regex\")}\r\n                                >\r\n                                    Regex</Button>\r\n                                <Button\r\n                                    color={this.state.searchType.indexOf(\"string\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateSearchType(\"string\")}\r\n                                >\r\n                                    List</Button>\r\n\r\n                            </ButtonGroup>\r\n\r\n                            <TextAreaQuery2\r\n                                name=\"Save Search\"\r\n                                value={this.state.name}\r\n                                rows=\"1\"\r\n                                onChange={this.setName}\r\n                                buttonOnClick={() => this.saveSearchesToSearchesCookie()}\r\n                                buttonOnClick2={() => this.saveSearchesToSearchesCookie(this.state.name)}\r\n                                buttonOnClick3={() => this.resetAll()}\r\n                                buttonText={\"Save\"}\r\n                                buttonText2={\"Delete\"}\r\n                                buttonText3={\"Reset Page\"}\r\n\r\n                            />\r\n\r\n                            {this.state.Searches && Object.keys(this.state.Searches).map((element) => {\r\n                                return element !== \"Searches\" ?\r\n                                    <Button\r\n                                        onClick={() => this.loadSearchFromSavedSearches(element)}\r\n                                        color=\"primary\"\r\n                                        style={{ border: \"solid white 1px\", marginLeft: \"1px\" }}\r\n                                    >{element}</Button> : \"\"\r\n                            })\r\n                            }\r\n\r\n\r\n\r\n                        </Jumbotron>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(HCPCandFilter)\r\n\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  NavbarText,\r\n  Button\r\n} from 'reactstrap';\r\nimport '../Universal.css'\r\nimport {\r\n  Route,\r\n  NavLink,\r\n  HashRouter,\r\n  Switch,\r\n  BrowserRouter\r\n} from \"react-router-dom\";\r\n\r\nimport Lookup from '../Lookup'\r\n\r\nconst Navbar1 = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color=\"light\" light expand=\"md\">\r\n        <NavbarBrand >\r\n        {props.Home ? props.Home : \"Home\"}\r\n        </NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"mr-auto\" navbar>\r\n\r\n            <UncontrolledDropdown nav inNavbar>\r\n              <DropdownToggle nav caret>\r\n                Lookup Tools\r\n              </DropdownToggle>\r\n              <DropdownMenu right>\r\n                <DropdownItem\r\n                style={{border: \"black 1px solid\"}}>\r\n                {props.lookupLink && props.lookupLink}\r\n                </DropdownItem>\r\n                <DropdownItem >\r\n                {props.HCPC && props.HCPC}\r\n                </DropdownItem>\r\n\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n\r\n            <UncontrolledDropdown nav inNavbar>\r\n              <DropdownToggle nav caret>\r\n                Formatters\r\n              </DropdownToggle>\r\n              <DropdownMenu right>\r\n                <DropdownItem>\r\n                {props.Policies && props.Policies}\r\n                </DropdownItem>\r\n                <DropdownItem >\r\n                {props.MasterPA && props.MasterPA}\r\n                </DropdownItem>\r\n                <DropdownItem>\r\n                  {props.GSheet && props.GSheet}\r\n                  </DropdownItem>\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n\r\n          </Nav>\r\n          {props.reset && <Button color=\"danger\" size=\"sm\" onClick={() => props.reset()} className=\"resetButton\">Reset</Button>}\r\n          <NavbarText>By Saif</NavbarText>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar1;","import React, { Component } from 'react';\r\nimport { Jumbotron, Row, Container, Col } from 'reactstrap';\r\nimport { withRouter } from \"react-router\";\r\nimport './Universal.css';\r\nimport Navbar1 from './subComponents/Navbar1';\r\nimport Card1 from './subComponents/Card1';\r\n\r\nclass HomePage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container >\r\n                <Row>\r\n\r\n                    {/* <Col lg=\"9\" xl=\"9\" md=\"9\" sm=\"9\"> */}\r\n                        <Jumbotron className=\"mainPanel panel\">\r\n                        <Row>\r\n                            <Col  lg=\"4\" xl=\"4\" md=\"4\" sm=\"12\">\r\n\r\n                                <Card1\r\n                                    heading=\"Go to Lookup Tool\"\r\n                                    text=\"This tool allows you to search for any term in a given list or Regex\"\r\n                                    linkName=\"Lookup Tool\"\r\n                                    link={this.props.lookupLink}\r\n                                />\r\n                            </Col>\r\n\r\n                            <Col  lg=\"4\" xl=\"4\" md=\"4\" sm=\"12\">\r\n\r\n                                <Card1\r\n                                    heading=\"Go to HCPC Tool\"\r\n                                    text=\"Same as the Lookup Tool, but also expands HCPC Ranges\"\r\n                                    linkName=\"HCPC + Lookup Tool\"\r\n                                    link={this.props.HCPC}\r\n                                />\r\n                            </Col>\r\n\r\n                            <Col  lg=\"4\" xl=\"4\" md=\"4\" sm=\"12\">\r\n\r\n                                <Card1\r\n                                    heading=\"Go to Gsheet Tool\"\r\n                                    text=\"This tool applies the match formula for Gsheets. It also can be used to convert columsn to csv\"\r\n                                    linkName=\"Gsheet Tool\"\r\n                                    link={this.props.GSheet}\r\n                                />\r\n                            </Col>\r\n\r\n                            <Col  lg=\"4\" xl=\"4\" md=\"4\" sm=\"12\">\r\n\r\n                                <Card1\r\n                                    heading=\"Go to Master PA Formatter\"\r\n                                    text=\"This tool takes Master PA text and adds new lines before headings / removes extra line breaks\"\r\n                                    linkName=\"Master PA Formatter\"\r\n                                    link={this.props.MasterPA}\r\n                                />\r\n                            </Col>\r\n\r\n                            <Col  lg=\"4\" xl=\"4\" md=\"4\" sm=\"12\">\r\n\r\n                                <Card1\r\n                                    heading=\"Go to Policy Formatter\"\r\n                                    text=\"Experimental Tool which removes extra line breaks from Policy Coverage Criteria, can also add indents\"\r\n                                    linkName=\"Policy Formatter\"\r\n                                    link={this.props.Policies}\r\n                                />\r\n                            </Col>\r\n                            </Row>\r\n                        </Jumbotron>\r\n                    {/* </Col> */}\r\n                    {/* <Col lg=\"3\" xl=\"3\" md=\"3\" sm=\"3\">\r\n                        <Jumbotron className=\"sidePanel panel\">\r\n                        </Jumbotron>\r\n                    </Col> */}\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(HomePage)\r\n","import React, { Component } from 'react';\r\nimport { Jumbotron, Button, Row, Container, Col, ButtonGroup } from 'reactstrap';\r\nimport { withRouter } from \"react-router\";\r\nimport './Universal.css';\r\nimport TextArea from './subComponents/TextArea';\r\nimport TextAreaQuery from './subComponents/TextAreaQuery';\r\nimport Card1 from './subComponents/Card1';\r\nimport TextAreaQuery2 from './subComponents/TextAreaQuery2';\r\n\r\n\r\nclass HCPCandFilter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateInputValue = this.updateInputValue.bind(this);\r\n        this.updateSearchValue = this.updateSearchValue.bind(this);\r\n        this.setName = this.setName.bind(this);\r\n        this.updatesearchStringFlagsValue = this.updatesearchStringFlagsValue.bind(this);\r\n        this.updateRegexFlagsValue = this.updateRegexFlagsValue.bind(this);\r\n        this.setSearchValue = this.setSearchValue.bind(this);\r\n        this.updateSearchType = this.updateSearchType.bind(this);\r\n        this.saveStateToCookie = this.saveStateToCookie.bind(this);\r\n        this.saveSearchesToSearchesCookie = this.saveSearchesToSearchesCookie.bind(this);\r\n        this.loadSearchFromSavedSearches = this.loadSearchFromSavedSearches.bind(this);\r\n        this.pullStateFromCookie = this.pullStateFromCookie.bind(this);\r\n        this.hcpcManager = this.hcpcManager.bind(this);\r\n        this.resetAll = this.resetAll.bind(this);\r\n\r\n\r\n        this.state = {\r\n            input: \"Input Placeholder\",\r\n            output: \"Output Placeholder\",\r\n            noCountOutput: \"Output Placeholder\",\r\n            csvOutput: \"Output Placeholder\",\r\n            csvDedupeOutput: \"Output Placeholder\",\r\n            searchType: \"string\",\r\n            searchValue: \"Placeholder\",\r\n            searchStringFlags: \"c\",\r\n            searchRegexFlags: \"gmi\",\r\n            Searches: {}\r\n        };\r\n\r\n    }\r\n\r\n    resetAll() {\r\n        localStorage.removeItem(\"cookie2\")\r\n\r\n\r\n        this.setState({\r\n            input: \"Input Placeholder\",\r\n            output: \"Output Placeholder\",\r\n            noCountOutput: \"Output Placeholder\",\r\n            csvOutput: \"Output Placeholder\",\r\n            csvDedupeOutput: \"Output Placeholder\",\r\n            searchType: \"string\",\r\n            searchValue: \"Placeholder\",\r\n            searchStringFlags: \"c\",\r\n            searchRegexFlags: \"gmi\",\r\n            name: \"\"\r\n        }, this.saveStateToCookie(100));\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.pullStateFromCookie()\r\n    }\r\n\r\n\r\n    saveStateToCookie(num) {\r\n        if (num) { } else { num = 0 }\r\n        setTimeout(() => {\r\n            let cookieData = {};\r\n            // let name = this.state.name ? this.state.name : \"\"; ;\r\n            // let input= this.state.input ? this.state.input : \"Input Placeholder\";\r\n            // let output= this.state.output ? this.state.output :\"Output Placeholder\";\r\n            // let noCountOutput= this.state.noCountOutput ? this.state.noCountOutput :\"Output Placeholder\";\r\n            // csvOutput:  \"Output Placeholder\",\r\n            // csvDedupeOutput:  \"Output Placeholder\",\r\n            let searchType = this.state.searchType ? this.state.searchType : \"string\";\r\n            let searchValue = this.state.searchValue ? this.state.searchValue : \"([A-CE-Z][0-9]{4})\";\r\n            let searchStringFlags = this.state.searchStringFlags ? this.state.searchStringFlags : \"ci\";\r\n            let searchRegexFlags = this.state.searchRegexFlags ? this.state.searchRegexFlags : \"gmi\";\r\n\r\n            cookieData.searchType = searchType;\r\n            cookieData.searchValue = searchValue;\r\n            cookieData.searchStringFlags = searchStringFlags;\r\n            cookieData.searchRegexFlags = searchRegexFlags;\r\n\r\n\r\n            localStorage.setItem('cookie2', JSON.stringify(cookieData));\r\n        }, num);\r\n\r\n    }\r\n\r\n    saveSearchesToSearchesCookie(val) {\r\n        //get the current proposed name\r\n        //save the current state to that name\r\n        //remove the searches subObject to prevent duplicates\r\n        //The final cookie will be a object like {name: state, name2: state2, Searches: null}\r\n\r\n        let cookieData = {};\r\n        let name = this.state.name;\r\n        // let input= this.state.input ? this.state.input : \"Input Placeholder\";\r\n        // let output= this.state.output ? this.state.output :\"Output Placeholder\";\r\n        // let noCountOutput= this.state.noCountOutput ? this.state.noCountOutput :\"Output Placeholder\";\r\n        // csvOutput:  \"Output Placeholder\",\r\n        // csvDedupeOutput:  \"Output Placeholder\",\r\n        let searchType = this.state.searchType ? this.state.searchType : \"string\";\r\n        let searchValue = this.state.searchValue ? this.state.searchValue : \"([A-CE-Z][0-9]{4})\";\r\n        let searchStringFlags = this.state.searchStringFlags ? this.state.searchStringFlags : \"ci\";\r\n        let searchRegexFlags = this.state.searchRegexFlags ? this.state.searchRegexFlags : \"gmi\";\r\n\r\n        if (name === null || name === undefined) { return } else {\r\n            alert(\"Current search saved as \" + name)\r\n        }\r\n\r\n        if (localStorage.getItem('Searches2')) {\r\n            cookieData = JSON.parse(localStorage.getItem('Searches2'));\r\n        }\r\n\r\n        cookieData[name] = {};\r\n        cookieData[name].searchType = searchType;\r\n        cookieData[name].searchValue = searchValue;\r\n        cookieData[name].searchStringFlags = searchStringFlags;\r\n        cookieData[name].searchRegexFlags = searchRegexFlags;\r\n        cookieData[name] = this.state;\r\n\r\n\r\n        localStorage.setItem('Searches2', JSON.stringify(cookieData));\r\n        this.setState({ Searches: cookieData });\r\n\r\n        if (val) {\r\n            if (cookieData[this.state.name]) {\r\n                delete cookieData[this.state.name];\r\n                localStorage.setItem('Searches2', JSON.stringify(cookieData));\r\n                this.setState({ Searches: cookieData })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    pullStateFromCookie() {\r\n        if (localStorage.getItem('cookie2')) {\r\n            let fetchedCookie = JSON.parse(localStorage.getItem('cookie2'));\r\n            Object.keys(fetchedCookie).forEach(element => {\r\n                if (element === \"name\") { } else {\r\n                    this.setState({\r\n                        [element]: fetchedCookie[element]\r\n                    })\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n        if (localStorage.getItem('Searches2')) {\r\n            let fetchedCookie2 = JSON.parse(localStorage.getItem('Searches2'));\r\n            this.setState({\r\n                Searches: fetchedCookie2\r\n            })\r\n        }\r\n    }\r\n\r\n    loadSearchFromSavedSearches(val) {\r\n        if (this.state.Searches && this.state.Searches[val]) {\r\n            let fetchedSearch = this.state.Searches[val];\r\n            Object.keys(fetchedSearch).forEach(element => {\r\n                if (element !== \"Searches\" && element !== \"input\" && element !== \"output\" && element !== \"noCountOutput\" && element !== \"csvOutput\" && element !== \"csvDedupeOutput\") {\r\n                    this.setState({\r\n                        [element]: fetchedSearch[element]\r\n                    })\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    updateInputValue(e) {\r\n        e.preventDefault();\r\n        this.setState({ input: e.target.value });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    updateSearchValue(e) {\r\n        e.preventDefault();\r\n        this.setState({ searchValue: e.target.value });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    setName(e) {\r\n        e.preventDefault();\r\n        this.setState({ name: e.target.value });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    updatesearchStringFlagsValue(val) {\r\n        // console.log(\"calling searchStringFlags with \" + val)\r\n        // let searchStringFlags = this.state.searchStringFlags;\r\n\r\n        this.setState({ searchStringFlags: val });\r\n\r\n\r\n        // if (searchStringFlags.indexOf(val) !== -1) {\r\n        //     this.setState({ searchStringFlags: searchStringFlags.replace(val, \"\") });\r\n        // } else {\r\n        //     this.setState({ searchStringFlags: searchStringFlags + val });\r\n        // }\r\n\r\n        console.log(\"new value is now \" + this.state.searchStringFlags)\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    updateRegexFlagsValue(val) {\r\n        // console.log(\"calling updateRegexFlagsValue with \" + val)\r\n        let searchRegexFlags = this.state.searchRegexFlags;\r\n\r\n        if (searchRegexFlags.indexOf(val) !== -1) {\r\n            this.setState({ searchRegexFlags: searchRegexFlags.replace(val, \"\") });\r\n        } else {\r\n            this.setState({ searchRegexFlags: searchRegexFlags + val });\r\n        }\r\n\r\n        console.log(\"new value is now \" + this.state.searchRegexFlags)\r\n        this.saveStateToCookie()\r\n\r\n    }\r\n\r\n    updateSearchType(val) {\r\n\r\n        this.setState({ searchType: val });\r\n\r\n        console.log(\"new value is now \" + this.state.searchType)\r\n        this.saveStateToCookie()\r\n\r\n    }\r\n\r\n\r\n    hcpcManager(input) { // expands all hcpc ranges in document\r\n        let NumRegex = new RegExp(\"\\\\d{4}\", \"gmi\");\r\n        let LetterRegex = new RegExp(\"[A-CE-Z]\", \"gmi\");\r\n        let HCPCRegexRange = new RegExp(\"([A-CE-Z][0-9]{4}[\\\\t]{0,3}[-—]{0,2}(through){0,1}(to){0,1}[\\\\t]{0,3}[A-CE-Z][0-9]{4})\", \"gmi\");\r\n        console.log(\"range matches include\", input.match(HCPCRegexRange))\r\n\r\n        let result = input.replace(HCPCRegexRange, function (element) {\r\n\r\n            let letters = element.match(LetterRegex);\r\n            let numbers = element.match(NumRegex);\r\n            let store = [];\r\n\r\n            if (letters.length !== 2 | numbers.length !== 2 | numbers[0] > numbers[1]) { alert(\"failed match\") } else {\r\n                let i = numbers[0]\r\n                for (i; i <= numbers[1]; i++) {\r\n                    store.push(letters[0] + i)\r\n                }\r\n            }\r\n\r\n            store = store.join(\",\")\r\n            return store\r\n        });\r\n\r\n        return result\r\n\r\n\r\n\r\n    }\r\n\r\n    setSearchValue() {\r\n        let input = this.state.input;\r\n        let searchRegexFlags = this.state.searchRegexFlags;\r\n        let search = this.state.searchValue;\r\n        let searchType = this.state.searchType;\r\n        let caseSensitive;\r\n\r\n\r\n        input = this.hcpcManager(input);\r\n\r\n        if (searchRegexFlags.indexOf(\"i\") === -1) { // if case sensitive true  - no i flag\r\n            caseSensitive = true\r\n        } else {\r\n            caseSensitive = false\r\n        }\r\n\r\n        //if the regex option is chosen search as is - assign to array for the forEach loop below\r\n        //if the list option is chosen split into an array and regex search each element\r\n        if (searchType === \"string\") {\r\n            search = search.split(\",\");\r\n            search = Array.from(new Set(search));\r\n        } else {\r\n            search = [search]\r\n        }\r\n        let output = [];\r\n        let matcher2 = [];\r\n\r\n        search.forEach(element => {\r\n            // update this to keep a track of the specific order of matches\r\n            let match;\r\n            let matcher = []; // input.match(new RegExp(element, searchRegexFlags))\r\n            let test = new RegExp(element, searchRegexFlags);\r\n            while ((match = test.exec(input)) != null) {\r\n                matcher.push([match[0], parseInt(match.index)])\r\n\r\n            }\r\n\r\n            //if no matches\r\n            if (matcher === null) {\r\n                this.setState({ output: \"No Matches\" });\r\n                this.saveStateToCookie()\r\n                return\r\n            }\r\n            matcher2 = [...matcher2, ...matcher]\r\n        }\r\n        )\r\n\r\n        console.log(\"matcher2\", matcher2)\r\n\r\n        if (matcher2.length >= 1 && Array.isArray(matcher2)) {\r\n            // matcher = matcher.split(\",\") \r\n            matcher2 = matcher2.sort(([a, b], [c, d]) => b - d);\r\n            matcher2.forEach(element => {\r\n                console.log(\"matcher32\", element)\r\n                output = [...output, element[0]]\r\n            });\r\n\r\n        }\r\n\r\n\r\n\r\n        let noCountOutput = output.join(\"\\n\");\r\n        let csvOutput = output.join(\",\");\r\n\r\n        let uniqueOutput = [];\r\n        let counts = [];\r\n        let countOutput = [];\r\n        let csvDedupeOutput = [];\r\n\r\n        output.forEach(element => {\r\n            if (!caseSensitive) {\r\n                console.log(\"element,\", element)\r\n                let lowerCaseUniqueOutput = uniqueOutput.map(element => element.toLowerCase())\r\n                let pos = lowerCaseUniqueOutput.indexOf(element.toLowerCase());\r\n                if (pos === -1) {\r\n                    uniqueOutput.push(element)\r\n                    counts.push(1)\r\n                } else {\r\n                    counts[pos] = counts[pos] + 1;\r\n                }\r\n\r\n            } else {\r\n                let pos = uniqueOutput.indexOf(element);\r\n                if (pos === -1) {\r\n                    uniqueOutput.push(element)\r\n                    counts.push(1)\r\n                } else {\r\n                    counts[pos] = counts[pos] + 1;\r\n                }\r\n            }\r\n        });\r\n\r\n        uniqueOutput.forEach((element, index) => {\r\n            countOutput.push(element + \" - \" + counts[index] + \" times\");\r\n            csvDedupeOutput.push(element);\r\n        });\r\n\r\n\r\n\r\n        this.setState({\r\n            output: countOutput.join(\"\\n\"),\r\n            noCountOutput: noCountOutput,\r\n            csvOutput: csvOutput,\r\n            csvDedupeOutput: csvDedupeOutput.join(\",\")\r\n        });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Container >\r\n                <Row>\r\n\r\n                    <Col lg=\"9\" xl=\"9\" md=\"9\" sm=\"12\">\r\n                        <Jumbotron className=\"mainPanel panel\">\r\n                            <Row>\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    <TextArea\r\n                                        name=\"Input\"\r\n                                        value={this.state.input}\r\n                                        rows=\"12\"\r\n                                        onChange={this.updateInputValue}\r\n\r\n                                    />\r\n                                </Col>\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    {this.state.searchStringFlags.indexOf(\"c\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.noCountOutput}\r\n                                        rows=\"12\"\r\n                                    />}\r\n\r\n                                    {this.state.searchStringFlags.indexOf(\"a\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.output}\r\n                                        rows=\"12\"\r\n                                    />}\r\n\r\n                                    {this.state.searchStringFlags.indexOf(\"s\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.csvDedupeOutput}\r\n                                        rows=\"12\"\r\n                                    />}\r\n\r\n                                    {this.state.searchStringFlags.indexOf(\"h\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.csvOutput}\r\n                                        rows=\"12\"\r\n                                    />}\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <TextAreaQuery\r\n                                name=\"Search String\"\r\n                                value={this.state.searchValue}\r\n                                rows=\"6\"\r\n                                onChange={this.updateSearchValue}\r\n                                buttonOnClick={this.setSearchValue}\r\n                                buttonText=\"Search\"\r\n                            />\r\n\r\n                            <Card1\r\n                                text='This tool is the same as the lookup tool, but also expands HCPC ranges'\r\n                            />\r\n\r\n\r\n                        </Jumbotron>\r\n                    </Col>\r\n                    <Col lg=\"3\" xl=\"3\" md=\"3\" sm=\"12\">\r\n                        <Jumbotron className=\"sidePanel panel\">\r\n                            <Col lg=\"12\" xl=\"12\" md=\"12\" sm=\"12\">\r\n                                <h5>HCPC Lookup</h5>\r\n                            </Col>\r\n                            <ButtonGroup size=\"sm\" className=\"buttonGroup\">\r\n                                <Button\r\n                                    color={this.state.searchRegexFlags.indexOf(\"i\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"i\")}\r\n                                >\r\n                                    Case Insensitive</Button>\r\n                                <Button\r\n                                    color={this.state.searchRegexFlags.indexOf(\"g\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"g\")}\r\n                                >\r\n                                    Global</Button>\r\n                                <Button\r\n                                    color={this.state.searchRegexFlags.indexOf(\"m\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"m\")}\r\n                                >\r\n                                    Multiline</Button>\r\n                            </ButtonGroup>\r\n\r\n\r\n                            <ButtonGroup size=\"sm\" className=\"buttonGroup\">\r\n                                <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"c\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"c\")}\r\n                                >\r\n                                    Show All</Button>\r\n                                <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"a\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"a\")}\r\n                                >\r\n                                    Count</Button>\r\n                                <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"s\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"s\")}\r\n                                >\r\n                                    CSV Trimmed</Button>\r\n                                <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"h\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"h\")}\r\n                                >\r\n                                    CSV</Button>\r\n\r\n                            </ButtonGroup>\r\n\r\n\r\n                            <ButtonGroup size=\"\" className=\"buttonGroup\">\r\n                                <label>Search Type</label>\r\n                                <Button\r\n                                    color={this.state.searchType.indexOf(\"regex\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateSearchType(\"regex\")}\r\n                                >\r\n                                    Regex</Button>\r\n                                <Button\r\n                                    color={this.state.searchType.indexOf(\"string\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateSearchType(\"string\")}\r\n                                >\r\n                                    List</Button>\r\n\r\n                            </ButtonGroup>\r\n\r\n                            <TextAreaQuery2\r\n                                name=\"Save Search\"\r\n                                value={this.state.name}\r\n                                rows=\"1\"\r\n                                onChange={this.setName}\r\n                                buttonOnClick={() => this.saveSearchesToSearchesCookie()}\r\n                                buttonOnClick2={() => this.saveSearchesToSearchesCookie(this.state.name)}\r\n                                buttonOnClick3={() => this.resetAll()}\r\n                                buttonText={\"Save\"}\r\n                                buttonText2={\"Delete\"}\r\n                                buttonText3={\"Reset Page\"}\r\n\r\n                            />\r\n\r\n                            {this.state.Searches && Object.keys(this.state.Searches).map((element) => {\r\n                                return element !== \"Searches\" ?\r\n                                    <Button\r\n                                        onClick={() => this.loadSearchFromSavedSearches(element)}\r\n                                        color=\"primary\"\r\n                                        style={{ border: \"solid white 1px\", marginLeft: \"1px\" }}\r\n                                    >{element}</Button> : \"\"\r\n                            })\r\n                            }\r\n\r\n\r\n\r\n                        </Jumbotron>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(HCPCandFilter)\r\n\r\n","import React, { Component } from 'react';\r\nimport { Jumbotron, Button, Row, Container, Col, ButtonGroup } from 'reactstrap';\r\nimport { withRouter } from \"react-router\";\r\nimport './Universal.css';\r\nimport TextArea from './subComponents/TextArea';\r\nimport Card1 from './subComponents/Card1';\r\n\r\n\r\nclass Formatter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateInputValue = this.updateInputValue.bind(this);\r\n        this.launchFormatter = this.launchFormatter.bind(this);\r\n        this.rulesManager = this.rulesManager.bind(this);\r\n        this.bulletRanker = this.bulletRanker.bind(this);\r\n        this.toggleexperimental = this.toggleexperimental.bind(this);\r\n        this.fontSizeChange = this.fontSizeChange.bind(this);\r\n        this.saveFontCookie = this.saveFontCookie.bind(this);\r\n        this.loadFontCookie = this.loadFontCookie.bind(this);\r\n\r\n        this.state = {\r\n            input: \"Placeholder\",\r\n            output: \"Output Placeholder\",\r\n            experimentalOutput: \"Output Placeholder\",\r\n            experimental: false,\r\n            fontSize: 10\r\n        };\r\n\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.loadFontCookie()\r\n    }\r\n\r\n    fontSizeChange(num) {\r\n        let fontSize = this.state.fontSize;\r\n        if (num === \"0\" || num === 0) { this.setState({ fontSize: fontSize - 2 }) }\r\n        if (num === \"1\" || num === 1) { this.setState({ fontSize: fontSize + 2 }) }\r\n        this.saveFontCookie()\r\n    }\r\n\r\n    saveFontCookie() {\r\n        let font = this.state.fontSize;\r\n        localStorage.setItem('fontSize', font);\r\n    }\r\n\r\n    loadFontCookie() {\r\n        let font = localStorage.getItem('fontSize');\r\n        console.log(\"fontSize\",font)\r\n        if(font !== null && Number.isInteger(font)){\r\n            this.setState({fontSize: font})\r\n        }\r\n    }\r\n\r\n\r\n    updateInputValue(e) {\r\n        e.preventDefault();\r\n        this.setState({ input: e.target.value });\r\n    }\r\n\r\n\r\n    toggleexperimental() {\r\n        // console.log(\"calling experimental with \" + val)\r\n        let experimental = this.state.experimental;\r\n\r\n        if (experimental === true) {\r\n            this.setState({ experimental: false });\r\n        } else {\r\n            this.setState({ experimental: true });\r\n        }\r\n\r\n        // console.log(\"new double line value is now \" + this.state.experimental)\r\n    }\r\n\r\n\r\n    updateSearchType(val) {\r\n\r\n        this.setState({ searchType: val });\r\n\r\n        // console.log(\"new value is now \" + this.state.searchType)\r\n\r\n    }\r\n\r\n\r\n    bulletRanker(inputer) {\r\n        let bullet1 = new RegExp(\"•\", \"gmi\");\r\n        let bullet2 = new RegExp(\"\\\\so\\\\s\", \"gmi\");\r\n\r\n        // let bullet3 = new RegExp(\"[\\\\s\\\\n\\\\]{1}[ivx]{1,5}[\\\\.]\", \"gm\");\r\n        let bullet4 = new RegExp(\"[\\\\s\\\\n]{1}[ivx]{1,5}[\\\\)]\", \"gm\");\r\n        // let bullet5 = new RegExp(\"[\\\\s\\\\n]{1}[IVX]{1,5}[\\\\.]\", \"gm\");\r\n        let bullet6 = new RegExp(\"[\\\\s\\\\n]{1}[IVX]{1,5}[\\\\)]\", \"gm\");\r\n\r\n        let bullet7 = new RegExp(\"[\\\\s\\\\n^\\\\/]{1}[a-z]{1,2}[\\\\)]\", \"gm\");\r\n        let bullet8 = new RegExp(\"[\\\\s\\\\n]{1}[a-z]{1,2}[\\\\.]\", \"gm\");\r\n        let bullet9 = new RegExp(\"[\\\\s\\\\n^\\\\/]{1}[A-Z]{1,2}[\\\\)]\", \"gm\");\r\n        let bullet10 = new RegExp(\"[\\\\s\\\\n]{1}[A-Z]{1,2}[\\\\.]\", \"gm\");\r\n\r\n        // let bullet13 = new RegExp(\"[\\\\()][0-9]{1,2}[\\\\)]\", \"gm\");\r\n        let bullet11 = new RegExp(\"[\\\\(]{0,1}[0-9]{1,2}[\\\\)]\", \"gm\");\r\n        let bullet12 = new RegExp(\"[\\\\s][0-9]{1,2}[\\\\.][\\\\s]\", \"gm\");\r\n\r\n        let bullet13 = new RegExp(\"[\\\\s\\\\n]{1}[\\\\(]{0,1}[a-z]{1,2}[\\\\)]\", \"gm\");\r\n        // let bullet14 = new RegExp(\"[\\\\s\\\\n]{1}[a-z]{1,2}[\\\\.]\", \"gm\");\r\n        let bullet15 = new RegExp(\"[\\\\s\\\\n]{1}[\\\\(]{0,1}[A-Z]{1,2}[\\\\)]\", \"gm\");\r\n        // let bullet16 = new RegExp(\"[\\\\s\\\\n]{1}[A-Z]{1,2}[\\\\.]\", \"gm\");\r\n\r\n        let allBullets = [bullet1, bullet2, bullet4, bullet6, bullet7, bullet8, bullet9, bullet10, bullet11, bullet12, bullet13, bullet15]\r\n        // ,bullet13]\r\n        let ranking = [];\r\n\r\n        // console.log(\"inputer.match(bullet7), inputer.match(bullet7)\", inputer.match(bullet7))\r\n\r\n        allBullets.forEach((element, index) => {\r\n            if (inputer.match(element) != null) {\r\n                let element2 = inputer.indexOf(inputer.match(element)[0])\r\n                ranking.push([index, element2]) // [choice of bullet,relative position]\r\n                console.log(inputer.match(element))\r\n\r\n            }\r\n        });\r\n\r\n        // console.log(ranking)\r\n        ranking = ranking.sort(([a, b], [c, d]) => b - d);\r\n        console.log(\"bullet rankings are \", ranking)\r\n\r\n        ranking.forEach((bulletRegexPosition, currentIndex) => {\r\n            let bulletRegex = allBullets[bulletRegexPosition[0]]\r\n            console.log(\"chosen the bullet regex \" + bulletRegex + \" for \" + currentIndex + \" indents\")\r\n            let spacer = \"\";\r\n            let indentString = \"    \";\r\n\r\n            for (let i = 0; i < currentIndex; i++) {\r\n                spacer = spacer + indentString;\r\n            }\r\n\r\n            inputer = inputer.replace(bulletRegex, function (element) {\r\n                if (element.indexOf(\"\\n\") !== -1) {\r\n                    element = element.replace(\"\\n\", \"\\n\" + spacer)\r\n                    // console.log(element)\r\n                } else {\r\n                    element = spacer + element\r\n                }\r\n                return element\r\n            });\r\n        });\r\n\r\n        return inputer\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    rulesManager(inputer, type) { // expands all hcpc ranges in document\r\n        let lineBetweenNoCaps = new RegExp(\"([A-Za-z0-9]{1,55}[\\\\s \\\\,\\\\-]{0,4}[\\\\n]{1,5}[\\\\s]{0,5}[a-z0-9\\\\(]{1,55})\", \"gm\")\r\n        let extraSpaces = new RegExp(\"[\\\\s\\\\n]{1,55}\", \"gmi\");\r\n        let extraSpaces2 = new RegExp(\"[\\\\s]{1,55}\", \"gmi\");\r\n        let bullets = new RegExp(\"[\\\\s\\\\n/^\\\\(^/]{1}[a-zA-Z0-9]{1,2}[\\\\.\\\\)]{1}[\\\\s]{0,1}[\\\\n]{0,1}\", \"gmi\");\r\n        let failedBullets = new RegExp(\"[\\\\s]{0,55}[(/]{1}[a-zA-Z0-9]{1,2}\",\"gmi\")\r\n        let extraLine = new RegExp(\"\\\\n\\\\n\", \"gmi\")\r\n\r\n\r\n        let result = inputer.replace(lineBetweenNoCaps, function (element) {\r\n            element = element.replace(extraSpaces, \" \")\r\n            return element\r\n        });\r\n\r\n        let result2 = result.replace(bullets, function (element) {\r\n            if (!element.match(failedBullets) && element.charAt(0) === \" \") {\r\n                element = element.substring(1);\r\n                console.log(\"removing extra spacer\")\r\n            }\r\n            if(element.match(failedBullets)){\r\n                element = element.replace(extraSpaces,\" \")\r\n            }else{\r\n            element = \"\\n\" + element;\r\n            }\r\n            return element\r\n        });\r\n\r\n        result = result.trim()\r\n        result2 = result2.trim()\r\n\r\n        result2 = this.bulletRanker(result2);\r\n        result2 = result2.replace(extraLine, \"\\n\")\r\n        result2 = result2.replace(failedBullets,function(element){\r\n            console.log(element)\r\n            element = element.replace(extraSpaces2,\"\")\r\n            console.log(element)\r\n            return element\r\n        })\r\n\r\n        \r\n\r\n        // result2 = result2.replace(lineBetweenNoCaps, function (element) {\r\n        //     element = element.replace(extraSpaces,\" \")\r\n        //     return element       \r\n        // });\r\n\r\n        return [result, result2]\r\n    }\r\n\r\n    launchFormatter(type) {\r\n        // console.log(\"LaunchFormatter called\")\r\n        let input = this.state.input;\r\n        input = this.rulesManager(input, type);\r\n\r\n\r\n        this.setState({\r\n            output: input[0],\r\n            experimentalOutput: input[1]\r\n        });\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Container >\r\n                <Row>\r\n\r\n\r\n                    <Col lg=\"12\" xl=\"12\" md=\"12\" sm=\"12\">\r\n                        <Jumbotron className=\"mainPanel panel\">\r\n                            <Col lg=\"12\" xl=\"12\" md=\"12\" sm=\"12\">\r\n                                <h5>Policy Formatter (Experimental)</h5>\r\n                            </Col>\r\n                            <Row>\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    <TextArea\r\n                                        name=\"Input\"\r\n                                        placeholder={this.state.input}\r\n                                        rows=\"18\"\r\n                                        onChange={this.updateInputValue}\r\n                                        styler={{ fontSize: this.state.fontSize }}\r\n\r\n                                    />\r\n                                </Col>\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.experimental === true ? this.state.experimentalOutput : this.state.output}\r\n                                        rows=\"18\"\r\n                                        styler={{ fontSize: this.state.fontSize }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Col lg=\"12\" xl=\"12\" md=\"12\" sm=\"12\">\r\n                                <ButtonGroup size=\"\" className=\"buttonGroup\">\r\n                                    {/* <label>Options</label> */}\r\n                                    <Button\r\n                                        bsSize=\"\"\r\n                                        name=\"launchFormatter\"\r\n                                        onClick={() => this.launchFormatter(1)}\r\n                                        color=\"success\"\r\n                                    >\r\n                                        Format\r\n                                </Button>\r\n                                    <Button\r\n                                        color={this.state.experimental === true ? \"primary\" : \"secondary\"}\r\n                                        onClick={() => this.toggleexperimental(\"c\")}\r\n                                    >\r\n                                        Experimental Indents</Button>\r\n\r\n\r\n                                </ButtonGroup>\r\n                                <ButtonGroup size=\"\" className=\"buttonGroup float-right\">\r\n                                    <label style={{paddingRight: \"10px\",textAlign: \"center\",marginTop:\"5px\"}}>Font Size: </label>\r\n                                    <Button\r\n                                        bsSize=\"\"\r\n                                        name=\"fontSizeChange0\"\r\n                                        onClick={() => this.fontSizeChange(0)}\r\n                                        color=\"secondary\"\r\n                                    >\r\n                                        -\r\n                                </Button>\r\n                                    <Button\r\n                                        name=\"fontSizeChange1\"\r\n                                        color=\"secondary\"\r\n                                        onClick={() => this.fontSizeChange(1)}\r\n                                    >\r\n                                        +</Button>\r\n                                </ButtonGroup>\r\n\r\n\r\n                            </Col>\r\n\r\n                            <Card1\r\n                                text='This tool tries to apply basic rules regarding bullet indents and removes extra line breaks'\r\n                            />\r\n\r\n                        </Jumbotron>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(Formatter)\r\n\r\n","import React, { Component } from 'react';\r\nimport { Jumbotron, Button, Row, Container, Col, ButtonGroup } from 'reactstrap';\r\nimport { withRouter } from \"react-router\";\r\nimport './Universal.css';\r\nimport TextArea from './subComponents/TextArea';\r\nimport Card1 from './subComponents/Card1';\r\n\r\n\r\nclass MasterPAFormatter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateInputValue = this.updateInputValue.bind(this);\r\n        this.launchFormatter = this.launchFormatter.bind(this);\r\n        this.headerManager = this.headerManager.bind(this);\r\n        this.toggleDoubleLine = this.toggleDoubleLine.bind(this);\r\n        this.fontSizeChange = this.fontSizeChange.bind(this);\r\n        this.saveFontCookie = this.saveFontCookie.bind(this);\r\n        this.loadFontCookie = this.loadFontCookie.bind(this);\r\n\r\n        \r\n        this.state = {\r\n            input: \"Placeholder\",\r\n            output: \"Output Placeholder\",\r\n            noDoubleLineOutput: \"Output Placeholder\",\r\n            doubleLine: false,\r\n            fontSize: 10\r\n        };\r\n\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.loadFontCookie()\r\n    }\r\n\r\n    fontSizeChange(num) {\r\n        let fontSize = this.state.fontSize;\r\n        if (num === \"0\" || num === 0) { this.setState({ fontSize: fontSize - 2 }) }\r\n        if (num === \"1\" || num === 1) { this.setState({ fontSize: fontSize + 2 }) }\r\n        this.saveFontCookie()\r\n    }\r\n\r\n    saveFontCookie() {\r\n        let font = this.state.fontSize;\r\n        localStorage.setItem('fontSize', font);\r\n    }\r\n\r\n    loadFontCookie() {\r\n        let font = localStorage.getItem('fontSize');\r\n        console.log(\"fontSize\",font)\r\n        if(font !== null && Number.isInteger(font)){\r\n            this.setState({fontSize: font})\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    updateInputValue(e) {\r\n        e.preventDefault();\r\n        this.setState({ input: e.target.value });\r\n    }\r\n\r\n\r\n    toggleDoubleLine() {\r\n        // console.log(\"calling doubleLine with \" + val)\r\n        let doubleLine = this.state.doubleLine;\r\n\r\n        if (doubleLine === true) {\r\n            this.setState({ doubleLine: false });\r\n        } else {\r\n            this.setState({ doubleLine: true });\r\n        }\r\n\r\n        console.log(\"new double line value is now \" + this.state.doubleLine)\r\n    }\r\n\r\n\r\n    updateSearchType(val) {\r\n\r\n        this.setState({ searchType: val });\r\n\r\n        console.log(\"new value is now \" + this.state.searchType)\r\n\r\n    }\r\n\r\n\r\n    headerManager(inputer) {\r\n        let headingsRegex = new RegExp(\"(Exclusion\\\\sCriteria)|(Required\\\\sMedical\\\\sInformation)|(Medical\\\\sInformation)|(Age\\\\sRestrictions)|(Prescriber\\\\sRestrictions)|(Coverage\\\\sDuration)|(Other\\\\sCriteria)|(Off[\\\\-\\\\s]{0,1}Label\\\\sUses)|(Products\\\\sAffected)|(PA\\\\sCriteria)|(Last\\\\sUpdated)|(•)|(\\\\so\\\\s)\", \"gmi\")\r\n        let CapsHeadings = new RegExp(\"\\\\s{0,1}Indications\\\\s\", \"gm\");\r\n        let newLine = new RegExp(\"\\\\n{1,55}\", \"gmi\");\r\n\r\n\r\n        let input = inputer.replace(newLine, function (element) {\r\n            element = \" \";\r\n            return element\r\n        })\r\n\r\n        //handling the different regex for special headings\r\n        input = input.replace(CapsHeadings, function (element) {\r\n            if (element.charAt(0) === \" \") { element = \"\\n\" + element.substring(1) } else {\r\n                element = \"\\n\" + element\r\n            }\r\n            return element\r\n        })\r\n        //END handling the different regex for special headings\r\n\r\n        let result = input.replace(headingsRegex, function (element) {\r\n            element = \"\\n\" + element;\r\n            return element\r\n        });\r\n        let result2 = result.replace(headingsRegex, function (element) {\r\n            if (element === \"•\" | element === \"\\\\so\\\\s\") {\r\n                return element\r\n            } else { element = \"\\n\" + element; }\r\n            return element\r\n        });\r\n\r\n        //handling the different regex for special headings\r\n        result2 = result2.replace(CapsHeadings, function (element) {\r\n            if (element === \"•\" | element === \"\\\\so\\\\s\") {\r\n                return element\r\n            } else { element = \"\\n\" + element; }\r\n            return element\r\n        });\r\n        //END handling the different regex for special headings\r\n\r\n        result = result.trim()\r\n        result2 = result2.trim()\r\n\r\n\r\n\r\n\r\n\r\n\r\n        return [result, result2]\r\n    }\r\n\r\n    launchFormatter() {\r\n        console.log(\"LaunchFormatter called\")\r\n        let input = this.state.input;\r\n        input = this.headerManager(input);\r\n\r\n\r\n        this.setState({\r\n            output: input[0],\r\n            noDoubleLineOutput: input[1]\r\n        });\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Container >\r\n                <Row>\r\n\r\n\r\n                    <Col lg=\"12\" xl=\"12\" md=\"12\" sm=\"12\">\r\n                        <Jumbotron className=\"mainPanel panel\">\r\n                            <Col lg=\"12\" xl=\"12\" md=\"12\" sm=\"12\">\r\n                                <h5>Master PA Formatter</h5>\r\n                            </Col>\r\n                            <Row>\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    <TextArea\r\n                                        name=\"Input\"\r\n                                        placeholder={this.state.input}\r\n                                        rows=\"18\"\r\n                                        onChange={this.updateInputValue}\r\n                                        styler={{ fontSize: this.state.fontSize }}\r\n\r\n                                    />\r\n                                </Col>\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.doubleLine === true ? this.state.noDoubleLineOutput : this.state.output}\r\n                                        rows=\"18\"\r\n                                        styler={{ fontSize: this.state.fontSize }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n\r\n\r\n                            <ButtonGroup size=\"\" className=\"buttonGroup\">\r\n                                <Button\r\n                                    bsSize=\"\"\r\n                                    name=\"launchFormatter\"\r\n                                    onClick={() => this.launchFormatter()}\r\n                                    color=\"success\"\r\n                                >\r\n                                    Format\r\n                                </Button>                                <Button\r\n                                    color={this.state.doubleLine === true ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.toggleDoubleLine(\"c\")}\r\n                                >\r\n                                    Double Lines</Button>\r\n\r\n                            </ButtonGroup>\r\n\r\n                            <ButtonGroup size=\"\" className=\"buttonGroup float-right\">\r\n                                <label style={{ paddingRight: \"10px\", textAlign: \"center\", marginTop: \"5px\" }}>Font Size: </label>\r\n                                <Button\r\n                                    bsSize=\"\"\r\n                                    name=\"fontSizeChange0\"\r\n                                    onClick={() => this.fontSizeChange(0)}\r\n                                    color=\"secondary\"\r\n                                >\r\n                                    -\r\n                                </Button>\r\n                                <Button\r\n                                    name=\"fontSizeChange1\"\r\n                                    color=\"secondary\"\r\n                                    onClick={() => this.fontSizeChange(1)}\r\n                                >\r\n                                    +</Button>\r\n                            </ButtonGroup>\r\n\r\n                            <Card1\r\n                                text={<div><p>This tool removes all line breaks before finding  pre-defined headings and inserts linebreaks before them\r\n                                    </p></div>}\r\n\r\n\r\n                            />\r\n\r\n                        </Jumbotron>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(MasterPAFormatter)\r\n\r\n","import React, { Component } from 'react';\r\nimport { Jumbotron, Button, Row, Container, Col, ButtonGroup } from 'reactstrap';\r\nimport { withRouter } from \"react-router\";\r\nimport './Universal.css';\r\nimport TextArea from './subComponents/TextArea';\r\nimport Card1 from './subComponents/Card1';\r\n\r\n\r\nclass GSheetFormatter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateInputValue = this.updateInputValue.bind(this);\r\n        this.updateGSheetCellValue = this.updateGSheetCellValue.bind(this);\r\n        this.updateGSheetapplyFormula = this.updateGSheetapplyFormula.bind(this);\r\n        this.updateRegexFlagsValue = this.updateRegexFlagsValue.bind(this);\r\n        this.launchFunction = this.launchFunction.bind(this);\r\n        this.resetAll = this.resetAll.bind(this);\r\n        this.fontSizeChange = this.fontSizeChange.bind(this);\r\n        this.saveFontCookie = this.saveFontCookie.bind(this);\r\n        this.loadFontCookie = this.loadFontCookie.bind(this);\r\n\r\n\r\n        this.state = {\r\n            input: \"Input Placeholder\",\r\n            output: \"Output Placeholder\",\r\n            outputCsv: \"Output Placeholder Csv\",\r\n            outputWithFormula: \"Output Placeholder With Formula\",\r\n            outputWithFormulaReverse: \"Output Placeholder With Is Not a Match Formula\",\r\n            GSheetCellValue: \"A2\",\r\n            GSheetFormulaFlag: \"rdrl\",\r\n            GSheetapplyFormula: \"normal\",\r\n            fontSize: 14\r\n\r\n        }\r\n\r\n        setTimeout(() => {\r\n            this.loadFontCookie()\r\n        }, 100);\r\n    }\r\n\r\n    resetAll() {\r\n\r\n\r\n        this.setState({\r\n            input: \"Input Placeholder\",\r\n            output: \"Output Placeholder\",\r\n            outputCsv: \"Output Placeholder Csv\",\r\n            outputWithFormula: \"Output Placeholder With Formula\",\r\n            outputWithFormulaReverse: \"Output Placeholder With Is Not a Match Formula\",\r\n            GSheetCellValue: \"A2\",\r\n            GSheetFormulaFlag: \"rdrl\",\r\n            GSheetapplyFormula: \"normal\"\r\n        });\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    fontSizeChange(num) {\r\n        let fontSize = this.state.fontSize;\r\n        if (num === \"0\" || num === 0) { this.setState({ fontSize: fontSize - 2 }) }\r\n        if (num === \"1\" || num === 1) { this.setState({ fontSize: fontSize + 2 }) }\r\n        this.saveFontCookie()\r\n    }\r\n\r\n    saveFontCookie() {\r\n        let font = this.state.fontSize;\r\n        localStorage.setItem('fontSize', font);\r\n    }\r\n\r\n    loadFontCookie() {\r\n        let font = localStorage.getItem('fontSize');\r\n        console.log(\"fontSize\", font)\r\n        if (font !== null && Number.isInteger(font)) {\r\n            this.setState({ fontSize: font })\r\n        }\r\n    }\r\n\r\n    updateInputValue(e) {\r\n        e.preventDefault();\r\n        this.setState({ input: e.target.value });\r\n    }\r\n\r\n    updateGSheetCellValue(e) {\r\n        e.preventDefault();\r\n        this.setState({ GSheetCellValue: e.target.value });\r\n    }\r\n\r\n\r\n\r\n    updateGSheetapplyFormula(val) {\r\n        // console.log(\"calling doubleLine with \" + val)\r\n        // let GSheetapplyFormula = this.state.GSheetapplyFormula;\r\n\r\n        this.setState({ GSheetapplyFormula: val });\r\n\r\n        // if (val === \"normal\") {\r\n        //     if (GSheetapplyFormula === \"normal\") {\r\n        //         this.setState({ GSheetapplyFormula: \"false\" });\r\n        //     } else {\r\n        //         this.setState({ GSheetapplyFormula: \"normal\" });\r\n        //     }\r\n        // } else {\r\n        //     if (GSheetapplyFormula === \"reverse\") {\r\n        //         this.setState({ GSheetapplyFormula: \"false\" });\r\n        //     } else {\r\n        //         this.setState({ GSheetapplyFormula: \"reverse\" });\r\n        //     }\r\n        // }\r\n\r\n        // console.log(\"new gSheet Formula value is now \" + this.state.GSheetFormulaFlag)\r\n    }\r\n\r\n    updateRegexFlagsValue(val) {\r\n        // console.log(\"calling updateRegexFlagsValue with \" + val)\r\n        let GSheetFormulaFlag = this.state.GSheetFormulaFlag;\r\n\r\n        if (GSheetFormulaFlag.indexOf(val) !== -1 && val !== \"rl\" && val !== \"rcm\") {\r\n            GSheetFormulaFlag = GSheetFormulaFlag.replace(val, \"\");\r\n        } else {\r\n            GSheetFormulaFlag = GSheetFormulaFlag + val;\r\n        }\r\n\r\n        //radio settings for list/csv splits on input - nl is plit at new line, cs is split at comma\r\n        if (val === \"cs\" && GSheetFormulaFlag.indexOf(\"nl\") !== -1) {\r\n            GSheetFormulaFlag = GSheetFormulaFlag.replace(\"nl\", \"\");\r\n        } else {\r\n            if (val === \"nl\" && GSheetFormulaFlag.indexOf(\"cs\") !== -1) {\r\n                GSheetFormulaFlag = GSheetFormulaFlag.replace(\"cs\", \"\");\r\n            }\r\n        }\r\n\r\n        //radio settings for list/csv - rl is return list rcm is return csv\r\n        if (val === \"rl\") {\r\n            GSheetFormulaFlag = GSheetFormulaFlag.replace(\"rcm\", \"\");\r\n            GSheetFormulaFlag = GSheetFormulaFlag.replace(\"rl\", \"\");\r\n            GSheetFormulaFlag = GSheetFormulaFlag + val;\r\n        } else {\r\n            if (val === \"rcm\") {\r\n                GSheetFormulaFlag = GSheetFormulaFlag.replace(\"rcm\", \"\");\r\n                GSheetFormulaFlag = GSheetFormulaFlag.replace(\"rl\", \"\");\r\n                GSheetFormulaFlag = GSheetFormulaFlag + val;\r\n\r\n            } else {\r\n\r\n            }\r\n        }\r\n\r\n\r\n\r\n        this.setState({ GSheetFormulaFlag: GSheetFormulaFlag })\r\n\r\n        console.log(\"new value is now \" + this.state.GSheetFormulaFlag)\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    launchFunction() { //main function at play\r\n        let input = this.state.input;\r\n        console.log(\"running with \", input)\r\n        let GSheetFormulaFlag = this.state.GSheetFormulaFlag;\r\n        let GSheetapplyFormula = this.state.GSheetapplyFormula;\r\n        let GSheetCellValue = this.state.GSheetCellValue;\r\n        let removeDuplicatesFlag, splitAtNewLinesFlag, CommaSepListFlag, returnType;\r\n        let output, outputWithFormula;\r\n\r\n        if (GSheetFormulaFlag.indexOf(\"rd\") === -1) { removeDuplicatesFlag = false } else { removeDuplicatesFlag = true }\r\n        if (GSheetFormulaFlag.indexOf(\"nl\") === -1) { splitAtNewLinesFlag = false } else { splitAtNewLinesFlag = true }\r\n        if (GSheetFormulaFlag.indexOf(\"cs\") === -1) { CommaSepListFlag = false } else { CommaSepListFlag = true }\r\n        if (GSheetFormulaFlag.indexOf(\"rcm\") === -1) { returnType = false } else { returnType = true }\r\n\r\n        // if(splitAtNewLinesFlag){ input = input.split(\"\\n\")}else{input = input.split(\"\\\\s\")}\r\n        if (CommaSepListFlag) {\r\n            input = input.split(\",\")\r\n            console.log(\"split 1\")\r\n        } else {\r\n            if (splitAtNewLinesFlag) {\r\n                input = input.split(\"\\n\")\r\n                console.log(\"split 2\")\r\n\r\n            } else {\r\n                let rege = new RegExp(\"[\\\\s\\\\n]\", \"gmi\")\r\n                input = input.split(rege)\r\n            }\r\n            console.log(\"split 3\")\r\n\r\n        }\r\n        if (removeDuplicatesFlag) { output = Array.from(new Set(input)) } else { output = input }\r\n\r\n        output.forEach(element => { element = element.trim() });\r\n        output = output.filter(n => n)\r\n\r\n        console.log(\"updated to \", input)\r\n\r\n        let LetterRegex = new RegExp(\"[A-Za-z\\\\s]{1,99}\", \"gmi\");\r\n\r\n        outputWithFormula = output.map((element) => {\r\n            if (element.match(LetterRegex)) {\r\n                element = '\"' + element + '\"';\r\n                return element\r\n            } else {\r\n                return element\r\n            }\r\n        }\r\n        )\r\n        console.log(\"updated to \", output)\r\n\r\n\r\n        // if (GSheetapplyFormula === \"reverse\") {\r\n        let outputWithFormulaReverse = \"=isna(match(\" + GSheetCellValue + \",{\" + outputWithFormula + \"},0))\";\r\n        // } else {\r\n        outputWithFormula = \"=match(\" + GSheetCellValue + \",{\" + outputWithFormula + \"},0)\";\r\n        // }\r\n\r\n        // if (returnType) {\r\n        let outputList = output.join(\",\")\r\n        // } else {\r\n        let outputCsv = output.join(\"\\n\")\r\n        // }\r\n\r\n        this.setState({\r\n            output: outputList,\r\n            outputCsv: outputCsv,\r\n            outputWithFormula: outputWithFormula,\r\n            outputWithFormulaReverse: outputWithFormulaReverse\r\n        });\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Container >\r\n                <Row>\r\n\r\n\r\n                    <Col lg=\"9\" xl=\"9\" md=\"9\" sm=\"12\">\r\n                        <Jumbotron className=\"mainPanel panel\">\r\n                            <Row>\r\n\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    <TextArea\r\n                                        name=\"Input\"\r\n                                        value={this.state.input}\r\n                                        rows=\"12\"\r\n                                        onChange={this.updateInputValue}\r\n                                        styler={{ fontSize: this.state.fontSize }}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    {this.state.GSheetapplyFormula === \"false\" && this.state.GSheetFormulaFlag.indexOf(\"rcm\") === -1 &&\r\n                                        <TextArea\r\n                                            name=\"Output\"\r\n                                            value={this.state.output}\r\n                                            rows=\"12\"\r\n                                            styler={{ fontSize: this.state.fontSize }}\r\n                                            />}\r\n\r\n                                    {this.state.GSheetapplyFormula === \"false\" && this.state.GSheetFormulaFlag.indexOf(\"rcm\") !== -1 &&\r\n                                        <TextArea\r\n                                            name=\"Output\"\r\n                                            value={this.state.outputCsv}\r\n                                            rows=\"12\"\r\n                                            styler={{ fontSize: this.state.fontSize }}\r\n                                            />}\r\n\r\n                                    {this.state.GSheetapplyFormula === \"normal\" &&\r\n                                        <TextArea\r\n                                            name=\"Output\"\r\n                                            value={this.state.outputWithFormula}\r\n                                            rows=\"12\"\r\n                                            styler={{ fontSize: this.state.fontSize }}\r\n                                            />}\r\n\r\n                                    {this.state.GSheetapplyFormula === \"reverse\" &&\r\n                                        <TextArea\r\n                                            name=\"Output\"\r\n                                            value={this.state.outputWithFormulaReverse}\r\n                                            rows=\"12\"\r\n                                            styler={{ fontSize: this.state.fontSize }}\r\n                                            />}\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <label>First cell under Header</label>\r\n                            <br />\r\n                            <ButtonGroup size=\"sm\" className=\"buttonGroup\">\r\n                            <input\r\n                                name=\"First Cell Under Header\"\r\n                                value={this.state.GSheetCellValue}\r\n                                onChange={this.updateGSheetCellValue}\r\n                            />\r\n                            <Button\r\n                                color=\"primary\"\r\n                                style={{ fontSize: 11, marginLeft: \"5px\" }}\r\n                                onClick={() => this.launchFunction()}\r\n                            >Run</Button>\r\n                            <Button\r\n                                color=\"danger\"\r\n                                style={{ fontSize: 11, marginLeft: \"5px\" }}\r\n                                onClick={() => this.resetAll()}\r\n                            >Reset</Button>\r\n                            </ButtonGroup>\r\n\r\n                            <ButtonGroup size=\"sm\" className=\"buttonGroup float-right\">\r\n                                <label style={{ paddingRight: \"10px\", textAlign: \"center\", marginTop: \"5px\" }}>Font Size: </label>\r\n                                <Button\r\n                                    bsSize=\"\"\r\n                                    name=\"fontSizeChange0\"\r\n                                    onClick={() => this.fontSizeChange(0)}\r\n                                    color=\"secondary\"\r\n                                >\r\n                                    -\r\n                                </Button>\r\n                                <Button\r\n                                    name=\"fontSizeChange1\"\r\n                                    color=\"secondary\"\r\n                                    onClick={() => this.fontSizeChange(1)}\r\n                                >\r\n                                    +</Button>\r\n                            </ButtonGroup>\r\n                            <br />\r\n                            <br />\r\n                            <Card1\r\n                                text={\r\n                                    <div>\r\n                                        <p style={{ fontSize: \"12px\" }}>This tool wraps inputs in the =Match Gsheet Formula. Using Gsheet's filters we can use this to only see rows with the desired values.</p>\r\n                                        <p style={{ fontSize: \"12px\" }}><span style={{ fontSize: \"12px\", fontWeight: \"Bold\" }}> Unless \"Split at xyz\" is selected </span>every space or new line is regarded as a new input</p>\r\n                                    </div>}\r\n                            />\r\n\r\n                        </Jumbotron>\r\n                    </Col>\r\n\r\n                    <Col lg=\"3\" xl=\"3\" md=\"3\" sm=\"12\">\r\n                        <Jumbotron className=\"sidePanel panel\" >\r\n                            <Col lg=\"12\" xl=\"12\" md=\"12\" sm=\"12\">\r\n                                <h5>Gsheet Formatter</h5>\r\n                            </Col>\r\n                            <br />\r\n                            <label style={{ fontSize: 14, borderBottom: \"solid black 1px\" }}>Dynamic Options:</label>\r\n                            <ButtonGroup size=\"sm\" className=\"buttonGroup\" >\r\n                                <Button\r\n                                    color={this.state.GSheetapplyFormula === \"normal\" ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateGSheetapplyFormula(\"normal\")}\r\n                                    style={{ fontSize: 10, border: \"2px black solid\", flexWrap: \"wrap\" }}\r\n                                >\r\n                                    Match Formula</Button>\r\n                                <Button\r\n                                    color={this.state.GSheetapplyFormula === \"reverse\" ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateGSheetapplyFormula(\"reverse\")}\r\n                                    style={{ fontSize: 10, border: \"2px black solid\", flexWrap: \"wrap\" }}\r\n                                >\r\n                                    Is not Match Formula</Button>\r\n                                <Button\r\n                                    color={this.state.GSheetapplyFormula === \"false\" ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateGSheetapplyFormula(\"false\")}\r\n                                    style={{ fontSize: 10, border: \"2px black solid\", flexWrap: \"wrap\" }}\r\n                                >\r\n                                    No Formula</Button>\r\n                            </ButtonGroup>\r\n\r\n\r\n                            <ButtonGroup size=\"sm\" className=\"buttonGroup\">\r\n                                <label style={{ fontSize: 14 }}>If No formula - return as:</label>\r\n                                <Button\r\n                                    color={this.state.GSheetFormulaFlag.indexOf(\"rl\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"rl\")}\r\n                                    style={{ fontSize: 10, border: \"2px black solid\" }}\r\n                                >\r\n                                    List</Button>\r\n                                <Button\r\n                                    color={this.state.GSheetFormulaFlag.indexOf(\"rcm\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"rcm\")}\r\n                                    style={{ fontSize: 10, border: \"2px black solid\" }}\r\n                                >\r\n                                    CSV</Button>\r\n                            </ButtonGroup>\r\n                            <br />\r\n                            <br />\r\n                            <label style={{ fontSize: 14, borderBottom: \"solid black 1px\" }}>Options that require re-run:</label>\r\n                            <ButtonGroup size=\"sm\" className=\"buttonGroup\">\r\n                                <Button\r\n                                    color={this.state.GSheetFormulaFlag.indexOf(\"rd\") !== -1 ? \"success\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"rd\")}\r\n                                    style={{ fontSize: 10, border: \"2px black solid\" }}\r\n                                >\r\n                                    Remove Duplicates</Button>\r\n                                <Button\r\n                                    color={this.state.GSheetFormulaFlag.indexOf(\"nl\") !== -1 ? \"success\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"nl\")}\r\n                                    style={{ fontSize: 10, border: \"2px black solid\" }}\r\n                                >\r\n                                    Split at New Lines</Button>\r\n                                <Button\r\n                                    color={this.state.GSheetFormulaFlag.indexOf(\"cs\") !== -1 ? \"success\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"cs\")}\r\n                                    style={{ fontSize: 10, border: \"2px black solid\" }}\r\n                                >\r\n                                    Split at Commas</Button>\r\n                            </ButtonGroup>\r\n\r\n                        </Jumbotron>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(GSheetFormatter)\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Navbar1 from './components/subComponents/Navbar1';\n\nimport './App.css';\nimport {\n  Route,\n  NavLink,\n  HashRouter,\n  Switch,\n  BrowserRouter\n} from \"react-router-dom\";\nimport HomePage from './components/HomePage';\nimport Lookup from './components/Lookup';\nimport HCPC from './components/HCPC';\nimport Formatter from './components/Formatter';\nimport MasterPAFormatter from './components/MasterPAFormatter';\nimport GSheetFormatter from './components/GSheetFormatter';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <div>\n      <Navbar1 \n      Home={<NavLink to=\"/\" style={{color: \"black\",textDecoration: 'none'}}>Home</NavLink>}\n      lookupLink={<NavLink to=\"/Lookup\">Lookup</NavLink>}\n      HCPC={<NavLink to=\"/HCPC\">HCPC Range Expander</NavLink>}\n      Policies={<NavLink to=\"/Formatter\">Policies</NavLink>}\n      GSheet={<NavLink to=\"/GSheetFormatter\">GSheet</NavLink>}\n      MasterPA={<NavLink to=\"/MasterPAFormatter\">MasterPA</NavLink>}\n      />\n        <div className=\"content\">\n          <Route exact path=\"/\" render={(props) => <HomePage \n\n          lookupLink={<NavLink style={{color:\"white\"}} to=\"/Lookup\">Lookup</NavLink>}\n\n          HCPC={<NavLink style={{color:\"white\"}} to=\"/HCPC\">HCPC Range Expander</NavLink>}\n\n          Policies={<NavLink  style={{color:\"white\"}} to=\"/Formatter\">Policies</NavLink>}\n\n          GSheet={<NavLink  style={{color:\"white\"}} to=\"/GSheetFormatter\">GSheet</NavLink>}\n\n          MasterPA={<NavLink  style={{color:\"white\"}} to=\"/MasterPAFormatter\">MasterPA</NavLink>}\n\n          />} />\n          <Route exact path=\"/Lookup\" render={(props) => <Lookup />} />\n          <Route exact path=\"/HCPC\" render={(props) => <HCPC />} />\n          <Route exact path=\"/Formatter\" render={(props) => <Formatter />} />\n          <Route exact path=\"/MasterPAFormatter\" render={(props) => <MasterPAFormatter />} />\n          <Route exact path=\"/GSheetFormatter\" render={(props) => <GSheetFormatter />} />\n        </div>\n      </div>\n\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}