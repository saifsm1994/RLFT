{"version":3,"sources":["reportWebVitals.js","components/subComponents/TextArea.js","components/subComponents/TextAreaQuery.js","components/subComponents/Card1.js","components/subComponents/TextAreaQuery2.js","components/Lookup.js","components/subComponents/Navbar1.js","components/HomePage.js","components/subComponents/TextAreaJodit.js","components/LookupAdvanced.js","components/HCPC.js","components/Formatter.js","components/MasterPAFormatter.js","components/GSheetFormatter.js","components/LookupHighlight.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","TextArea","FormGroup","Label","for","this","props","name","Input","type","id","rows","value","onChange","style","fontSize","Component","TextAreaQuery","Form","Row","Col","lg","xl","md","sm","bsSize","Button","buttonName","onClick","buttonOnClick","color","hidden","buttonText","Card1","Card","body","heading","CardTitle","tag","text","CardText","linkName","link","TextAreaQuery2","ButtonGroup","size","className","buttonName2","buttonOnClick2","buttonText2","buttonName3","buttonOnClick3","borderLeft","buttonText3","HCPCandFilter","updateInputValue","bind","updateSearchValue","setName","updatesearchStringFlagsValue","updateRegexFlagsValue","setSearchValue","updateSearchType","saveStateToCookie","saveSearchesToSearchesCookie","loadSearchFromSavedSearches","pullStateFromCookie","hcpcManager","resetAll","state","input","output","noCountOutput","csvOutput","csvDedupeOutput","searchType","searchValue","searchStringFlags","searchRegexFlags","Searches","localStorage","removeItem","setState","num","setTimeout","cookieData","setItem","JSON","stringify","val","nameValue","undefined","alert","getItem","parse","fetchedCookie","Object","keys","forEach","element","fetchedCookie2","fetchedSearch","e","preventDefault","target","console","log","indexOf","replace","NumRegex","RegExp","LetterRegex","HCPCRegexRange","match","letters","numbers","store","length","i","push","join","caseSensitive","search","split","Array","from","Set","matcher2","matcher","test","exec","parseInt","index","isArray","sort","b","uniqueOutput","counts","countOutput","pos","map","toLowerCase","Container","Helmet","charSet","Jumbotron","border","marginLeft","withRouter","Navbar1","useState","isOpen","setIsOpen","Navbar","light","expand","NavbarBrand","Home","NavbarToggler","Collapse","navbar","Nav","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","lookupLink","HCPC","LookupLinkHighlight","lookupLinkAdvanced","Policies","MasterPA","GSheet","reset","NavbarText","HomePage","TextAreaJodit","setRef","jodit","config","readonly","height","toolbar","font","content","LookupAdvanced","updateSearchValueEnd","searchValueEnd","fetchedcookie4","searchEnd","term","test2","styler","Formatter","launchFormatter","rulesManager","toggleexperimental","fontSizeChange","saveFontCookie","loadFontCookie","experimentalOutput","experimental","Number","isInteger","inputer","result","result2","smallCapsStartingLine","obviousBulletPoints","letterBulletPoint","numberBulletPoint","RomanBulletPoint","doubleLine","commaLine","charAt","substring","placeholder","paddingRight","textAlign","marginTop","MasterPAFormatter","headerManager","toggleDoubleLine","noDoubleLineOutput","headingsRegex","wrongHeadingsRegex","bulletsRegex","noDoubleBulletRegex","CapsHeadings","newLine","trim","GSheetFormatter","updateGSheetCellValue","updateGSheetapplyFormula","updateRegexFlagsValue2","launchFunction","outputCsv","outputWithFormula","outputWithFormulaReverse","GSheetCellValue","GSheetFormulaFlag","GSheetFormulaFlag2","GSheetapplyFormula","removeDuplicatesFlag","splitAtNewLinesFlag","CommaSepListFlag","rege","filter","n","outputList","fontWeight","borderBottom","flexWrap","LookupHighlight","updatesearchValueHighlight","searchValueHighlight","fetchedcookie3","searchHighlight","subMatch","newMatch","replaceAll","ReactDOM","render","StrictMode","to","textDecoration","exact","path","Lookup","document","getElementById"],"mappings":"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","file":"static/js/main.7ab6e43d.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Component } from 'react';\r\nimport { FormGroup, Label, Input } from 'reactstrap';\r\n\r\n\r\nclass TextArea extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <FormGroup>\r\n                    <Label for={this.props.name}>{this.props.name}</Label>\r\n                    <Input \r\n                    type=\"textarea\" \r\n                    name={this.props.name}\r\n                    id={this.props.name} \r\n                    rows={this.props.rows} \r\n                    value={this.props.value} \r\n                    onChange={this.props.onChange}\r\n                    style={{\"fontSize\": this.props.fontSize || \"15px\"}}\r\n                    />\r\n                </FormGroup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TextArea;","import React, { Component } from 'react';\r\nimport { Button, Col, Row, FormGroup, Form, Label, Input,CardText } from 'reactstrap';\r\n\r\n\r\nclass TextAreaQuery extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form  >\r\n                    <FormGroup >\r\n                        <Label for={this.props.name}>{this.props.name}</Label>\r\n                        <Row>\r\n                            <Col lg=\"10\" xl=\"10\" md=\"10\" sm=\"10\">\r\n                                <Input\r\n                                    bsSize=\"sm\"\r\n                                    type=\"textarea\"\r\n                                    name={this.props.name}\r\n                                    id={this.props.name}\r\n                                    rows={this.props.rows}\r\n                                    value={this.props.value}\r\n                                    onChange={this.props.onChange}\r\n                                />\r\n                            </Col>\r\n                            <Col lg=\"1\" xl=\"1\" md=\"1\" sm=\"1\">\r\n                               <Button\r\n                                    bsSize=\"sm\"\r\n                                    name={this.props.buttonName}\r\n                                    onClick={this.props.buttonOnClick}\r\n                                    color=\"success\"\r\n                                    hidden={ !this.props.buttonText }\r\n                                >\r\n                                    {this.props.buttonText}\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                    </FormGroup>\r\n\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TextAreaQuery;","import React from 'react';\r\nimport { Card, Button, CardTitle, CardText } from 'reactstrap';\r\n\r\nconst Card1 = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <Card body>\r\n    { props.heading &&  <CardTitle tag=\"h5\">{props.heading}</CardTitle> }\r\n    { props.text && <CardText>{props.text}</CardText>}\r\n    { props.linkName && <Button >Go to {props.link}</Button>}\r\n            </Card>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card1;","import React, { Component } from 'react';\r\nimport { Button, Col, Row, FormGroup, Form, Label, Input, ButtonGroup } from 'reactstrap';\r\n\r\n\r\nclass TextAreaQuery2 extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form  >\r\n                    <FormGroup >\r\n                        <Label for={this.props.name}>{this.props.name}</Label>\r\n                        <Row>\r\n                            <Col lg=\"12\" xl=\"12\" md=\"12\" sm=\"12\">\r\n                                <Input\r\n                                    bsSize=\"sm\"\r\n                                    type=\"textarea\"\r\n                                    name={this.props.name}\r\n                                    id={this.props.name}\r\n                                    rows={this.props.rows}\r\n                                    value={this.props.value}\r\n                                    onChange={this.props.onChange}\r\n                                />\r\n                            </Col>\r\n                            <Col lg=\"12\" xl=\"12\" md=\"12\" sm=\"12\">\r\n\r\n                                <ButtonGroup size=\"sm\" className=\"buttonGroup\">\r\n                                <Button\r\n                                    name={this.props.buttonName}\r\n                                    onClick={this.props.buttonOnClick}\r\n                                    color=\"success\"\r\n                                >\r\n                                    {this.props.buttonText}\r\n                                </Button>\r\n                                <Button\r\n                                    name={this.props.buttonName2}\r\n                                    onClick={this.props.buttonOnClick2}\r\n                                    color=\"secondary\"\r\n                                >\r\n                                    {this.props.buttonText2}\r\n                                </Button>\r\n                                <Button\r\n                                    name={this.props.buttonName3}\r\n                                    onClick={this.props.buttonOnClick3}\r\n                                    color=\"danger\"\r\n                                    style={{borderLeft:\"white 1px solid\"}}\r\n                                >\r\n                                    {this.props.buttonText3}\r\n                                </Button>\r\n                            </ButtonGroup>\r\n\r\n                            </Col>\r\n                        </Row>\r\n\r\n                    </FormGroup>\r\n\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TextAreaQuery2;","import React, { Component } from 'react';\r\nimport { Jumbotron, Button, Row, Container, Col, ButtonGroup } from 'reactstrap';\r\nimport { withRouter } from \"react-router\";\r\nimport './Universal.css';\r\nimport TextArea from './subComponents/TextArea';\r\nimport TextAreaQuery from './subComponents/TextAreaQuery';\r\nimport Card1 from './subComponents/Card1';\r\nimport TextAreaQuery2 from './subComponents/TextAreaQuery2';\r\nimport {Helmet} from \"react-helmet\";\r\n\r\n\r\nclass HCPCandFilter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateInputValue = this.updateInputValue.bind(this);\r\n        this.updateSearchValue = this.updateSearchValue.bind(this);\r\n        this.setName = this.setName.bind(this);\r\n        this.updatesearchStringFlagsValue = this.updatesearchStringFlagsValue.bind(this);\r\n        this.updateRegexFlagsValue = this.updateRegexFlagsValue.bind(this);\r\n        this.setSearchValue = this.setSearchValue.bind(this);\r\n        this.updateSearchType = this.updateSearchType.bind(this);\r\n        this.saveStateToCookie = this.saveStateToCookie.bind(this);\r\n        this.saveSearchesToSearchesCookie = this.saveSearchesToSearchesCookie.bind(this);\r\n        this.loadSearchFromSavedSearches = this.loadSearchFromSavedSearches.bind(this);\r\n        this.pullStateFromCookie = this.pullStateFromCookie.bind(this);\r\n        this.hcpcManager = this.hcpcManager.bind(this);\r\n        this.resetAll = this.resetAll.bind(this);\r\n\r\n\r\n        this.state = {\r\n            input: \"Input Placeholder\",\r\n            output: \"Output Placeholder\",\r\n            noCountOutput: \"Output Placeholder\",\r\n            csvOutput: \"Output Placeholder\",\r\n            csvDedupeOutput: \"Output Placeholder\",\r\n            searchType: \"string\",\r\n            searchValue: \"Placeholder\",\r\n            searchStringFlags: \"c\",\r\n            searchRegexFlags: \"gmi\",\r\n            Searches: {}\r\n        };\r\n\r\n    }\r\n\r\n    resetAll() {\r\n        localStorage.removeItem(\"cookie2\")\r\n\r\n\r\n        this.setState({\r\n            input: \"Input Placeholder\",\r\n            output: \"Output Placeholder\",\r\n            noCountOutput: \"Output Placeholder\",\r\n            csvOutput: \"Output Placeholder\",\r\n            csvDedupeOutput: \"Output Placeholder\",\r\n            searchType: \"string\",\r\n            searchValue: \"Placeholder\",\r\n            searchStringFlags: \"c\",\r\n            searchRegexFlags: \"gmi\",\r\n            name: \"\"\r\n        }, this.saveStateToCookie(100));\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.pullStateFromCookie()\r\n    }\r\n\r\n\r\n    saveStateToCookie(num) {\r\n        if (num) { } else { num = 0 }\r\n        setTimeout(() => {\r\n            let cookieData = {};\r\n            // let name = this.state.name ? this.state.name : \"\"; ;\r\n            // let input= this.state.input ? this.state.input : \"Input Placeholder\";\r\n            // let output= this.state.output ? this.state.output :\"Output Placeholder\";\r\n            // let noCountOutput= this.state.noCountOutput ? this.state.noCountOutput :\"Output Placeholder\";\r\n            // csvOutput:  \"Output Placeholder\",\r\n            // csvDedupeOutput:  \"Output Placeholder\",\r\n            let searchType = this.state.searchType ? this.state.searchType : \"string\";\r\n            let searchValue = this.state.searchValue ? this.state.searchValue : \"([A-CE-Z][0-9]{4})\";\r\n            let searchStringFlags = this.state.searchStringFlags ? this.state.searchStringFlags : \"ci\";\r\n            let searchRegexFlags = this.state.searchRegexFlags ? this.state.searchRegexFlags : \"gmi\";\r\n\r\n            cookieData.searchType = searchType;\r\n            cookieData.searchValue = searchValue;\r\n            cookieData.searchStringFlags = searchStringFlags;\r\n            cookieData.searchRegexFlags = searchRegexFlags;\r\n\r\n\r\n            localStorage.setItem('cookie2', JSON.stringify(cookieData));\r\n        }, num);\r\n\r\n    }\r\n\r\n    saveSearchesToSearchesCookie(val) {\r\n        //get the current proposed name\r\n        //save the current state to that name\r\n        //remove the searches subObject to prevent duplicates\r\n        //The final cookie will be a object like {name: state, name2: state2, Searches: null}\r\n\r\n        let cookieData = {};\r\n        let name = this.state.name;\r\n        // let input= this.state.input ? this.state.input : \"Input Placeholder\";\r\n        // let output= this.state.output ? this.state.output :\"Output Placeholder\";\r\n        // let noCountOutput= this.state.noCountOutput ? this.state.noCountOutput :\"Output Placeholder\";\r\n        // csvOutput:  \"Output Placeholder\",\r\n        // csvDedupeOutput:  \"Output Placeholder\",\r\n        let searchType = this.state.searchType ? this.state.searchType : \"string\";\r\n        let searchValue = this.state.searchValue ? this.state.searchValue : \"([A-CE-Z][0-9]{4})\";\r\n        let searchStringFlags = this.state.searchStringFlags ? this.state.searchStringFlags : \"ci\";\r\n        let searchRegexFlags = this.state.searchRegexFlags ? this.state.searchRegexFlags : \"gmi\";\r\n        let nameValue = this.state.name ? this.state.name : \"\";\r\n\r\n        if (name === null || name === undefined) { return } else {\r\n            alert(\"Current search saved as \" + name)\r\n        }\r\n\r\n        if (localStorage.getItem('searches5')) {\r\n            cookieData = JSON.parse(localStorage.getItem('searches5'));\r\n        }\r\n\r\n        cookieData[name] = {};\r\n        cookieData[name].searchType = searchType;\r\n        cookieData[name].searchValue = searchValue;\r\n        cookieData[name].searchStringFlags = searchStringFlags;\r\n        cookieData[name].searchRegexFlags = searchRegexFlags;\r\n        cookieData[name].name = nameValue;\r\n        //unsure if this one does anything except eat up storage, replacing.\r\n        // cookieData[name] = this.state;\r\n\r\n\r\n\r\n\r\n        localStorage.setItem('searches5', JSON.stringify(cookieData));\r\n        this.setState({ Searches: cookieData });\r\n\r\n        if (val) {\r\n            if (cookieData[this.state.name]) {\r\n                delete cookieData[this.state.name];\r\n                localStorage.setItem('searches5', JSON.stringify(cookieData));\r\n                this.setState({ Searches: cookieData })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    pullStateFromCookie() {\r\n        if (localStorage.getItem('cookie2')) {\r\n            let fetchedCookie = JSON.parse(localStorage.getItem('cookie2'));\r\n            Object.keys(fetchedCookie).forEach(element => {\r\n                if (element === \"name\") { } else {\r\n                    this.setState({\r\n                        [element]: fetchedCookie[element]\r\n                    })\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n        if (localStorage.getItem('searches5')) {\r\n            let fetchedCookie2 = JSON.parse(localStorage.getItem('searches5'));\r\n            this.setState({\r\n                Searches: fetchedCookie2\r\n            })\r\n        }\r\n    }\r\n\r\n    loadSearchFromSavedSearches(val) {\r\n        if (this.state.Searches && this.state.Searches[val]) {\r\n            let fetchedSearch = this.state.Searches[val];\r\n            Object.keys(fetchedSearch).forEach(element => {\r\n                if (element !== \"Searches\" && element !== \"input\" && element !== \"output\" && element !== \"noCountOutput\" && element !== \"csvOutput\" && element !== \"csvDedupeOutput\") {\r\n                    this.setState({\r\n                        [element]: fetchedSearch[element]\r\n                    })\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    updateInputValue(e) {\r\n        e.preventDefault();\r\n        this.setState({ input: e.target.value });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    updateSearchValue(e) {\r\n        e.preventDefault();\r\n        this.setState({ searchValue: e.target.value });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    setName(e) {\r\n        e.preventDefault();\r\n        this.setState({ name: e.target.value });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    updatesearchStringFlagsValue(val) {\r\n        // console.log(\"calling searchStringFlags with \" + val)\r\n        // let searchStringFlags = this.state.searchStringFlags;\r\n\r\n        this.setState({ searchStringFlags: val });\r\n\r\n\r\n        // if (searchStringFlags.indexOf(val) !== -1) {\r\n        //     this.setState({ searchStringFlags: searchStringFlags.replace(val, \"\") });\r\n        // } else {\r\n        //     this.setState({ searchStringFlags: searchStringFlags + val });\r\n        // }\r\n\r\n        console.log(\"new value is now \" + this.state.searchStringFlags)\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    updateRegexFlagsValue(val) {\r\n        // console.log(\"calling updateRegexFlagsValue with \" + val)\r\n        let searchRegexFlags = this.state.searchRegexFlags;\r\n\r\n        if (searchRegexFlags.indexOf(val) !== -1) {\r\n            this.setState({ searchRegexFlags: searchRegexFlags.replace(val, \"\") });\r\n        } else {\r\n            this.setState({ searchRegexFlags: searchRegexFlags + val });\r\n        }\r\n\r\n        console.log(\"new value is now \" + this.state.searchRegexFlags)\r\n        this.saveStateToCookie()\r\n\r\n    }\r\n\r\n    updateSearchType(val) {\r\n\r\n        this.setState({ searchType: val });\r\n\r\n        console.log(\"new value is now \" + this.state.searchType)\r\n        this.saveStateToCookie()\r\n\r\n    }\r\n\r\n\r\n    hcpcManager(input) { // expands all hcpc ranges in document\r\n        let NumRegex = new RegExp(\"\\\\d{4}\", \"gmi\");\r\n        let LetterRegex = new RegExp(\"[A-CE-Z]\", \"gmi\");\r\n        let HCPCRegexRange = new RegExp(\"([A-CE-Z][0-9]{4}[\\\\t]{0,3}[-—]{0,2}(through){0,1}(to){0,1}[\\\\t]{0,3}[A-CE-Z][0-9]{4})\", \"gmi\");\r\n        console.log(\"range matches include\", input.match(HCPCRegexRange))\r\n\r\n        let result = input.replace(HCPCRegexRange, function (element) {\r\n\r\n            let letters = element.match(LetterRegex);\r\n            let numbers = element.match(NumRegex);\r\n            let store = [];\r\n\r\n            if (letters.length !== 2 | numbers.length !== 2 | numbers[0] > numbers[1]) { alert(\"failed match\") } else {\r\n                let i = numbers[0]\r\n                for (i; i <= numbers[1]; i++) {\r\n                    store.push(letters[0] + i)\r\n                }\r\n            }\r\n\r\n            store = store.join(\",\")\r\n            return store\r\n        });\r\n\r\n        return result\r\n\r\n\r\n\r\n    }\r\n\r\n    setSearchValue() {\r\n        let input = this.state.input;\r\n        let searchRegexFlags = this.state.searchRegexFlags;\r\n        let search = this.state.searchValue;\r\n        let searchType = this.state.searchType;\r\n        let caseSensitive;\r\n\r\n\r\n        input = this.hcpcManager(input);\r\n\r\n        if (searchRegexFlags.indexOf(\"i\") === -1) { // if case sensitive true  - no i flag\r\n            caseSensitive = true\r\n        } else {\r\n            caseSensitive = false\r\n        }\r\n\r\n        //if the regex option is chosen search as is - assign to array for the forEach loop below\r\n        //if the list option is chosen split into an array and regex search each element\r\n        if (searchType === \"string\") {\r\n            search = search.split(\",\");\r\n            search = Array.from(new Set(search));\r\n        } else {\r\n            search = [search]\r\n        }\r\n        let output = [];\r\n        let matcher2 = [];\r\n\r\n        search.forEach(element => {\r\n            // update this to keep a track of the specific order of matches\r\n            let match;\r\n            let matcher = []; // input.match(new RegExp(element, searchRegexFlags))\r\n            let test = new RegExp(element, searchRegexFlags);\r\n            let i = 0\r\n            while ((match = test.exec(input)) != null && i < 19999) {\r\n                matcher.push([match[0], parseInt(match.index)])\r\n                i++\r\n            }\r\n\r\n            //if no matches\r\n            if (matcher === null) {\r\n                this.setState({ output: \"No Matches\" });\r\n                this.saveStateToCookie()\r\n                return\r\n            }\r\n            matcher2 = [...matcher2, ...matcher]\r\n        }\r\n        )\r\n\r\n        console.log(\"matcher2\", matcher2)\r\n\r\n        if (matcher2.length >= 1 && Array.isArray(matcher2)) {\r\n            // matcher = matcher.split(\",\") \r\n            matcher2 = matcher2.sort(([a, b], [c, d]) => b - d);\r\n            matcher2.forEach(element => {\r\n                console.log(\"matcher32\", element)\r\n                output = [...output, element[0]]\r\n            });\r\n\r\n        }\r\n\r\n\r\n\r\n        let noCountOutput = output.join(\"\\n\");\r\n        let csvOutput = output.join(\",\");\r\n\r\n        let uniqueOutput = [];\r\n        let counts = [];\r\n        let countOutput = [];\r\n        let csvDedupeOutput = [];\r\n\r\n        output.forEach(element => {\r\n            if (!caseSensitive) {\r\n                console.log(\"element,\", element)\r\n                let lowerCaseUniqueOutput = uniqueOutput.map(element => element.toLowerCase())\r\n                let pos = lowerCaseUniqueOutput.indexOf(element.toLowerCase());\r\n                if (pos === -1) {\r\n                    uniqueOutput.push(element)\r\n                    counts.push(1)\r\n                } else {\r\n                    counts[pos] = counts[pos] + 1;\r\n                }\r\n\r\n            } else {\r\n                let pos = uniqueOutput.indexOf(element);\r\n                if (pos === -1) {\r\n                    uniqueOutput.push(element)\r\n                    counts.push(1)\r\n                } else {\r\n                    counts[pos] = counts[pos] + 1;\r\n                }\r\n            }\r\n        });\r\n\r\n        uniqueOutput.forEach((element, index) => {\r\n            countOutput.push(element + \" - \" + counts[index] + \" times\");\r\n            csvDedupeOutput.push(element);\r\n        });\r\n\r\n\r\n\r\n        this.setState({\r\n            output: countOutput.join(\"\\n\"),\r\n            noCountOutput: noCountOutput,\r\n            csvOutput: csvOutput,\r\n            csvDedupeOutput: csvDedupeOutput.join(\",\")\r\n        });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Container >\r\n                <Helmet>\r\n                    <meta charSet=\"utf-8\" />\r\n                    <title>Lookup</title>\r\n                </Helmet>\r\n                <Row>\r\n\r\n                    <Col lg=\"9\" xl=\"9\" md=\"9\" sm=\"12\">\r\n                        <Jumbotron className=\"mainPanel panel\">\r\n                            <Row>\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    <TextArea\r\n                                        name=\"Input\"\r\n                                        value={this.state.input}\r\n                                        rows=\"18\"\r\n                                        onChange={this.updateInputValue}\r\n\r\n                                    />\r\n                                </Col>\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    {this.state.searchStringFlags.indexOf(\"c\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.noCountOutput}\r\n                                        rows=\"18\"\r\n                                    />}\r\n\r\n                                    {this.state.searchStringFlags.indexOf(\"a\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.output}\r\n                                        rows=\"18\"\r\n                                    />}\r\n\r\n                                    {this.state.searchStringFlags.indexOf(\"s\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.csvDedupeOutput}\r\n                                        rows=\"18\"\r\n                                    />}\r\n\r\n                                    {this.state.searchStringFlags.indexOf(\"h\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.csvOutput}\r\n                                        rows=\"18\"\r\n                                    />}\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <TextAreaQuery\r\n                                name=\"Search String\"\r\n                                value={this.state.searchValue}\r\n                                rows=\"6\"\r\n                                onChange={this.updateSearchValue}\r\n                                buttonOnClick={this.setSearchValue}\r\n                                buttonText=\"Search\"\r\n                            />\r\n\r\n                            <Card1\r\n                                text={<div><p>This tool checks for matches using regex or comma seperated lists of values. Use https://regexr.com/ to build the regex or note that\r\n                                    </p><ul>\r\n                                        <li>\\s means a space</li>\r\n                                        <li>\\n is a new line</li>\r\n                                        <li>\\d is any number</li>\r\n                                        <li>| is an or symbol</li>\r\n                                        <li>Don't include the flags portion of regexes as these are handled by buttons on the right</li>\r\n\r\n                                    </ul></div>}\r\n\r\n\r\n                            />\r\n\r\n\r\n                        </Jumbotron>\r\n                    </Col>\r\n                    <Col lg=\"3\" xl=\"3\" md=\"3\" sm=\"12\">\r\n                        <Jumbotron className=\"sidePanel panel\">\r\n                            <Col lg=\"12\" xl=\"12\" md=\"12\" sm=\"12\">\r\n                                <h5>Lookup</h5>\r\n                            </Col>\r\n                            <ButtonGroup size=\"sm\" className=\"buttonGroup\">\r\n                                <Button\r\n                                    color={this.state.searchRegexFlags.indexOf(\"i\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"i\")}\r\n                                >\r\n                                    Case Insensitive</Button>\r\n                                <Button\r\n                                    color={this.state.searchRegexFlags.indexOf(\"g\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"g\")}\r\n                                >\r\n                                    Global</Button>\r\n                                <Button\r\n                                    color={this.state.searchRegexFlags.indexOf(\"m\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"m\")}\r\n                                >\r\n                                    Multiline</Button>\r\n                            </ButtonGroup>\r\n\r\n\r\n                            <ButtonGroup size=\"sm\" className=\"buttonGroup\">\r\n                                <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"c\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"c\")}\r\n                                >\r\n                                    Show All</Button>\r\n                                <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"a\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"a\")}\r\n                                >\r\n                                    Count</Button>\r\n                                <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"s\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"s\")}\r\n                                >\r\n                                    CSV Trimmed</Button>\r\n                                <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"h\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"h\")}\r\n                                >\r\n                                    CSV</Button>\r\n\r\n                            </ButtonGroup>\r\n\r\n\r\n                            <ButtonGroup size=\"\" className=\"buttonGroup\">\r\n                                <label>Search Type</label>\r\n                                <Button\r\n                                    color={this.state.searchType.indexOf(\"regex\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateSearchType(\"regex\")}\r\n                                >\r\n                                    Regex</Button>\r\n                                <Button\r\n                                    color={this.state.searchType.indexOf(\"string\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateSearchType(\"string\")}\r\n                                >\r\n                                    List</Button>\r\n\r\n                            </ButtonGroup>\r\n\r\n                            <TextAreaQuery2\r\n                                name=\"Save Search\"\r\n                                value={this.state.name}\r\n                                rows=\"1\"\r\n                                onChange={this.setName}\r\n                                buttonOnClick={() => this.saveSearchesToSearchesCookie()}\r\n                                buttonOnClick2={() => this.saveSearchesToSearchesCookie(this.state.name)}\r\n                                buttonOnClick3={() => this.resetAll()}\r\n                                buttonText={\"Save\"}\r\n                                buttonText2={\"Delete\"}\r\n                                buttonText3={\"Reset Page\"}\r\n\r\n                            />\r\n\r\n                            {this.state.Searches && Object.keys(this.state.Searches).map((element) => {\r\n                                return element !== \"Searches\" ?\r\n                                    <Button\r\n                                        onClick={() => this.loadSearchFromSavedSearches(element)}\r\n                                        color=\"primary\"\r\n                                        style={{ border: \"solid white 1px\", marginLeft: \"1px\" }}\r\n                                    >{element}</Button> : \"\"\r\n                            })\r\n                            }\r\n\r\n\r\n\r\n                        </Jumbotron>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(HCPCandFilter)\r\n\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  NavbarText,\r\n  Button\r\n} from 'reactstrap';\r\nimport '../Universal.css'\r\nimport {\r\n  Route,\r\n  NavLink,\r\n  HashRouter,\r\n  Switch,\r\n  BrowserRouter\r\n} from \"react-router-dom\";\r\n\r\nimport Lookup from '../Lookup'\r\n\r\nconst Navbar1 = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color=\"light\" light expand=\"md\">\r\n        <NavbarBrand >\r\n        {props.Home ? props.Home : \"Home\"}\r\n        </NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"mr-auto\" navbar>\r\n\r\n            <UncontrolledDropdown nav inNavbar>\r\n              <DropdownToggle nav caret>\r\n                Lookup Tools\r\n              </DropdownToggle>\r\n              <DropdownMenu right>\r\n                <DropdownItem>\r\n                {props.lookupLink && props.lookupLink}\r\n                </DropdownItem>\r\n\r\n                <DropdownItem >\r\n                {props.HCPC && props.HCPC}\r\n                </DropdownItem>\r\n\r\n                <DropdownItem >\r\n                {props.LookupLinkHighlight && props.LookupLinkHighlight}\r\n                </DropdownItem>\r\n\r\n                \r\n                <DropdownItem >\r\n                {props.lookupLinkAdvanced && props.lookupLinkAdvanced}\r\n                </DropdownItem>\r\n\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n\r\n            <UncontrolledDropdown nav inNavbar>\r\n              <DropdownToggle nav caret>\r\n                Formatters\r\n              </DropdownToggle>\r\n              <DropdownMenu right>\r\n                <DropdownItem>\r\n                {props.Policies && props.Policies}\r\n                </DropdownItem>\r\n                <DropdownItem >\r\n                {props.MasterPA && props.MasterPA}\r\n                </DropdownItem>\r\n                <DropdownItem>\r\n                  {props.GSheet && props.GSheet}\r\n                  </DropdownItem>\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n\r\n          </Nav>\r\n          {props.reset && <Button color=\"danger\" size=\"sm\" onClick={() => props.reset()} className=\"resetButton\">Reset</Button>}\r\n          <NavbarText>By Saif</NavbarText>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar1;","import React, { Component } from 'react';\r\nimport { Jumbotron, Row, Container, Col } from 'reactstrap';\r\nimport { withRouter } from \"react-router\";\r\nimport './Universal.css';\r\nimport Navbar1 from './subComponents/Navbar1';\r\nimport Card1 from './subComponents/Card1';\r\n\r\nclass HomePage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container >\r\n                <Row>\r\n\r\n                    {/* <Col lg=\"9\" xl=\"9\" md=\"9\" sm=\"9\"> */}\r\n                    <Jumbotron className=\"mainPanel panel\">\r\n                        <Row style={{\"marginBottom\": \"10px\"}}>\r\n                            <Col lg=\"4\" xl=\"4\" md=\"4\" sm=\"12\" >\r\n\r\n                                <Card1\r\n                                    heading=\"Go to Lookup Tool\"\r\n                                    text=\"This tool allows you to search for any term in a given list or Regex\"\r\n                                    linkName=\"Lookup Tool\"\r\n                                    link={this.props.lookupLink}\r\n                                />\r\n                            </Col>\r\n\r\n                            <Col lg=\"4\" xl=\"4\" md=\"4\" sm=\"12\">\r\n\r\n                                <Card1\r\n                                    heading=\"Go to ADVANCED Lookup Tool (End)\"\r\n                                    text=\" An experimental page which finds n characters after a match up until an ending keyword - experimental - for advanced users only\"\r\n                                    linkName=\"Lookup Tool - Advanced\"\r\n                                    link={this.props.lookupLinkAdvanced}\r\n                                />\r\n                            </Col>\r\n\r\n                            <Col lg=\"4\" xl=\"4\" md=\"4\" sm=\"12\">\r\n\r\n                                <Card1\r\n                                    heading=\"Go to HCPC Tool\"\r\n                                    text=\"Same as the Lookup Tool, but also expands HCPC Ranges\"\r\n                                    linkName=\"HCPC + Lookup Tool\"\r\n                                    link={this.props.HCPC}\r\n                                />\r\n                            </Col>\r\n\r\n                            </Row><Row>\r\n\r\n                            <Col lg=\"4\" xl=\"4\" md=\"4\" sm=\"12\">\r\n\r\n                                <Card1\r\n                                    heading=\"Go to Gsheet Tool\"\r\n                                    text=\"This tool applies the match formula for Gsheets. It also can be used to convert columsn to csv\"\r\n                                    linkName=\"Gsheet Tool\"\r\n                                    link={this.props.GSheet}\r\n                                />\r\n                            </Col>\r\n\r\n                            <Col lg=\"4\" xl=\"4\" md=\"4\" sm=\"12\">\r\n\r\n                                <Card1\r\n                                    heading=\"Go to Master PA Formatter\"\r\n                                    text=\"This tool takes Master PA text and adds new lines before headings / removes extra line breaks\"\r\n                                    linkName=\"Master PA Formatter\"\r\n                                    link={this.props.MasterPA}\r\n                                />\r\n                            </Col>\r\n\r\n                            <Col lg=\"4\" xl=\"4\" md=\"4\" sm=\"12\">\r\n\r\n                                <Card1\r\n                                    heading=\"Go to Policy Formatter\"\r\n                                    text=\"Experimental Tool which removes extra line breaks from Policy Coverage Criteria, can also add indents\"\r\n                                    linkName=\"Policy Formatter\"\r\n                                    link={this.props.Policies}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                    </Jumbotron>\r\n                    {/* </Col> */}\r\n                    {/* <Col lg=\"3\" xl=\"3\" md=\"3\" sm=\"3\">\r\n                        <Jumbotron className=\"sidePanel panel\">\r\n                        </Jumbotron>\r\n                    </Col> */}\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(HomePage)\r\n","import React, { Component } from 'react';\r\nimport { FormGroup, Label, Input } from 'reactstrap';\r\n\r\nimport 'jodit';\r\nimport 'jodit/build/jodit.min.css';\r\nimport JoditEditor from \"jodit-react\";\r\n\r\n\r\nclass TextAreaJodit extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        \tcontent: 'content',\r\n        }\r\n    }\r\n        /**\r\n     * @property Jodit jodit instance of native Jodit\r\n     */\r\n\tjodit;\r\n\tsetRef = jodit => this.jodit = jodit;\r\n    \r\n    config = {\r\n        readonly: this.props.readonly, // all options from https://xdsoft.net/jodit/doc/\r\n        height: this.props.rows*30,\r\n        toolbar: false,\r\n        style: { font: \"10px Arial\"}\r\n        }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <FormGroup>\r\n                    <Label for={this.props.name}>{this.props.name}</Label>\r\n                    <JoditEditor \r\n                    type=\"textarea\" \r\n                    name={this.props.name}\r\n                    id={this.props.name} \r\n                    rows={this.props.rows} \r\n                    value={this.props.value} \r\n                    onChange={this.props.onChange}\r\n                    config={this.config}\r\n                    />\r\n                </FormGroup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TextAreaJodit;","import React, { Component } from 'react';\r\nimport { Jumbotron, Button, Row, Container, Col, ButtonGroup } from 'reactstrap';\r\nimport { withRouter } from \"react-router\";\r\nimport './Universal.css';\r\nimport TextArea from './subComponents/TextArea';\r\nimport TextAreaQuery from './subComponents/TextAreaQuery';\r\nimport Card1 from './subComponents/Card1';\r\nimport TextAreaQuery2 from './subComponents/TextAreaQuery2';\r\nimport { Helmet } from \"react-helmet\";\r\nimport TextAreaJodit from './subComponents/TextAreaJodit';\r\n\r\n\r\nclass LookupAdvanced extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateInputValue = this.updateInputValue.bind(this);\r\n        this.updateSearchValue = this.updateSearchValue.bind(this);\r\n        this.updateSearchValueEnd = this.updateSearchValueEnd.bind(this);\r\n        this.setName = this.setName.bind(this);\r\n        this.updatesearchStringFlagsValue = this.updatesearchStringFlagsValue.bind(this);\r\n        this.updateRegexFlagsValue = this.updateRegexFlagsValue.bind(this);\r\n        this.setSearchValue = this.setSearchValue.bind(this);\r\n        this.updateSearchType = this.updateSearchType.bind(this);\r\n        this.saveStateToCookie = this.saveStateToCookie.bind(this);\r\n        this.saveSearchesToSearchesCookie = this.saveSearchesToSearchesCookie.bind(this);\r\n        this.loadSearchFromSavedSearches = this.loadSearchFromSavedSearches.bind(this);\r\n        this.pullStateFromCookie = this.pullStateFromCookie.bind(this);\r\n        this.hcpcManager = this.hcpcManager.bind(this);\r\n        this.resetAll = this.resetAll.bind(this);\r\n\r\n\r\n        this.state = {\r\n            input: \"Start placeholder text here End more placeholder text\",\r\n            output: \"Output Placeholder\",\r\n            noCountOutput: \"Output Placeholder\",\r\n            csvOutput: \"Output Placeholder\",\r\n            csvDedupeOutput: \"Output Placeholder\",\r\n            searchType: \"regex\",\r\n            searchValue: \"(start[a-z\\\\s\\\\n0-9]{0,999})\",\r\n            searchValueEnd: \"(end)\",\r\n            searchStringFlags: \"c\",\r\n            searchRegexFlags: \"gmi\",\r\n            Searches: {}\r\n        };\r\n\r\n    }\r\n\r\n    resetAll() {\r\n        localStorage.removeItem(\"cookie4\")\r\n\r\n\r\n        this.setState({\r\n            input: \"START Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's END standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\",\r\n            output: \"Output Placeholder\",\r\n            noCountOutput: \"Output Placeholder\",\r\n            csvOutput: \"Output Placeholder\",\r\n            csvDedupeOutput: \"Output Placeholder\",\r\n            searchType: \"regex\",\r\n            searchValue: \"(start[a-z\\\\s\\\\n0-9]{0,999})\",\r\n            searchValueEnd: \"(end)\",\r\n            searchStringFlags: \"c\",\r\n            searchRegexFlags: \"gmi\",\r\n            name: \"\"\r\n        }, this.saveStateToCookie(100));\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.pullStateFromCookie()\r\n    }\r\n\r\n\r\n    saveStateToCookie(num) {\r\n        if (num) { } else { num = 0 }\r\n        setTimeout(() => {\r\n            let cookieData = {};\r\n            // let name = this.state.name ? this.state.name : \"\"; ;\r\n            // let input= this.state.input ? this.state.input : \"Input Placeholder\";\r\n            // let output= this.state.output ? this.state.output :\"Output Placeholder\";\r\n            // let noCountOutput= this.state.noCountOutput ? this.state.noCountOutput :\"Output Placeholder\";\r\n            // csvOutput:  \"Output Placeholder\",\r\n            // csvDedupeOutput:  \"Output Placeholder\",\r\n            let searchType = this.state.searchType ? this.state.searchType : \"regex\";\r\n            let searchValue = this.state.searchValue ? this.state.searchValue : \"(start[a-z\\\\s\\\\n0-9]{0,999})\";\r\n            let searchValueEnd = this.state.searchValueEnd ? this.state.searchValueEnd : \"(end)\";\r\n            let searchStringFlags = this.state.searchStringFlags ? this.state.searchStringFlags : \"ci\";\r\n            let searchRegexFlags = this.state.searchRegexFlags ? this.state.searchRegexFlags : \"gmi\";\r\n\r\n            cookieData.searchType = searchType;\r\n            cookieData.searchValue = searchValue;\r\n            cookieData.searchValueEnd = searchValueEnd;\r\n            cookieData.searchStringFlags = searchStringFlags;\r\n            cookieData.searchRegexFlags = searchRegexFlags;\r\n\r\n\r\n            localStorage.setItem('cookie4', JSON.stringify(cookieData));\r\n        }, num);\r\n\r\n    }\r\n\r\n    saveSearchesToSearchesCookie(val) {\r\n        //get the current proposed name\r\n        //save the current state to that name\r\n        //remove the searches subObject to prevent duplicates\r\n        //The final cookie will be a object like {name: state, name2: state2, Searches: null}\r\n\r\n        let cookieData = {};\r\n        let name = this.state.name;\r\n        // let input= this.state.input ? this.state.input : \"Input Placeholder\";\r\n        // let output= this.state.output ? this.state.output :\"Output Placeholder\";\r\n        // let noCountOutput= this.state.noCountOutput ? this.state.noCountOutput :\"Output Placeholder\";\r\n        // csvOutput:  \"Output Placeholder\",\r\n        // csvDedupeOutput:  \"Output Placeholder\",\r\n        let searchType = this.state.searchType ? this.state.searchType : \"regex\";\r\n        let searchValue = this.state.searchValue ? this.state.searchValue : \"(start[a-z\\\\s\\\\n0-9]{0,999})\";\r\n        let searchValueEnd = this.state.searchValueEnd ? this.state.searchValueEnd : \"(end)\";\r\n        let searchStringFlags = this.state.searchStringFlags ? this.state.searchStringFlags : \"ci\";\r\n        let searchRegexFlags = this.state.searchRegexFlags ? this.state.searchRegexFlags : \"gmi\";\r\n        let nameValue = this.state.name ? this.state.name : \"\";\r\n\r\n        if (name === null || name === undefined) { return } else {\r\n            alert(\"Current search saved as \" + name)\r\n        }\r\n\r\n        if (localStorage.getItem('Searches4')) {\r\n            cookieData = JSON.parse(localStorage.getItem('Searches4'));\r\n        }\r\n\r\n        cookieData[name] = {};\r\n        cookieData[name].searchType = searchType;\r\n        cookieData[name].searchValue = searchValue;\r\n        cookieData[name].searchValueEnd = searchValueEnd;\r\n        cookieData[name].searchStringFlags = searchStringFlags;\r\n        cookieData[name].searchRegexFlags = searchRegexFlags;\r\n        cookieData[name].name = nameValue;\r\n        //unsure if this one does anything except eat up storage, replacing.\r\n        // cookieData[name] = this.state;\r\n\r\n\r\n\r\n\r\n        localStorage.setItem('Searches4', JSON.stringify(cookieData));\r\n        this.setState({ Searches: cookieData });\r\n\r\n        if (val) {\r\n            if (cookieData[this.state.name]) {\r\n                delete cookieData[this.state.name];\r\n                localStorage.setItem('Searches4', JSON.stringify(cookieData));\r\n                this.setState({ Searches: cookieData })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    pullStateFromCookie() {\r\n        if (localStorage.getItem('cookie4')) {\r\n            let fetchedCookie = JSON.parse(localStorage.getItem('cookie4'));\r\n            Object.keys(fetchedCookie).forEach(element => {\r\n                if (element === \"name\") { } else {\r\n                    this.setState({\r\n                        [element]: fetchedCookie[element]\r\n                    })\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n        if (localStorage.getItem('Searches4')) {\r\n            let fetchedcookie4 = JSON.parse(localStorage.getItem('Searches4'));\r\n            this.setState({\r\n                Searches: fetchedcookie4\r\n            })\r\n        }\r\n    }\r\n\r\n    loadSearchFromSavedSearches(val) {\r\n        if (this.state.Searches && this.state.Searches[val]) {\r\n            let fetchedSearch = this.state.Searches[val];\r\n            // if(fetchedSearch.searchType === \"string\"){\r\n            //     alert(\"could not load - this page only accepts regex search types\")\r\n\r\n            // }else{\r\n            Object.keys(fetchedSearch).forEach(element => {\r\n                if (element !== \"Searches\" && element !== \"input\" && element !== \"output\" && element !== \"noCountOutput\" && element !== \"csvOutput\" && element !== \"csvDedupeOutput\") {\r\n                    this.setState({\r\n                        [element]: fetchedSearch[element]\r\n                    })\r\n                }\r\n            });\r\n            // }\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    updateInputValue(e) {\r\n        e.preventDefault();\r\n        this.setState({ input: e.target.value });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    updateSearchValue(e) {\r\n        e.preventDefault();\r\n        this.setState({ searchValue: e.target.value });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    updateSearchValueEnd(e) {\r\n        e.preventDefault();\r\n        this.setState({ searchValueEnd: e.target.value });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    setName(e) {\r\n        e.preventDefault();\r\n        this.setState({ name: e.target.value });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    updatesearchStringFlagsValue(val) {\r\n        // console.log(\"calling searchStringFlags with \" + val)\r\n        // let searchStringFlags = this.state.searchStringFlags;\r\n\r\n        this.setState({ searchStringFlags: val });\r\n\r\n\r\n        // if (searchStringFlags.indexOf(val) !== -1) {\r\n        //     this.setState({ searchStringFlags: searchStringFlags.replace(val, \"\") });\r\n        // } else {\r\n        //     this.setState({ searchStringFlags: searchStringFlags + val });\r\n        // }\r\n\r\n        // console.log(\"new value is now \" + this.state.searchStringFlags)\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    updateRegexFlagsValue(val) {\r\n        // console.log(\"calling updateRegexFlagsValue with \" + val)\r\n        let searchRegexFlags = this.state.searchRegexFlags;\r\n\r\n        if (searchRegexFlags.indexOf(val) !== -1) {\r\n            this.setState({ searchRegexFlags: searchRegexFlags.replace(val, \"\") });\r\n        } else {\r\n            this.setState({ searchRegexFlags: searchRegexFlags + val });\r\n        }\r\n\r\n        // console.log(\"new value is now \" + this.state.searchRegexFlags)\r\n        this.saveStateToCookie()\r\n\r\n    }\r\n\r\n\r\n    updateSearchType(val) {\r\n\r\n        this.setState({ searchType: val });\r\n\r\n        // console.log(\"new value is now \" + this.state.searchType)\r\n        this.saveStateToCookie()\r\n\r\n    }\r\n\r\n\r\n    hcpcManager(input) { // expands all hcpc ranges in document\r\n        let NumRegex = new RegExp(\"\\\\d{4}\", \"gmi\");\r\n        let LetterRegex = new RegExp(\"[A-CE-Z]\", \"gmi\");\r\n        let HCPCRegexRange = new RegExp(\"([A-CE-Z][0-9]{4}[\\\\t]{0,3}[-—]{0,2}(through){0,1}(to){0,1}[\\\\t]{0,3}[A-CE-Z][0-9]{4})\", \"gmi\");\r\n        // console.log(\"range matches include\", input.match(HCPCRegexRange))\r\n\r\n\r\n\r\n        let result = input.replace(HCPCRegexRange, function (element) {\r\n\r\n            let letters = element.match(LetterRegex);\r\n            let numbers = element.match(NumRegex);\r\n            let store = [];\r\n\r\n            if (letters.length !== 2 | numbers.length !== 2 | numbers[0] > numbers[1]) { alert(\"failed match\") } else {\r\n                let i = numbers[0]\r\n                for (i; i <= numbers[1]; i++) {\r\n                    store.push(letters[0] + i)\r\n                }\r\n            }\r\n\r\n            store = store.join(\",\")\r\n            return store\r\n        });\r\n\r\n        return result\r\n\r\n\r\n\r\n    }\r\n\r\n    setSearchValue() {\r\n        let input = this.state.input;\r\n        let searchRegexFlags = this.state.searchRegexFlags;\r\n        let search = this.state.searchValue;\r\n        let searchEnd = this.state.searchValueEnd;\r\n        let searchType = this.state.searchType;\r\n        let caseSensitive;\r\n\r\n        // console.log(\"setSearchValue, step 0 - input is \", input)\r\n\r\n\r\n        input = this.hcpcManager(input);\r\n\r\n        // console.log(\"setSearchValue, step 1 passed - input is \", input)\r\n\r\n        if (searchRegexFlags.indexOf(\"i\") === -1) { // if case sensitive true  - no i flag\r\n            caseSensitive = true\r\n        } else {\r\n            caseSensitive = false\r\n        }\r\n\r\n        //if the regex option is chosen search as is - assign to array for the forEach loop below\r\n        //if the list option is chosen split into an array and regex search each element\r\n        if (searchType === \"string\") {\r\n            if (searchRegexFlags.indexOf(\"g\") === -1) {\r\n                this.setState({ searchRegexFlags: searchRegexFlags + \"g\" });\r\n                searchRegexFlags = searchRegexFlags + \"g\"\r\n            }\r\n            if (searchRegexFlags.indexOf(\"m\") === -1) {\r\n                this.setState({ searchRegexFlags: searchRegexFlags + \"m\" });\r\n                searchRegexFlags = searchRegexFlags + \"m\"\r\n            }\r\n\r\n            search = search.split(\",\");\r\n            searchEnd = searchEnd.split(\",\");\r\n            search = Array.from(new Set(search));\r\n            searchEnd = Array.from(new Set(searchEnd));\r\n            search = search.map(element => \"(\" + element + \"[a-zA-Z\\\\:\\\\,\\\\.\\\\-\\\\'•=\\\\/\\\\s\\\\n0-9\\\\\\\\ \\\\\\\"]{0,9999})\")\r\n            searchEnd = searchEnd.map(element => \"(\" + element + \")\")\r\n\r\n        } else {\r\n            search = [search]\r\n            searchEnd = [searchEnd]\r\n        }\r\n        let output = [];\r\n        let matcher2 = [];\r\n        // console.log(\"setSearchValue, step 2 passed - input is\" ,input)\r\n\r\n\r\n        search.forEach(element => {\r\n            if (element == null) {\r\n                console.log(\"null search\", element)\r\n                this.setState({ output: \"No Matches\" });\r\n                this.saveStateToCookie()\r\n                return\r\n            } else {\r\n                // console.log(\"not null search\",element)\r\n\r\n                // update this to keep a track of the specific order of matches\r\n                let match;\r\n                let matcher = []; // input.match(new RegExp(element, searchRegexFlags))\r\n                let test = new RegExp(element, searchRegexFlags);\r\n                // console.log(\"not null regex\",test)\r\n                let i = 0\r\n                while ((match = test.exec(input)) != null && i < 500) {\r\n                    console.log(\"match\",match)\r\n                    matcher.push([match[0], parseInt(match.index)])\r\n                    i++\r\n                }\r\n\r\n                //if no matches\r\n                if (matcher === null) {\r\n                    this.setState({ output: \"No Matches\" });\r\n                    this.saveStateToCookie()\r\n                    return\r\n                }\r\n                matcher2 = [...matcher2, ...matcher]\r\n            }\r\n        }\r\n        )\r\n\r\n        // console.log(\"setSearchValue, step 3 passed\", \" matcher2 == \", matcher2)\r\n\r\n        if (matcher2.length >= 1 && Array.isArray(matcher2)) {\r\n            // matcher = matcher.split(\",\") \r\n            matcher2 = matcher2.sort(([a, b], [c, d]) => b - d);\r\n            matcher2.forEach(element => {\r\n                // console.log(\"matcher32\", element)\r\n                if (Array.isArray(searchEnd)) {\r\n                    searchEnd.forEach(term => {\r\n                        let test2 = new RegExp(term, searchRegexFlags);\r\n                        element[0] = element[0].split(test2)[0]\r\n                    });\r\n                    output = [...output, element[0]]\r\n                }\r\n            });\r\n\r\n\r\n\r\n        }\r\n\r\n        // console.log(\"step 4\")\r\n\r\n        let noCountOutput = output.join(\"<br><br>\");\r\n        let csvOutput = output.join(\",\");\r\n\r\n        let uniqueOutput = [];\r\n        let counts = [];\r\n        let countOutput = [];\r\n        let csvDedupeOutput = [];\r\n\r\n        output.forEach(element => {\r\n            if (!caseSensitive) {\r\n                // console.log(\"element,\", element)\r\n                let lowerCaseUniqueOutput = uniqueOutput.map(element => element.toLowerCase())\r\n                let pos = lowerCaseUniqueOutput.indexOf(element.toLowerCase());\r\n                if (pos === -1) {\r\n                    uniqueOutput.push(element)\r\n                    counts.push(1)\r\n                } else {\r\n                    counts[pos] = counts[pos] + 1;\r\n                }\r\n\r\n            } else {\r\n                let pos = uniqueOutput.indexOf(element);\r\n                if (pos === -1) {\r\n                    uniqueOutput.push(element)\r\n                    counts.push(1)\r\n                } else {\r\n                    counts[pos] = counts[pos] + 1;\r\n                }\r\n            }\r\n        });\r\n\r\n        uniqueOutput.forEach((element, index) => {\r\n            countOutput.push(element + \" - \" + counts[index] + \" times\");\r\n            csvDedupeOutput.push(element);\r\n        });\r\n\r\n\r\n\r\n\r\n\r\n        this.setState({\r\n            output: countOutput.join(\"\\n\\n\"),\r\n            noCountOutput: noCountOutput,\r\n            csvOutput: csvOutput,\r\n            csvDedupeOutput: csvDedupeOutput.join(\",\")\r\n        });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Container >\r\n                <Helmet>\r\n                    <meta charSet=\"utf-8\" />\r\n                    <title>Slicing lookup</title>\r\n                </Helmet>\r\n                <Row>\r\n\r\n                    <Col lg=\"9\" xl=\"9\" md=\"9\" sm=\"12\">\r\n                        <Jumbotron className=\"mainPanel panel\">\r\n                            <Row>\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    <TextArea\r\n                                        name=\"Input\"\r\n                                        value={this.state.input}\r\n                                        rows=\"22\"\r\n                                        onChange={this.updateInputValue}\r\n                                        fontSize=\"10px\"\r\n                                    />\r\n                                </Col>\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    {this.state.searchStringFlags.indexOf(\"c\") !== -1 && <TextAreaJodit\r\n                                        name=\"Output\"\r\n                                        value={this.state.noCountOutput}\r\n                                        rows=\"12\"\r\n                                        readonly=\"true\"\r\n                                        styler={{\"fontSize\":\"12px\"}}\r\n                                    />}\r\n\r\n                                    {this.state.searchStringFlags.indexOf(\"a\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.output}\r\n                                        rows=\"18\"\r\n                                    />}\r\n\r\n                                    {this.state.searchStringFlags.indexOf(\"s\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.csvDedupeOutput}\r\n                                        rows=\"18\"\r\n                                    />}\r\n\r\n                                    {this.state.searchStringFlags.indexOf(\"h\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.csvOutput}\r\n                                        rows=\"18\"\r\n                                    />}\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <TextAreaQuery\r\n                                name=\"Search String\"\r\n                                value={this.state.searchValue}\r\n                                rows=\"3\"\r\n                                onChange={this.updateSearchValue}\r\n                                buttonOnClick={this.setSearchValue}\r\n                                buttonText=\"Search\"\r\n                            />\r\n\r\n                            <TextAreaQuery\r\n                                name=\"Search String End\"\r\n                                value={this.state.searchValueEnd}\r\n                                rows=\"3\"\r\n                                onChange={this.updateSearchValueEnd}\r\n                            // buttonOnClick={this.setSearchValueEnd}\r\n                            // buttonText=\"Search\"\r\n                            />\r\n\r\n                            <Card1\r\n                                text={<div><p>A variant of the lookup tool, this page takes 2 regexes or lists of strings and returns any match for the first regex and truncates it where the second regex starts.\r\n                                    </p><ul>\r\n                                        <p style={{ \"fontWeight\": \"900\" }}>Press Reset Page and click search for an example</p>\r\n                                        <li>The first regex matches the keyword 'Start' and 999 characters after it</li>\r\n                                        <li>The second regex matches the keyword 'End'</li>\r\n                                        <li>As a result we get the first 999 characters after Start until End cuts it off early</li>\r\n                                        <li>With the list option these would be Start and End respectively - the list option is also hardcoded to find 9999 characters</li>\r\n\r\n                                        <li>Note: Some features are disabled in list mode</li>\r\n\r\n\r\n                                    </ul></div>}\r\n\r\n\r\n                            />\r\n\r\n\r\n                        </Jumbotron>\r\n                    </Col>\r\n                    <Col lg=\"3\" xl=\"3\" md=\"3\" sm=\"12\">\r\n                        <Jumbotron className=\"sidePanel panel\">\r\n                            <Col lg=\"12\" xl=\"12\" md=\"12\" sm=\"12\">\r\n                                <h5>Slicing Lookup (Advanced)</h5>\r\n                            </Col>\r\n                            <ButtonGroup size=\"sm\" className=\"buttonGroup\">\r\n                                <Button\r\n                                    color={this.state.searchRegexFlags.indexOf(\"i\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"i\")}\r\n                                >\r\n                                    Case Insensitive</Button>\r\n                                <Button\r\n                                    color={this.state.searchRegexFlags.indexOf(\"g\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"g\")}\r\n                                >\r\n                                    Global</Button>\r\n                                <Button\r\n                                    color={this.state.searchRegexFlags.indexOf(\"m\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"m\")}\r\n                                >\r\n                                    Multiline</Button>\r\n                            </ButtonGroup>\r\n\r\n\r\n                            <ButtonGroup size=\"lg\" className=\"buttonGroup\">\r\n                                <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"c\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"c\")}\r\n                                >\r\n                                    Show All</Button>\r\n                                {/* <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"a\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"a\")}\r\n                                >\r\n                                    Count</Button>\r\n                                <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"s\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"s\")}\r\n                                >\r\n                                    CSV Trimmed</Button>\r\n                                <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"h\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"h\")}\r\n                                >\r\n                                    CSV</Button> */}\r\n\r\n                            </ButtonGroup>\r\n\r\n\r\n                            <ButtonGroup size=\"\" className=\"buttonGroup\">\r\n                                {/* <label>Search Type</label> */}\r\n                                <Button\r\n                                    color={this.state.searchType.indexOf(\"regex\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateSearchType(\"regex\")}\r\n                                >\r\n                                    Regex</Button>\r\n                                <Button\r\n                                    color={this.state.searchType.indexOf(\"string\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateSearchType(\"string\")}\r\n                                >\r\n                                    List</Button>\r\n\r\n                            </ButtonGroup>\r\n\r\n                            <TextAreaQuery2\r\n                                name=\"Save Search\"\r\n                                value={this.state.name}\r\n                                rows=\"1\"\r\n                                onChange={this.setName}\r\n                                buttonOnClick={() => this.saveSearchesToSearchesCookie()}\r\n                                buttonOnClick2={() => this.saveSearchesToSearchesCookie(this.state.name)}\r\n                                buttonOnClick3={() => this.resetAll()}\r\n                                buttonText={\"Save\"}\r\n                                buttonText2={\"Delete\"}\r\n                                buttonText3={\"Reset Page\"}\r\n\r\n                            />\r\n\r\n                            {this.state.Searches && Object.keys(this.state.Searches).map((element) => {\r\n                                return element !== \"Searches\" ?\r\n                                    <Button\r\n                                        onClick={() => this.loadSearchFromSavedSearches(element)}\r\n                                        color=\"primary\"\r\n                                        style={{ border: \"solid white 1px\", marginLeft: \"1px\" }}\r\n                                    >{element}</Button> : \"\"\r\n                            })\r\n                            }\r\n\r\n\r\n\r\n                        </Jumbotron>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(LookupAdvanced)\r\n\r\n","import React, { Component } from 'react';\r\nimport { Jumbotron, Button, Row, Container, Col, ButtonGroup } from 'reactstrap';\r\nimport { withRouter } from \"react-router\";\r\nimport './Universal.css';\r\nimport TextArea from './subComponents/TextArea';\r\nimport TextAreaQuery from './subComponents/TextAreaQuery';\r\nimport Card1 from './subComponents/Card1';\r\nimport TextAreaQuery2 from './subComponents/TextAreaQuery2';\r\nimport {Helmet} from \"react-helmet\";\r\n\r\n\r\n\r\nclass HCPCandFilter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateInputValue = this.updateInputValue.bind(this);\r\n        this.updateSearchValue = this.updateSearchValue.bind(this);\r\n        this.setName = this.setName.bind(this);\r\n        this.updatesearchStringFlagsValue = this.updatesearchStringFlagsValue.bind(this);\r\n        this.updateRegexFlagsValue = this.updateRegexFlagsValue.bind(this);\r\n        this.setSearchValue = this.setSearchValue.bind(this);\r\n        this.updateSearchType = this.updateSearchType.bind(this);\r\n        this.saveStateToCookie = this.saveStateToCookie.bind(this);\r\n        this.saveSearchesToSearchesCookie = this.saveSearchesToSearchesCookie.bind(this);\r\n        this.loadSearchFromSavedSearches = this.loadSearchFromSavedSearches.bind(this);\r\n        this.pullStateFromCookie = this.pullStateFromCookie.bind(this);\r\n        this.hcpcManager = this.hcpcManager.bind(this);\r\n        this.resetAll = this.resetAll.bind(this);\r\n\r\n\r\n        this.state = {\r\n            input: \"Input Placeholder\",\r\n            output: \"Output Placeholder\",\r\n            noCountOutput: \"Output Placeholder\",\r\n            csvOutput: \"Output Placeholder\",\r\n            csvDedupeOutput: \"Output Placeholder\",\r\n            searchType: \"string\",\r\n            searchValue: \"Placeholder\",\r\n            searchStringFlags: \"c\",\r\n            searchRegexFlags: \"gmi\",\r\n            Searches: {}\r\n        };\r\n\r\n    }\r\n\r\n    resetAll() {\r\n        localStorage.removeItem(\"cookie2\")\r\n\r\n\r\n        this.setState({\r\n            input: \"Input Placeholder\",\r\n            output: \"Output Placeholder\",\r\n            noCountOutput: \"Output Placeholder\",\r\n            csvOutput: \"Output Placeholder\",\r\n            csvDedupeOutput: \"Output Placeholder\",\r\n            searchType: \"string\",\r\n            searchValue: \"Placeholder\",\r\n            searchStringFlags: \"c\",\r\n            searchRegexFlags: \"gmi\",\r\n            name: \"\"\r\n        }, this.saveStateToCookie(100));\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.pullStateFromCookie()\r\n    }\r\n\r\n\r\n    saveStateToCookie(num) {\r\n        if (num) { } else { num = 0 }\r\n        setTimeout(() => {\r\n            let cookieData = {};\r\n            // let name = this.state.name ? this.state.name : \"\"; ;\r\n            // let input= this.state.input ? this.state.input : \"Input Placeholder\";\r\n            // let output= this.state.output ? this.state.output :\"Output Placeholder\";\r\n            // let noCountOutput= this.state.noCountOutput ? this.state.noCountOutput :\"Output Placeholder\";\r\n            // csvOutput:  \"Output Placeholder\",\r\n            // csvDedupeOutput:  \"Output Placeholder\",\r\n            let searchType = this.state.searchType ? this.state.searchType : \"string\";\r\n            let searchValue = this.state.searchValue ? this.state.searchValue : \"([A-CE-Z][0-9]{4})\";\r\n            let searchStringFlags = this.state.searchStringFlags ? this.state.searchStringFlags : \"ci\";\r\n            let searchRegexFlags = this.state.searchRegexFlags ? this.state.searchRegexFlags : \"gmi\";\r\n\r\n            cookieData.searchType = searchType;\r\n            cookieData.searchValue = searchValue;\r\n            cookieData.searchStringFlags = searchStringFlags;\r\n            cookieData.searchRegexFlags = searchRegexFlags;\r\n\r\n\r\n            localStorage.setItem('cookie2', JSON.stringify(cookieData));\r\n        }, num);\r\n\r\n    }\r\n\r\n    saveSearchesToSearchesCookie(val) {\r\n        //get the current proposed name\r\n        //save the current state to that name\r\n        //remove the searches subObject to prevent duplicates\r\n        //The final cookie will be a object like {name: state, name2: state2, Searches: null}\r\n\r\n        let cookieData = {};\r\n        let name = this.state.name;\r\n        // let input= this.state.input ? this.state.input : \"Input Placeholder\";\r\n        // let output= this.state.output ? this.state.output :\"Output Placeholder\";\r\n        // let noCountOutput= this.state.noCountOutput ? this.state.noCountOutput :\"Output Placeholder\";\r\n        // csvOutput:  \"Output Placeholder\",\r\n        // csvDedupeOutput:  \"Output Placeholder\",\r\n        let searchType = this.state.searchType ? this.state.searchType : \"string\";\r\n        let searchValue = this.state.searchValue ? this.state.searchValue : \"([A-CE-Z][0-9]{4})\";\r\n        let searchStringFlags = this.state.searchStringFlags ? this.state.searchStringFlags : \"ci\";\r\n        let searchRegexFlags = this.state.searchRegexFlags ? this.state.searchRegexFlags : \"gmi\";\r\n\r\n        if (name === null || name === undefined) { return } else {\r\n            alert(\"Current search saved as \" + name)\r\n        }\r\n\r\n        if (localStorage.getItem('Searches2')) {\r\n            cookieData = JSON.parse(localStorage.getItem('Searches2'));\r\n        }\r\n\r\n        cookieData[name] = {};\r\n        cookieData[name].searchType = searchType;\r\n        cookieData[name].searchValue = searchValue;\r\n        cookieData[name].searchStringFlags = searchStringFlags;\r\n        cookieData[name].searchRegexFlags = searchRegexFlags;\r\n        cookieData[name] = this.state;\r\n\r\n\r\n        localStorage.setItem('Searches2', JSON.stringify(cookieData));\r\n        this.setState({ Searches: cookieData });\r\n\r\n        if (val) {\r\n            if (cookieData[this.state.name]) {\r\n                delete cookieData[this.state.name];\r\n                localStorage.setItem('Searches2', JSON.stringify(cookieData));\r\n                this.setState({ Searches: cookieData })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    pullStateFromCookie() {\r\n        if (localStorage.getItem('cookie2')) {\r\n            let fetchedCookie = JSON.parse(localStorage.getItem('cookie2'));\r\n            Object.keys(fetchedCookie).forEach(element => {\r\n                if (element === \"name\") { } else {\r\n                    this.setState({\r\n                        [element]: fetchedCookie[element]\r\n                    })\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n        if (localStorage.getItem('Searches2')) {\r\n            let fetchedCookie2 = JSON.parse(localStorage.getItem('Searches2'));\r\n            this.setState({\r\n                Searches: fetchedCookie2\r\n            })\r\n        }\r\n    }\r\n\r\n    loadSearchFromSavedSearches(val) {\r\n        if (this.state.Searches && this.state.Searches[val]) {\r\n            let fetchedSearch = this.state.Searches[val];\r\n            Object.keys(fetchedSearch).forEach(element => {\r\n                if (element !== \"Searches\" && element !== \"input\" && element !== \"output\" && element !== \"noCountOutput\" && element !== \"csvOutput\" && element !== \"csvDedupeOutput\") {\r\n                    this.setState({\r\n                        [element]: fetchedSearch[element]\r\n                    })\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    updateInputValue(e) {\r\n        e.preventDefault();\r\n        this.setState({ input: e.target.value });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    updateSearchValue(e) {\r\n        e.preventDefault();\r\n        this.setState({ searchValue: e.target.value });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    setName(e) {\r\n        e.preventDefault();\r\n        this.setState({ name: e.target.value });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    updatesearchStringFlagsValue(val) {\r\n        // console.log(\"calling searchStringFlags with \" + val)\r\n        // let searchStringFlags = this.state.searchStringFlags;\r\n\r\n        this.setState({ searchStringFlags: val });\r\n\r\n\r\n        // if (searchStringFlags.indexOf(val) !== -1) {\r\n        //     this.setState({ searchStringFlags: searchStringFlags.replace(val, \"\") });\r\n        // } else {\r\n        //     this.setState({ searchStringFlags: searchStringFlags + val });\r\n        // }\r\n\r\n        console.log(\"new value is now \" + this.state.searchStringFlags)\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    updateRegexFlagsValue(val) {\r\n        // console.log(\"calling updateRegexFlagsValue with \" + val)\r\n        let searchRegexFlags = this.state.searchRegexFlags;\r\n\r\n        if (searchRegexFlags.indexOf(val) !== -1) {\r\n            this.setState({ searchRegexFlags: searchRegexFlags.replace(val, \"\") });\r\n        } else {\r\n            this.setState({ searchRegexFlags: searchRegexFlags + val });\r\n        }\r\n\r\n        console.log(\"new value is now \" + this.state.searchRegexFlags)\r\n        this.saveStateToCookie()\r\n\r\n    }\r\n\r\n    updateSearchType(val) {\r\n\r\n        this.setState({ searchType: val });\r\n\r\n        console.log(\"new value is now \" + this.state.searchType)\r\n        this.saveStateToCookie()\r\n\r\n    }\r\n\r\n\r\n    hcpcManager(input) { // expands all hcpc ranges in document\r\n        let NumRegex = new RegExp(\"\\\\d{4}\", \"gmi\");\r\n        let LetterRegex = new RegExp(\"[A-CE-Z]\", \"gmi\");\r\n        let HCPCRegexRange = new RegExp(\"([A-CE-Z][0-9]{4}[\\\\t]{0,3}[-—]{0,2}(through){0,1}(to){0,1}[\\\\t]{0,3}[A-CE-Z][0-9]{4})\", \"gmi\");\r\n        console.log(\"range matches include\", input.match(HCPCRegexRange))\r\n\r\n        let result = input.replace(HCPCRegexRange, function (element) {\r\n\r\n            let letters = element.match(LetterRegex);\r\n            let numbers = element.match(NumRegex);\r\n            let store = [];\r\n\r\n            if (letters.length !== 2 | numbers.length !== 2 | numbers[0] > numbers[1]) { alert(\"failed match\") } else {\r\n                let i = numbers[0]\r\n                for (i; i <= numbers[1]; i++) {\r\n                    store.push(letters[0] + i)\r\n                }\r\n            }\r\n\r\n            store = store.join(\",\")\r\n            return store\r\n        });\r\n\r\n        return result\r\n\r\n\r\n\r\n    }\r\n\r\n    setSearchValue() {\r\n        let input = this.state.input;\r\n        let searchRegexFlags = this.state.searchRegexFlags;\r\n        let search = this.state.searchValue;\r\n        let searchType = this.state.searchType;\r\n        let caseSensitive;\r\n\r\n\r\n        input = this.hcpcManager(input);\r\n\r\n        if (searchRegexFlags.indexOf(\"i\") === -1) { // if case sensitive true  - no i flag\r\n            caseSensitive = true\r\n        } else {\r\n            caseSensitive = false\r\n        }\r\n\r\n        //if the regex option is chosen search as is - assign to array for the forEach loop below\r\n        //if the list option is chosen split into an array and regex search each element\r\n        if (searchType === \"string\") {\r\n            search = search.split(\",\");\r\n            search = Array.from(new Set(search));\r\n        } else {\r\n            search = [search]\r\n        }\r\n        let output = [];\r\n        let matcher2 = [];\r\n\r\n        search.forEach(element => {\r\n            // update this to keep a track of the specific order of matches\r\n            let match;\r\n            let matcher = []; // input.match(new RegExp(element, searchRegexFlags))\r\n            let test = new RegExp(element, searchRegexFlags);\r\n            let i = 0\r\n            while ((match = test.exec(input)) != null && i< 19999) {\r\n                matcher.push([match[0], parseInt(match.index)])\r\n                i++\r\n            }\r\n\r\n\r\n            //if no matches\r\n            if (matcher === null) {\r\n                this.setState({ output: \"No Matches\" });\r\n                this.saveStateToCookie()\r\n                return\r\n            }\r\n            matcher2 = [...matcher2, ...matcher]\r\n        }\r\n        )\r\n\r\n        console.log(\"matcher2\", matcher2)\r\n\r\n        if (matcher2.length >= 1 && Array.isArray(matcher2)) {\r\n            // matcher = matcher.split(\",\") \r\n            matcher2 = matcher2.sort(([a, b], [c, d]) => b - d);\r\n            matcher2.forEach(element => {\r\n                console.log(\"matcher32\", element)\r\n                output = [...output, element[0]]\r\n            });\r\n\r\n        }\r\n\r\n\r\n\r\n        let noCountOutput = output.join(\"\\n\");\r\n        let csvOutput = output.join(\",\");\r\n\r\n        let uniqueOutput = [];\r\n        let counts = [];\r\n        let countOutput = [];\r\n        let csvDedupeOutput = [];\r\n\r\n        output.forEach(element => {\r\n            if (!caseSensitive) {\r\n                console.log(\"element,\", element)\r\n                let lowerCaseUniqueOutput = uniqueOutput.map(element => element.toLowerCase())\r\n                let pos = lowerCaseUniqueOutput.indexOf(element.toLowerCase());\r\n                if (pos === -1) {\r\n                    uniqueOutput.push(element)\r\n                    counts.push(1)\r\n                } else {\r\n                    counts[pos] = counts[pos] + 1;\r\n                }\r\n\r\n            } else {\r\n                let pos = uniqueOutput.indexOf(element);\r\n                if (pos === -1) {\r\n                    uniqueOutput.push(element)\r\n                    counts.push(1)\r\n                } else {\r\n                    counts[pos] = counts[pos] + 1;\r\n                }\r\n            }\r\n        });\r\n\r\n        uniqueOutput.forEach((element, index) => {\r\n            countOutput.push(element + \" - \" + counts[index] + \" times\");\r\n            csvDedupeOutput.push(element);\r\n        });\r\n\r\n\r\n\r\n        this.setState({\r\n            output: countOutput.join(\"\\n\"),\r\n            noCountOutput: noCountOutput,\r\n            csvOutput: csvOutput,\r\n            csvDedupeOutput: csvDedupeOutput.join(\",\")\r\n        });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Container >\r\n                <Helmet>\r\n                    <meta charSet=\"utf-8\" />\r\n                    <title>HCPC</title>\r\n                </Helmet>\r\n                <Row>\r\n\r\n                    <Col lg=\"9\" xl=\"9\" md=\"9\" sm=\"12\">\r\n                        <Jumbotron className=\"mainPanel panel\">\r\n                            <Row>\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    <TextArea\r\n                                        name=\"Input\"\r\n                                        value={this.state.input}\r\n                                        rows=\"18\"\r\n                                        onChange={this.updateInputValue}\r\n\r\n                                    />\r\n                                </Col>\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    {this.state.searchStringFlags.indexOf(\"c\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.noCountOutput}\r\n                                        rows=\"18\"\r\n                                    />}\r\n\r\n                                    {this.state.searchStringFlags.indexOf(\"a\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.output}\r\n                                        rows=\"18\"\r\n                                    />}\r\n\r\n                                    {this.state.searchStringFlags.indexOf(\"s\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.csvDedupeOutput}\r\n                                        rows=\"18\"\r\n                                    />}\r\n\r\n                                    {this.state.searchStringFlags.indexOf(\"h\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.csvOutput}\r\n                                        rows=\"18\"\r\n                                    />}\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <TextAreaQuery\r\n                                name=\"Search String\"\r\n                                value={this.state.searchValue}\r\n                                rows=\"6\"\r\n                                onChange={this.updateSearchValue}\r\n                                buttonOnClick={this.setSearchValue}\r\n                                buttonText=\"Search\"\r\n                            />\r\n\r\n                            <Card1\r\n                                text='This tool is the same as the lookup tool, but also expands HCPC ranges'\r\n                            />\r\n\r\n\r\n                        </Jumbotron>\r\n                    </Col>\r\n                    <Col lg=\"3\" xl=\"3\" md=\"3\" sm=\"12\">\r\n                        <Jumbotron className=\"sidePanel panel\">\r\n                            <Col lg=\"12\" xl=\"12\" md=\"12\" sm=\"12\">\r\n                                <h5>HCPC Lookup</h5>\r\n                            </Col>\r\n                            <ButtonGroup size=\"sm\" className=\"buttonGroup\">\r\n                                <Button\r\n                                    color={this.state.searchRegexFlags.indexOf(\"i\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"i\")}\r\n                                >\r\n                                    Case Insensitive</Button>\r\n                                <Button\r\n                                    color={this.state.searchRegexFlags.indexOf(\"g\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"g\")}\r\n                                >\r\n                                    Global</Button>\r\n                                <Button\r\n                                    color={this.state.searchRegexFlags.indexOf(\"m\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"m\")}\r\n                                >\r\n                                    Multiline</Button>\r\n                            </ButtonGroup>\r\n\r\n\r\n                            <ButtonGroup size=\"sm\" className=\"buttonGroup\">\r\n                                <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"c\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"c\")}\r\n                                >\r\n                                    Show All</Button>\r\n                                <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"a\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"a\")}\r\n                                >\r\n                                    Count</Button>\r\n                                <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"s\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"s\")}\r\n                                >\r\n                                    CSV Trimmed</Button>\r\n                                <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"h\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"h\")}\r\n                                >\r\n                                    CSV</Button>\r\n\r\n                            </ButtonGroup>\r\n\r\n\r\n                            <ButtonGroup size=\"\" className=\"buttonGroup\">\r\n                                <label>Search Type</label>\r\n                                <Button\r\n                                    color={this.state.searchType.indexOf(\"regex\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateSearchType(\"regex\")}\r\n                                >\r\n                                    Regex</Button>\r\n                                <Button\r\n                                    color={this.state.searchType.indexOf(\"string\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateSearchType(\"string\")}\r\n                                >\r\n                                    List</Button>\r\n\r\n                            </ButtonGroup>\r\n\r\n                            <TextAreaQuery2\r\n                                name=\"Save Search\"\r\n                                value={this.state.name}\r\n                                rows=\"1\"\r\n                                onChange={this.setName}\r\n                                buttonOnClick={() => this.saveSearchesToSearchesCookie()}\r\n                                buttonOnClick2={() => this.saveSearchesToSearchesCookie(this.state.name)}\r\n                                buttonOnClick3={() => this.resetAll()}\r\n                                buttonText={\"Save\"}\r\n                                buttonText2={\"Delete\"}\r\n                                buttonText3={\"Reset Page\"}\r\n\r\n                            />\r\n\r\n                            {this.state.Searches && Object.keys(this.state.Searches).map((element) => {\r\n                                return element !== \"Searches\" ?\r\n                                    <Button\r\n                                        onClick={() => this.loadSearchFromSavedSearches(element)}\r\n                                        color=\"primary\"\r\n                                        style={{ border: \"solid white 1px\", marginLeft: \"1px\" }}\r\n                                    >{element}</Button> : \"\"\r\n                            })\r\n                            }\r\n\r\n\r\n\r\n                        </Jumbotron>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(HCPCandFilter)\r\n\r\n","import React, { Component } from 'react';\r\nimport { Jumbotron, Button, Row, Container, Col, ButtonGroup } from 'reactstrap';\r\nimport { withRouter } from \"react-router\";\r\nimport './Universal.css';\r\nimport TextArea from './subComponents/TextArea';\r\nimport Card1 from './subComponents/Card1';\r\nimport { Helmet } from \"react-helmet\";\r\n\r\n\r\nclass Formatter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateInputValue = this.updateInputValue.bind(this);\r\n        this.launchFormatter = this.launchFormatter.bind(this);\r\n        this.rulesManager = this.rulesManager.bind(this);\r\n        this.toggleexperimental = this.toggleexperimental.bind(this);\r\n        this.fontSizeChange = this.fontSizeChange.bind(this);\r\n        this.saveFontCookie = this.saveFontCookie.bind(this);\r\n        this.loadFontCookie = this.loadFontCookie.bind(this);\r\n\r\n        this.state = {\r\n            input: \"Placeholder\",\r\n            output: \"Output Placeholder\",\r\n            experimentalOutput: \"Output Placeholder\",\r\n            experimental: false,\r\n            fontSize: 10\r\n        };\r\n\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.loadFontCookie()\r\n    }\r\n\r\n    fontSizeChange(num) {\r\n        let fontSize = this.state.fontSize;\r\n        if (num === \"0\" || num === 0) { this.setState({ fontSize: fontSize - 2 }) }\r\n        if (num === \"1\" || num === 1) { this.setState({ fontSize: fontSize + 2 }) }\r\n        this.saveFontCookie()\r\n    }\r\n\r\n    saveFontCookie() {\r\n        let font = this.state.fontSize;\r\n        localStorage.setItem('fontSize', font);\r\n    }\r\n\r\n    loadFontCookie() {\r\n        let font = localStorage.getItem('fontSize');\r\n        console.log(\"fontSize\", font)\r\n        if (font !== null && Number.isInteger(font)) {\r\n            this.setState({ fontSize: font })\r\n        }\r\n    }\r\n\r\n\r\n    updateInputValue(e) {\r\n        e.preventDefault();\r\n        this.setState({ input: e.target.value });\r\n    }\r\n\r\n\r\n    toggleexperimental() {\r\n        // console.log(\"calling experimental with \" + val)\r\n        let experimental = this.state.experimental;\r\n\r\n        if (experimental === true) {\r\n            this.setState({ experimental: false });\r\n        } else {\r\n            this.setState({ experimental: true });\r\n        }\r\n\r\n        // console.log(\"new double line value is now \" + this.state.experimental)\r\n    }\r\n\r\n\r\n    updateSearchType(val) {\r\n\r\n        this.setState({ searchType: val });\r\n\r\n        // console.log(\"new value is now \" + this.state.searchType)\r\n\r\n    }\r\n\r\n\r\n\r\n    rulesManager(inputer, type) { // expands all hcpc ranges in document\r\n        // flow\r\n        // 1. Take input and remove line breaks where first word is lower case and not direcly followed by a .)-\r\n        // a. match regexes for different bullet points and insert line breaks before them\r\n        // 2.remove extra line breaks\r\n        // 3.\r\n        // 4.\r\n\r\n\r\n        let result;\r\n        let result2;\r\n\r\n        let smallCapsStartingLine = new RegExp(\"[\\\\n]{1,99}[\\\\s]{0,99}([a-z]{0,40}[\\\\s,]|AND|OR|NOT)\", \"gm\");\r\n        let obviousBulletPoints = new RegExp(\"([•])|([\\\\s\\\\n]o[\\\\s\\\\n])\", \"gmi\");\r\n        let letterBulletPoint = new RegExp(\"((?<!\\\\([\\\\sa-z]{2,99})[\\\\s\\\\n][a-z]{1,2}[.)][\\\\s])\", \"gmi\");\r\n        let numberBulletPoint = new RegExp(\"((?<!\\\\([\\\\sa-z]{2,99})[\\\\s\\\\n][0-9]{1,2}[.)]([\\\\s]|[A-Za-z]{2}))\", \"gmi\");\r\n        let RomanBulletPoint = new RegExp(\"((?<!\\\\([\\\\sa-z]{2,99})[\\\\s\\\\n][IVX]{1,5}[.)][\\\\s])\", \"gmi\");\r\n        let doubleLine = new RegExp(\"\\\\n\\\\n\", \"gmi\")\r\n        let commaLine = new RegExp(\"([\\\\,][\\\\s]{0,3}[\\\\n])\", \"gmi\")\r\n\r\n        console.log(\"inputer called\")\r\n\r\n        result = inputer.replace(smallCapsStartingLine, function (element) {\r\n            console.log(\"smallCapsStartingLine\",element)\r\n            if (element.match(obviousBulletPoints)) { return element }\r\n            return element.replace(\"\\n\", \" \")\r\n        })\r\n\r\n        result2 = result.replace(obviousBulletPoints, function (element) {\r\n            // console.log(\"obviousBulletPoints\",element)\r\n            if (element.charAt(0) !== \"\\n\") { if(element.charAt(0) === \" \"){return \"\\n\" + element.substring(1) }else{return \"\\n\" + element }}\r\n            return element //.replace(\"\\n\", \" \")\r\n        })\r\n\r\n        result2 = result2.replace(letterBulletPoint, function (element) {\r\n            // console.log(\"letterBulletPoint\",element)\r\n            if (element.match(obviousBulletPoints)) { return element }\r\n            if (element.charAt(0) !== \"\\n\") { \r\n                // console.log(\"letterBulletPoint first letter is not newline \",element)\r\n                if(element.charAt(0) === \" \"){\r\n                    // console.log(\"letterBulletPoint first letter is space \",element)\r\n                    return \"\\n\" + element.substring(1) }else{\r\n                        // console.log(\"letterBulletPoint first letter is not space or new line, returning as new row \",element)\r\n                        return \"\\n\" + element }}\r\n            return element //.replace(\"\\n\", \" \")\r\n        })\r\n\r\n        result2 = result2.replace(numberBulletPoint, function (element) {\r\n            // console.log(\"numberBulletPoint\",element)\r\n            if (element.match(obviousBulletPoints) || element.match(obviousBulletPoints)) { return element }\r\n            if (element.charAt(0) !== \"\\n\") { if(element.charAt(0) === \" \"){return \"\\n\" + element.substring(1) }else{return \"\\n\" + element }}\r\n            return element //.replace(\"\\n\", \" \")\r\n        })\r\n\r\n        result2 = result2.replace(RomanBulletPoint, function (element) {\r\n            console.log(\"RomanBulletPoint\",element)\r\n            if (element.match(obviousBulletPoints) || element.match(numberBulletPoint) || element.match(obviousBulletPoints)) {\r\n                        console.log(\"RomanBulletPoint first letter is a match for other regexes returning \",element)\r\n                        return element }\r\n            if (element.charAt(0) !== \"\\n\") {\r\n                console.log(\"RomanBulletPoint first letter is a newline \",element)\r\n                if(element.charAt(0) === \" \"){\r\n                    console.log(\"RomanBulletPoint first letter is a space returning as new row minus 1 letter  \",element)\r\n                    return \"\\n\" + element.substring(1) }else{\r\n                        console.log(\"RomanBulletPoint first letter is a not a space or a new line returning as new row  \",element)\r\n                        return \"\\n\" + element }}\r\n            return element\r\n        })\r\n\r\n        result = result.replace(doubleLine, \"\\n\")\r\n        result2 = result2.replace(doubleLine, \"\\n\")\r\n        result = result.replace(commaLine, \", \")\r\n        result2 = result2.replace(commaLine, \", \")\r\n\r\n        return [result, result2]\r\n    }\r\n\r\n    launchFormatter(type) {\r\n        // console.log(\"LaunchFormatter called\")\r\n        let input = this.state.input;\r\n        input = this.rulesManager(input, type);\r\n\r\n\r\n        this.setState({\r\n            output: input[0],\r\n            experimentalOutput: input[1]\r\n        });\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Container >\r\n                <Helmet>\r\n                    <meta charSet=\"utf-8\" />\r\n                    <title>Formatter</title>\r\n                </Helmet>\r\n                <Row>\r\n\r\n\r\n                    <Col lg=\"12\" xl=\"12\" md=\"12\" sm=\"12\">\r\n                        <Jumbotron className=\"mainPanel panel\">\r\n                            <Col lg=\"12\" xl=\"12\" md=\"12\" sm=\"12\">\r\n                                <h5>Policy Formatter (Experimental)</h5>\r\n                            </Col>\r\n                            <Row>\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    <TextArea\r\n                                        name=\"Input\"\r\n                                        placeholder={this.state.input}\r\n                                        rows=\"18\"\r\n                                        onChange={this.updateInputValue}\r\n                                        styler={{ fontSize: this.state.fontSize }}\r\n\r\n                                    />\r\n                                </Col>\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.experimental === true ? this.state.experimentalOutput : this.state.output}\r\n                                        rows=\"18\"\r\n                                        styler={{ fontSize: this.state.fontSize }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Col lg=\"12\" xl=\"12\" md=\"12\" sm=\"12\">\r\n                                <ButtonGroup size=\"\" className=\"buttonGroup\">\r\n                                    {/* <label>Options</label> */}\r\n                                    <Button\r\n                                        bsSize=\"\"\r\n                                        name=\"launchFormatter\"\r\n                                        onClick={() => this.launchFormatter(1)}\r\n                                        color=\"success\"\r\n                                    >\r\n                                        Format\r\n                                </Button>\r\n                                    <Button\r\n                                        color={this.state.experimental === true ? \"primary\" : \"secondary\"}\r\n                                        onClick={() => this.toggleexperimental(\"c\")}\r\n                                    >\r\n                                        Experimental formatting</Button>\r\n\r\n\r\n                                </ButtonGroup>\r\n                                <ButtonGroup size=\"\" className=\"buttonGroup float-right\">\r\n                                    <label style={{ paddingRight: \"10px\", textAlign: \"center\", marginTop: \"5px\" }}>Font Size: </label>\r\n                                    <Button\r\n                                        bsSize=\"\"\r\n                                        name=\"fontSizeChange0\"\r\n                                        onClick={() => this.fontSizeChange(0)}\r\n                                        color=\"secondary\"\r\n                                    >\r\n                                        -\r\n                                </Button>\r\n                                    <Button\r\n                                        name=\"fontSizeChange1\"\r\n                                        color=\"secondary\"\r\n                                        onClick={() => this.fontSizeChange(1)}\r\n                                    >\r\n                                        +</Button>\r\n                                </ButtonGroup>\r\n\r\n\r\n                            </Col>\r\n\r\n                            <Card1\r\n                                text='This tool tries to remove extra line breaks. Experimental Formatting makes sure each bullet point is on a new line'\r\n                            />\r\n\r\n                        </Jumbotron>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(Formatter)\r\n\r\n","import React, { Component } from 'react';\r\nimport { Jumbotron, Button, Row, Container, Col, ButtonGroup } from 'reactstrap';\r\nimport { withRouter } from \"react-router\";\r\nimport './Universal.css';\r\nimport TextArea from './subComponents/TextArea';\r\nimport Card1 from './subComponents/Card1';\r\nimport { Helmet } from \"react-helmet\";\r\n\r\n\r\nclass MasterPAFormatter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateInputValue = this.updateInputValue.bind(this);\r\n        this.launchFormatter = this.launchFormatter.bind(this);\r\n        this.headerManager = this.headerManager.bind(this);\r\n        this.toggleDoubleLine = this.toggleDoubleLine.bind(this);\r\n        this.fontSizeChange = this.fontSizeChange.bind(this);\r\n        this.saveFontCookie = this.saveFontCookie.bind(this);\r\n        this.loadFontCookie = this.loadFontCookie.bind(this);\r\n\r\n\r\n        this.state = {\r\n            input: \"Placeholder\",\r\n            output: \"Output Placeholder\",\r\n            noDoubleLineOutput: \"Output Placeholder\",\r\n            doubleLine: false,\r\n            fontSize: 10\r\n        };\r\n\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.loadFontCookie()\r\n    }\r\n\r\n    fontSizeChange(num) {\r\n        let fontSize = this.state.fontSize;\r\n        if (num === \"0\" || num === 0) { this.setState({ fontSize: fontSize - 2 }) }\r\n        if (num === \"1\" || num === 1) { this.setState({ fontSize: fontSize + 2 }) }\r\n        this.saveFontCookie()\r\n    }\r\n\r\n    saveFontCookie() {\r\n        let font = this.state.fontSize;\r\n        localStorage.setItem('fontSize', font);\r\n    }\r\n\r\n    loadFontCookie() {\r\n        let font = localStorage.getItem('fontSize');\r\n        console.log(\"fontSize\", font)\r\n        if (font !== null && Number.isInteger(font)) {\r\n            this.setState({ fontSize: font })\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    updateInputValue(e) {\r\n        e.preventDefault();\r\n        this.setState({ input: e.target.value });\r\n    }\r\n\r\n\r\n    toggleDoubleLine() {\r\n        // console.log(\"calling doubleLine with \" + val)\r\n        let doubleLine = this.state.doubleLine;\r\n\r\n        if (doubleLine === true) {\r\n            this.setState({ doubleLine: false });\r\n        } else {\r\n            this.setState({ doubleLine: true });\r\n        }\r\n\r\n        console.log(\"new double line value is now \" + this.state.doubleLine)\r\n    }\r\n\r\n\r\n    updateSearchType(val) {\r\n\r\n        this.setState({ searchType: val });\r\n\r\n        console.log(\"new value is now \" + this.state.searchType)\r\n\r\n    }\r\n\r\n\r\n    headerManager(inputer) {\r\n        let headingsRegex = new RegExp(\"(Affected[\\\\s]Drugs)|(Exclusion[\\\\s ]Criteria)|(PA[\\\\s ]Indication[\\\\s ]Indicator)|(Required[\\\\s ]Medical[\\\\s ]Information)|(Medical[\\\\s ]Information)|(Age[\\\\s ]Restriction[()s]{0,3})|(Prescriber[\\\\s ]Restriction[()s]{0,3})|(Coverage[\\\\s ]Duration)|(Other[\\\\s ]Criteria)|(Off[\\-\\\\s ]]{0,1}Label[\\\\s ]Use[()s]{0,3})|(Products[\\\\s ]Affected)|(PA[\\\\s ]Criteria)|(Last[\\\\s ]Updated)|([pP]age[\\\\s ][\\\\d]{1,4})|(Covered[\\\\s ]Use[()s]{0,3})|(Medication[()s]{0,3})|(Prior[\\\\-\\\\s ]{0,1}Authorization[\\\\-\\\\s ]{0,1}Group)|(Formulary ID [\\\\d]{2,10})|(Required[\\\\s ]Medical[\\\\s ]Info)|(Criteria[\\\\s ]Details)|(Prior[\\\\s ]Authorization[\\\\s ]Indication)|(Prior[\\\\s ]Authorization[\\\\s ]Group[\\\\s ]Description)|(Required[\\\\s ]Medical:)|(Updated [\\\\d]{2})|(AFFECTED[\\\\S]DRUGS)|(EXCLUSION[\\\\S ]CRITERIA)|(PA[\\\\S ]INDICATION[\\\\S ]INDICATOR)|(REQUIRED[\\\\S ]MEDICAL[\\\\S ]INFORMATION)|(MEDICAL[\\\\S ]INFORMATION)|(AGE[\\\\S ]RESTRICTION[()S]{0,3})|(PRESCRIBER[\\\\S ]RESTRICTION[()S]{0,3})|(COVERAGE[\\\\S ]DURATION)|(OTHER[\\\\S ]CRITERIA)|(OFF[\\-\\\\S ]]{0,1}LABEL[\\\\S ]USE[()S]{0,3})|(PRODUCTS[\\\\S ]AFFECTED)|(PA[\\\\S ]CRITERIA)|(LAST[\\\\S ]UPDATED)|([PP]AGE[\\\\S ][\\\\D]{1,4})|(COVERED[\\\\S ]USE[()S]{0,3})|(MEDICATION[()S]{0,3})|(PRIOR[\\\\-\\\\S ]{0,1}AUTHORIZATION[\\\\-\\\\S ]{0,1}GROUP)|(FORMULARY ID [\\\\D]{2,10})|(REQUIRED[\\\\S ]MEDICAL[\\\\S ]INFO)|(CRITERIA[\\\\S ]DETAILS)|(PRIOR[\\\\S ]AUTHORIZATION[\\\\S ]INDICATION)|(PRIOR[\\\\S ]AUTHORIZATION[\\\\S ]GROUP[\\\\S ]DESCRIPTION)|(REQUIRED[\\\\S ]MEDICAL:)|(Prior[\\\\s\\\\-]{0,2}Authorization[\\\\s\\\\-]{0,2}Protocol)|(Group[\\\\s\\\\-]{0,2}Description[\\\\s\\\\-]{0,2}\\\\:)|(UPDATED [\\\\D]{2})\", \"gm\")\r\n\r\n        let wrongHeadingsRegex = new RegExp(\"(accepted[\\\\s]{0,3}[\\\\n]Indications)|(approved[\\\\s]{0,3}[\\\\n]Indications)|(No[\\\\s]{0,3}[\\\\n]Age[\\\\s ]{0,3}Restriction)|(No[\\\\s]{0,3}[\\\\n]Exclusion[\\\\s ]{0,3}Criteria)\", \"gmi\")\r\n\r\n        let bulletsRegex = new RegExp(\"[•]|([\\\\s ]o[\\\\s ])\", \"gmi\")\r\n        let noDoubleBulletRegex = new RegExp(\"[\\\\n]{2}[•]|([\\\\n]{2}[\\\\s ]o[\\\\s ])\", \"gmi\")\r\n\r\n        let CapsHeadings = new RegExp(\"[\\\\s ]{0,1}Indications[\\\\s ]\", \"gm\");\r\n        let newLine = new RegExp(\"\\\\n{1,55}\", \"gmi\");\r\n\r\n\r\n        let input = inputer.replace(newLine, function (element) {\r\n            element = \" \";\r\n            return element\r\n        })\r\n\r\n        //handling the different regex for special headings\r\n        input = input.replace(CapsHeadings, function (element) {\r\n            if (element.charAt(0) === \" \") { element = \"\\n\" + element.substring(1) } else {\r\n                element = \"\\n\" + element\r\n            }\r\n            return element\r\n        })\r\n\r\n\r\n        input = input.replace(bulletsRegex, function (element) {\r\n            return \"\\n\" + element\r\n        })\r\n        //END handling the different regex for special headings\r\n\r\n\r\n\r\n        let result = input.replace(headingsRegex, function (element) {\r\n            element = \"\\n\" + element;\r\n            return element\r\n        });\r\n\r\n        result = result.replace(wrongHeadingsRegex, function (element) {\r\n            console.log(element)\r\n            element = element.replace(\"\\n\", \" \");\r\n            element = element.replace(\"  \", \" \");\r\n            return element\r\n        });\r\n\r\n        let result2 = result.replace(newLine, \"\\n\\n\")\r\n        result2 = result2.replace(noDoubleBulletRegex, function (element) {\r\n            element = element.replace(\"\\n\\n\", \"\\n\");\r\n            return element\r\n        });\r\n\r\n\r\n\r\n\r\n\r\n        result = result.trim();\r\n        result2 = result2.trim();\r\n\r\n        return [result, result2]\r\n    }\r\n\r\n    launchFormatter() {\r\n        console.log(\"LaunchFormatter called\")\r\n        let input = this.state.input;\r\n        input = this.headerManager(input);\r\n\r\n\r\n        this.setState({\r\n            output: input[0],\r\n            noDoubleLineOutput: input[1]\r\n        });\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Container >\r\n                <Helmet>\r\n                    <meta charSet=\"utf-8\" />\r\n                    <title>Master PA</title>\r\n                </Helmet>\r\n                <Row>\r\n\r\n\r\n                    <Col lg=\"12\" xl=\"12\" md=\"12\" sm=\"12\">\r\n                        <Jumbotron className=\"mainPanel panel\">\r\n                            <Col lg=\"12\" xl=\"12\" md=\"12\" sm=\"12\">\r\n                                <h5>Master PA Formatter <span style={{ fontSize: \"10px\" }}>v1.05</span></h5>\r\n                            </Col>\r\n                            <Row>\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    <TextArea\r\n                                        name=\"Input\"\r\n                                        placeholder={this.state.input}\r\n                                        rows=\"18\"\r\n                                        onChange={this.updateInputValue}\r\n                                        styler={{ fontSize: this.state.fontSize }}\r\n\r\n                                    />\r\n                                </Col>\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.doubleLine === true ? this.state.noDoubleLineOutput : this.state.output}\r\n                                        rows=\"18\"\r\n                                        styler={{ fontSize: this.state.fontSize }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n\r\n\r\n                            <ButtonGroup size=\"\" className=\"buttonGroup\">\r\n                                <Button\r\n                                    bsSize=\"\"\r\n                                    name=\"launchFormatter\"\r\n                                    onClick={() => this.launchFormatter()}\r\n                                    color=\"success\"\r\n                                >\r\n                                    Format\r\n                                </Button>                                <Button\r\n                                    color={this.state.doubleLine === true ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.toggleDoubleLine(\"c\")}\r\n                                >\r\n                                    Double Lines</Button>\r\n\r\n                            </ButtonGroup>\r\n\r\n                            <ButtonGroup size=\"\" className=\"buttonGroup float-right\">\r\n                                <label style={{ paddingRight: \"10px\", textAlign: \"center\", marginTop: \"5px\" }}>Font Size: </label>\r\n                                <Button\r\n                                    bsSize=\"\"\r\n                                    name=\"fontSizeChange0\"\r\n                                    onClick={() => this.fontSizeChange(0)}\r\n                                    color=\"secondary\"\r\n                                >\r\n                                    -\r\n                                </Button>\r\n                                <Button\r\n                                    name=\"fontSizeChange1\"\r\n                                    color=\"secondary\"\r\n                                    onClick={() => this.fontSizeChange(1)}\r\n                                >\r\n                                    +</Button>\r\n                            </ButtonGroup>\r\n\r\n                            <Card1\r\n                                text={<div><p>This tool removes all line breaks before finding  pre-defined headings and inserts linebreaks before them\r\n                                    </p></div>}\r\n\r\n\r\n                            />\r\n\r\n                        </Jumbotron>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(MasterPAFormatter)\r\n\r\n","import React, { Component } from 'react';\r\nimport { Jumbotron, Button, Row, Container, Col, ButtonGroup } from 'reactstrap';\r\nimport { withRouter } from \"react-router\";\r\nimport './Universal.css';\r\nimport TextArea from './subComponents/TextArea';\r\nimport Card1 from './subComponents/Card1';\r\nimport { Helmet } from \"react-helmet\";\r\n\r\n\r\nclass GSheetFormatter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateInputValue = this.updateInputValue.bind(this);\r\n        this.updateGSheetCellValue = this.updateGSheetCellValue.bind(this);\r\n        this.updateGSheetapplyFormula = this.updateGSheetapplyFormula.bind(this);\r\n        this.updateRegexFlagsValue = this.updateRegexFlagsValue.bind(this);\r\n        this.updateRegexFlagsValue2 = this.updateRegexFlagsValue2.bind(this);\r\n        this.launchFunction = this.launchFunction.bind(this);\r\n        this.resetAll = this.resetAll.bind(this);\r\n        this.fontSizeChange = this.fontSizeChange.bind(this);\r\n        this.saveFontCookie = this.saveFontCookie.bind(this);\r\n        this.loadFontCookie = this.loadFontCookie.bind(this);\r\n\r\n\r\n        this.state = {\r\n            input: \"Input Placeholder\",\r\n            output: \"Output Placeholder\",\r\n            outputCsv: \"Output Placeholder Csv\",\r\n            outputWithFormula: \"Output Placeholder With Formula\",\r\n            outputWithFormulaReverse: \"Output Placeholder With Is Not a Match Formula\",\r\n            GSheetCellValue: \"A2\",\r\n            GSheetFormulaFlag: \"rd\",\r\n            GSheetFormulaFlag2: \"rdrl\",\r\n            GSheetapplyFormula: \"normal\",\r\n            fontSize: 14\r\n\r\n        }\r\n\r\n        setTimeout(() => {\r\n            this.loadFontCookie()\r\n        }, 100);\r\n    }\r\n\r\n    resetAll() {\r\n\r\n\r\n        this.setState({\r\n            input: \"Input Placeholder\",\r\n            output: \"Output Placeholder\",\r\n            outputCsv: \"Output Placeholder Csv\",\r\n            outputWithFormula: \"Output Placeholder With Formula\",\r\n            outputWithFormulaReverse: \"Output Placeholder With Is Not a Match Formula\",\r\n            GSheetCellValue: \"A2\",\r\n            GSheetFormulaFlag: \"rd\",\r\n            GSheetFormulaFlag2: \"rdrl\",\r\n            GSheetapplyFormula: \"normal\"\r\n        });\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    fontSizeChange(num) {\r\n        let fontSize = this.state.fontSize;\r\n        if (num === \"0\" || num === 0) { this.setState({ fontSize: fontSize - 2 }) }\r\n        if (num === \"1\" || num === 1) { this.setState({ fontSize: fontSize + 2 }) }\r\n        this.saveFontCookie()\r\n    }\r\n\r\n    saveFontCookie() {\r\n        let font = this.state.fontSize;\r\n        localStorage.setItem('fontSize', font);\r\n    }\r\n\r\n    loadFontCookie() {\r\n        let font = localStorage.getItem('fontSize');\r\n        console.log(\"fontSize\", font)\r\n        if (font !== null && Number.isInteger(font)) {\r\n            this.setState({ fontSize: font })\r\n        }\r\n    }\r\n\r\n    updateInputValue(e) {\r\n        e.preventDefault();\r\n        this.setState({ input: e.target.value });\r\n    }\r\n\r\n    updateGSheetCellValue(e) {\r\n        e.preventDefault();\r\n        this.setState({ GSheetCellValue: e.target.value });\r\n    }\r\n\r\n\r\n\r\n    updateGSheetapplyFormula(val) {\r\n        // console.log(\"calling doubleLine with \" + val)\r\n        // let GSheetapplyFormula = this.state.GSheetapplyFormula;\r\n\r\n        this.setState({ GSheetapplyFormula: val });\r\n\r\n        // if (val === \"normal\") {\r\n        //     if (GSheetapplyFormula === \"normal\") {\r\n        //         this.setState({ GSheetapplyFormula: \"false\" });\r\n        //     } else {\r\n        //         this.setState({ GSheetapplyFormula: \"normal\" });\r\n        //     }\r\n        // } else {\r\n        //     if (GSheetapplyFormula === \"reverse\") {\r\n        //         this.setState({ GSheetapplyFormula: \"false\" });\r\n        //     } else {\r\n        //         this.setState({ GSheetapplyFormula: \"reverse\" });\r\n        //     }\r\n        // }\r\n\r\n        // console.log(\"new gSheet Formula value is now \" + this.state.GSheetFormulaFlag)\r\n    }\r\n\r\n    updateRegexFlagsValue(val) {\r\n        // console.log(\"calling updateRegexFlagsValue with \" + val)\r\n        let GSheetFormulaFlag = this.state.GSheetFormulaFlag;\r\n\r\n        if (GSheetFormulaFlag.indexOf(val) !== -1 && val !== \"rl\" && val !== \"rcm\") {\r\n            GSheetFormulaFlag = GSheetFormulaFlag.replace(val, \"\");\r\n        } else {\r\n            GSheetFormulaFlag = GSheetFormulaFlag + val;\r\n        }\r\n\r\n        //radio settings for list/csv splits on input - nl is plit at new line, cs is split at comma\r\n        if (val === \"cs\" && GSheetFormulaFlag.indexOf(\"nl\") !== -1) {\r\n            GSheetFormulaFlag = GSheetFormulaFlag.replace(\"nl\", \"\");\r\n        } else {\r\n            if (val === \"nl\" && GSheetFormulaFlag.indexOf(\"cs\") !== -1) {\r\n                GSheetFormulaFlag = GSheetFormulaFlag.replace(\"cs\", \"\");\r\n            }\r\n        }\r\n\r\n        // //radio settings for list/csv - rl is return list rcm is return csv\r\n        // if (val === \"rl\") {\r\n        //     GSheetFormulaFlag = GSheetFormulaFlag.replace(\"rcm\", \"\");\r\n        //     GSheetFormulaFlag = GSheetFormulaFlag.replace(\"rl\", \"\");\r\n        //     GSheetFormulaFlag = GSheetFormulaFlag + val;\r\n        // } else {\r\n        //     if (val === \"rcm\") {\r\n        //         GSheetFormulaFlag = GSheetFormulaFlag.replace(\"rcm\", \"\");\r\n        //         GSheetFormulaFlag = GSheetFormulaFlag.replace(\"rl\", \"\");\r\n        //         GSheetFormulaFlag = GSheetFormulaFlag + val;\r\n\r\n        //     } else {\r\n\r\n        //     }\r\n        // }\r\n\r\n\r\n\r\n        this.setState({ GSheetFormulaFlag: GSheetFormulaFlag })\r\n\r\n        console.log(\"new value is now \" + this.state.GSheetFormulaFlag)\r\n\r\n    }\r\n\r\n\r\n    updateRegexFlagsValue2(val) {\r\n        // console.log(\"calling updateRegexFlagsValue with \" + val)\r\n        let GSheetFormulaFlag = this.state.GSheetFormulaFlag2;\r\n\r\n\r\n        //radio settings for list/csv - rl is return list rcm is return csv\r\n        if (val === \"rl\") {\r\n            GSheetFormulaFlag = GSheetFormulaFlag.replace(\"rcm\", \"\");\r\n            GSheetFormulaFlag = GSheetFormulaFlag.replace(\"rl\", \"\");\r\n            GSheetFormulaFlag = GSheetFormulaFlag + val;\r\n        } else {\r\n            if (val === \"rcm\") {\r\n                GSheetFormulaFlag = GSheetFormulaFlag.replace(\"rcm\", \"\");\r\n                GSheetFormulaFlag = GSheetFormulaFlag.replace(\"rl\", \"\");\r\n                GSheetFormulaFlag = GSheetFormulaFlag + val;\r\n\r\n            } else {\r\n\r\n            }\r\n        }\r\n\r\n\r\n\r\n        this.setState({ GSheetFormulaFlag2: GSheetFormulaFlag })\r\n\r\n        console.log(\"new value is now \" + this.state.GSheetFormulaFlag2)\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    launchFunction() { //main function at play\r\n        let input = this.state.input;\r\n        console.log(\"running with \", input)\r\n        let GSheetFormulaFlag = this.state.GSheetFormulaFlag;\r\n        let GSheetapplyFormula = this.state.GSheetapplyFormula;\r\n        let GSheetCellValue = this.state.GSheetCellValue;\r\n        let removeDuplicatesFlag, splitAtNewLinesFlag, CommaSepListFlag, returnType;\r\n        let output, outputWithFormula;\r\n\r\n        if (GSheetFormulaFlag.indexOf(\"rd\") === -1) { removeDuplicatesFlag = false } else { removeDuplicatesFlag = true }\r\n        if (GSheetFormulaFlag.indexOf(\"nl\") === -1) { splitAtNewLinesFlag = false } else { splitAtNewLinesFlag = true }\r\n        if (GSheetFormulaFlag.indexOf(\"cs\") === -1) { CommaSepListFlag = false } else { CommaSepListFlag = true }\r\n        if (GSheetFormulaFlag.indexOf(\"rcm\") === -1) { returnType = false } else { returnType = true }\r\n\r\n        // if(splitAtNewLinesFlag){ input = input.split(\"\\n\")}else{input = input.split(\"\\\\s\")}\r\n        if (CommaSepListFlag) {\r\n            input = input.split(\",\")\r\n            console.log(\"split 1\")\r\n        } else {\r\n            if (splitAtNewLinesFlag) {\r\n                input = input.split(\"\\n\")\r\n                console.log(\"split 2\")\r\n\r\n            } else {\r\n                let rege = new RegExp(\"[\\\\s\\\\n]\", \"gmi\")\r\n                input = input.split(rege)\r\n            }\r\n            console.log(\"split 3\")\r\n\r\n        }\r\n        if (removeDuplicatesFlag) { output = Array.from(new Set(input)) } else { output = input }\r\n\r\n        output.forEach(element => { element = element.trim() });\r\n        output = output.filter(n => n)\r\n\r\n        console.log(\"updated to \", input)\r\n\r\n        let LetterRegex = new RegExp(\"[A-Za-z\\\\s]{1,99}\", \"gmi\");\r\n\r\n        outputWithFormula = output.map((element) => {\r\n            if (element.match(LetterRegex)) {\r\n                element = '\"' + element + '\"';\r\n                return element\r\n            } else {\r\n                return element\r\n            }\r\n        }\r\n        )\r\n        console.log(\"updated to \", output)\r\n\r\n\r\n        // if (GSheetapplyFormula === \"reverse\") {\r\n        let outputWithFormulaReverse = \"=isna(match(\" + GSheetCellValue + \",{\" + outputWithFormula + \"},0))\";\r\n        // } else {\r\n        outputWithFormula = \"=match(\" + GSheetCellValue + \",{\" + outputWithFormula + \"},0)\";\r\n        // }\r\n\r\n        // if (returnType) {\r\n        let outputList = output.join(\",\")\r\n        // } else {\r\n        let outputCsv = output.join(\"\\n\")\r\n        // }\r\n\r\n        this.setState({\r\n            output: outputList,\r\n            outputCsv: outputCsv,\r\n            outputWithFormula: outputWithFormula,\r\n            outputWithFormulaReverse: outputWithFormulaReverse\r\n        });\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Container >\r\n                <Helmet>\r\n                    <meta charSet=\"utf-8\" />\r\n                    <title>Gsheet Formatter</title>\r\n                </Helmet>\r\n                <Row>\r\n\r\n\r\n                    <Col lg=\"9\" xl=\"9\" md=\"9\" sm=\"12\">\r\n                        <Jumbotron className=\"mainPanel panel\">\r\n                            <Row>\r\n\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    <TextArea\r\n                                        name=\"Input\"\r\n                                        value={this.state.input}\r\n                                        rows=\"18\"\r\n                                        onChange={this.updateInputValue}\r\n                                        styler={{ fontSize: this.state.fontSize }}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    {this.state.GSheetapplyFormula === \"false\" && this.state.GSheetFormulaFlag2.indexOf(\"rcm\") === -1 &&\r\n                                        <TextArea\r\n                                            name=\"Output\"\r\n                                            value={this.state.output}\r\n                                            rows=\"18\"\r\n                                            styler={{ fontSize: this.state.fontSize }}\r\n                                        />}\r\n\r\n                                    {this.state.GSheetapplyFormula === \"false\" && this.state.GSheetFormulaFlag2.indexOf(\"rcm\") !== -1 &&\r\n                                        <TextArea\r\n                                            name=\"Output\"\r\n                                            value={this.state.outputCsv}\r\n                                            rows=\"18\"\r\n                                            styler={{ fontSize: this.state.fontSize }}\r\n                                        />}\r\n\r\n                                    {this.state.GSheetapplyFormula === \"normal\" &&\r\n                                        <TextArea\r\n                                            name=\"Output\"\r\n                                            value={this.state.outputWithFormula}\r\n                                            rows=\"18\"\r\n                                            styler={{ fontSize: this.state.fontSize }}\r\n                                        />}\r\n\r\n                                    {this.state.GSheetapplyFormula === \"reverse\" &&\r\n                                        <TextArea\r\n                                            name=\"Output\"\r\n                                            value={this.state.outputWithFormulaReverse}\r\n                                            rows=\"18\"\r\n                                            styler={{ fontSize: this.state.fontSize }}\r\n                                        />}\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <label>First cell under Header</label>\r\n                            <br />\r\n                            <ButtonGroup size=\"sm\" className=\"buttonGroup\">\r\n                                <input\r\n                                    name=\"First Cell Under Header\"\r\n                                    value={this.state.GSheetCellValue}\r\n                                    onChange={this.updateGSheetCellValue}\r\n                                />\r\n                                <Button\r\n                                    color=\"primary\"\r\n                                    style={{ fontSize: 11, marginLeft: \"5px\" }}\r\n                                    onClick={() => this.launchFunction()}\r\n                                >Run</Button>\r\n                                <Button\r\n                                    color=\"danger\"\r\n                                    style={{ fontSize: 11, marginLeft: \"5px\" }}\r\n                                    onClick={() => this.resetAll()}\r\n                                >Reset</Button>\r\n                            </ButtonGroup>\r\n\r\n                            <ButtonGroup size=\"sm\" className=\"buttonGroup float-right\">\r\n                                <label style={{ paddingRight: \"10px\", textAlign: \"center\", marginTop: \"5px\" }}>Font Size: </label>\r\n                                <Button\r\n                                    bsSize=\"\"\r\n                                    name=\"fontSizeChange0\"\r\n                                    onClick={() => this.fontSizeChange(0)}\r\n                                    color=\"secondary\"\r\n                                >\r\n                                    -\r\n                                </Button>\r\n                                <Button\r\n                                    name=\"fontSizeChange1\"\r\n                                    color=\"secondary\"\r\n                                    onClick={() => this.fontSizeChange(1)}\r\n                                >\r\n                                    +</Button>\r\n                            </ButtonGroup>\r\n                            <br />\r\n                            <br />\r\n                            <Card1\r\n                                text={\r\n                                    <div>\r\n                                        <p style={{ fontSize: \"12px\" }}>This tool wraps inputs in the =Match Gsheet Formula. Using Gsheet's filters we can use this to only see rows with the desired values.</p>\r\n                                        <p style={{ fontSize: \"12px\" }}><span style={{ fontSize: \"12px\", fontWeight: \"Bold\" }}> Unless \"Split at xyz\" is selected </span>every space or new line is regarded as a new input</p>\r\n                                    </div>}\r\n                            />\r\n\r\n                        </Jumbotron>\r\n                    </Col>\r\n\r\n                    <Col lg=\"3\" xl=\"3\" md=\"3\" sm=\"12\">\r\n                        <Jumbotron className=\"sidePanel panel\" >\r\n                            <Col lg=\"12\" xl=\"12\" md=\"12\" sm=\"12\">\r\n                                <h5>Gsheet Formatter</h5>\r\n                            </Col>\r\n                            <br />\r\n                            <label style={{ fontSize: 14, borderBottom: \"solid black 1px\" }}>Dynamic Options:</label>\r\n                            <ButtonGroup size=\"sm\" className=\"buttonGroup\" >\r\n                                <Button\r\n                                    color={this.state.GSheetapplyFormula === \"normal\" ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateGSheetapplyFormula(\"normal\")}\r\n                                    style={{ fontSize: 10, border: \"2px black solid\", flexWrap: \"wrap\" }}\r\n                                >\r\n                                    Match Formula</Button>\r\n                                <Button\r\n                                    color={this.state.GSheetapplyFormula === \"reverse\" ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateGSheetapplyFormula(\"reverse\")}\r\n                                    style={{ fontSize: 10, border: \"2px black solid\", flexWrap: \"wrap\" }}\r\n                                >\r\n                                    Is not Match Formula</Button>\r\n                                <Button\r\n                                    color={this.state.GSheetapplyFormula === \"false\" ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateGSheetapplyFormula(\"false\")}\r\n                                    style={{ fontSize: 10, border: \"2px black solid\", flexWrap: \"wrap\" }}\r\n                                >\r\n                                    No Formula</Button>\r\n                            </ButtonGroup>\r\n\r\n\r\n                            <ButtonGroup size=\"sm\" className=\"buttonGroup\">\r\n                                <label style={{ fontSize: 14 }}>If No formula - return as:</label>\r\n                                <Button\r\n                                    color={this.state.GSheetFormulaFlag2.indexOf(\"rl\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue2(\"rl\")}\r\n                                    style={{ fontSize: 10, border: \"2px black solid\" }}\r\n                                >\r\n                                    CSV</Button>\r\n                                <Button\r\n                                    color={this.state.GSheetFormulaFlag2.indexOf(\"rcm\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue2(\"rcm\")}\r\n                                    style={{ fontSize: 10, border: \"2px black solid\" }}\r\n                                >\r\n                                    List</Button>\r\n                            </ButtonGroup>\r\n                            <br />\r\n                            <br />\r\n                            <label style={{ fontSize: 14, borderBottom: \"solid black 1px\" }}>Options that require re-run:</label>\r\n                            <ButtonGroup size=\"sm\" className=\"buttonGroup\">\r\n                                <Button\r\n                                    color={this.state.GSheetFormulaFlag.indexOf(\"rd\") !== -1 ? \"success\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"rd\")}\r\n                                    style={{ fontSize: 10, border: \"2px black solid\" }}\r\n                                >\r\n                                    Remove Duplicates</Button>\r\n                                <Button\r\n                                    color={this.state.GSheetFormulaFlag.indexOf(\"nl\") !== -1 ? \"success\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"nl\")}\r\n                                    style={{ fontSize: 10, border: \"2px black solid\" }}\r\n                                >\r\n                                    Split at New Lines</Button>\r\n                                <Button\r\n                                    color={this.state.GSheetFormulaFlag.indexOf(\"cs\") !== -1 ? \"success\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"cs\")}\r\n                                    style={{ fontSize: 10, border: \"2px black solid\" }}\r\n                                >\r\n                                    Split at Commas</Button>\r\n                            </ButtonGroup>\r\n\r\n                        </Jumbotron>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(GSheetFormatter)\r\n\r\n","import React, { Component } from 'react';\r\nimport { Jumbotron, Button, Row, Container, Col, ButtonGroup } from 'reactstrap';\r\nimport { withRouter } from \"react-router\";\r\nimport './Universal.css';\r\nimport TextArea from './subComponents/TextArea';\r\nimport TextAreaQuery from './subComponents/TextAreaQuery';\r\nimport Card1 from './subComponents/Card1';\r\nimport TextAreaQuery2 from './subComponents/TextAreaQuery2';\r\nimport TextAreaJodit from './subComponents/TextAreaJodit';\r\nimport { Helmet } from \"react-helmet\";\r\n\r\n\r\n\r\nclass LookupHighlight extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateInputValue = this.updateInputValue.bind(this);\r\n        this.updateSearchValue = this.updateSearchValue.bind(this);\r\n        this.updatesearchValueHighlight = this.updatesearchValueHighlight.bind(this);\r\n        this.setName = this.setName.bind(this);\r\n        this.updatesearchStringFlagsValue = this.updatesearchStringFlagsValue.bind(this);\r\n        this.updateRegexFlagsValue = this.updateRegexFlagsValue.bind(this);\r\n        this.setSearchValue = this.setSearchValue.bind(this);\r\n        this.updateSearchType = this.updateSearchType.bind(this);\r\n        this.saveStateToCookie = this.saveStateToCookie.bind(this);\r\n        this.saveSearchesToSearchesCookie = this.saveSearchesToSearchesCookie.bind(this);\r\n        this.loadSearchFromSavedSearches = this.loadSearchFromSavedSearches.bind(this);\r\n        this.pullStateFromCookie = this.pullStateFromCookie.bind(this);\r\n        this.hcpcManager = this.hcpcManager.bind(this);\r\n        this.resetAll = this.resetAll.bind(this);\r\n\r\n\r\n        this.state = {\r\n            input: \"START Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has END been the industry's \",\r\n            output: \"Output Placeholder\",\r\n            noCountOutput: \"Output Placeholder\",\r\n            csvOutput: \"Output Placeholder\",\r\n            csvDedupeOutput: \"Output Placeholder\",\r\n            searchType: \"regex\",\r\n            searchValue: \"(start[a-z\\\\s\\\\.\\\\'\\\\n0-9]{0,999})\",\r\n            searchValueHighlight: \"(start|end)\",\r\n            searchStringFlags: \"c\",\r\n            searchRegexFlags: \"gmi\",\r\n            Searches: {}\r\n        };\r\n\r\n    }\r\n\r\n    resetAll() {\r\n        localStorage.removeItem(\"cookie3\")\r\n\r\n\r\n        this.setState({\r\n            input: \"START Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's END standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\",\r\n            output: \"Output Placeholder\",\r\n            noCountOutput: \"Output Placeholder\",\r\n            csvOutput: \"Output Placeholder\",\r\n            csvDedupeOutput: \"Output Placeholder\",\r\n            searchType: \"regex\",\r\n            searchValue: \"(start[a-z\\\\s\\\\.\\\\'\\\\n0-9]{0,999})\",\r\n            searchValueHighlight: \"(start|end)\",\r\n            searchStringFlags: \"c\",\r\n            searchRegexFlags: \"gmi\",\r\n            name: \"\"\r\n        }, this.saveStateToCookie(100));\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.pullStateFromCookie()\r\n    }\r\n\r\n\r\n    saveStateToCookie(num) {\r\n        if (num) { } else { num = 0 }\r\n        setTimeout(() => {\r\n            let cookieData = {};\r\n            // let name = this.state.name ? this.state.name : \"\"; ;\r\n            // let input= this.state.input ? this.state.input : \"Input Placeholder\";\r\n            // let output= this.state.output ? this.state.output :\"Output Placeholder\";\r\n            // let noCountOutput= this.state.noCountOutput ? this.state.noCountOutput :\"Output Placeholder\";\r\n            // csvOutput:  \"Output Placeholder\",\r\n            // csvDedupeOutput:  \"Output Placeholder\",\r\n            let searchType = this.state.searchType ? this.state.searchType : \"regex\";\r\n            let searchValue = this.state.searchValue ? this.state.searchValue : \"(start[a-z\\\\s\\\\n0-9]{0,999})\";\r\n            let searchValueHighlight = this.state.searchValueHighlight ? this.state.searchValueHighlight : \"(end)\";\r\n            let searchStringFlags = this.state.searchStringFlags ? this.state.searchStringFlags : \"ci\";\r\n            let searchRegexFlags = this.state.searchRegexFlags ? this.state.searchRegexFlags : \"gmi\";\r\n\r\n            cookieData.searchType = searchType;\r\n            cookieData.searchValue = searchValue;\r\n            cookieData.searchValueHighlight = searchValueHighlight;\r\n            cookieData.searchStringFlags = searchStringFlags;\r\n            cookieData.searchRegexFlags = searchRegexFlags;\r\n\r\n\r\n            localStorage.setItem('cookie3', JSON.stringify(cookieData));\r\n        }, num);\r\n\r\n    }\r\n\r\n    saveSearchesToSearchesCookie(val) {\r\n        //get the current proposed name\r\n        //save the current state to that name\r\n        //remove the searches subObject to prevent duplicates\r\n        //The final cookie will be a object like {name: state, name2: state2, Searches: null}\r\n\r\n        let cookieData = {};\r\n        let name = this.state.name;\r\n        // let input= this.state.input ? this.state.input : \"Input Placeholder\";\r\n        // let output= this.state.output ? this.state.output :\"Output Placeholder\";\r\n        // let noCountOutput= this.state.noCountOutput ? this.state.noCountOutput :\"Output Placeholder\";\r\n        // csvOutput:  \"Output Placeholder\",\r\n        // csvDedupeOutput:  \"Output Placeholder\",\r\n        let searchType = this.state.searchType ? this.state.searchType : \"regex\";\r\n        let searchValue = this.state.searchValue ? this.state.searchValue : \"(start[a-z\\\\s\\\\n0-9]{0,999})\";\r\n        let searchValueHighlight = this.state.searchValueHighlight ? this.state.searchValueHighlight : \"(end)\";\r\n        let searchStringFlags = this.state.searchStringFlags ? this.state.searchStringFlags : \"ci\";\r\n        let searchRegexFlags = this.state.searchRegexFlags ? this.state.searchRegexFlags : \"gmi\";\r\n        let nameValue = this.state.name ? this.state.name : \"\";\r\n\r\n        if (name === null || name === undefined) { return } else {\r\n            alert(\"Current search saved as \" + name)\r\n        }\r\n\r\n        if (localStorage.getItem('Searches2')) {\r\n            cookieData = JSON.parse(localStorage.getItem('Searches2'));\r\n        }\r\n\r\n        cookieData[name] = {};\r\n        cookieData[name].searchType = searchType;\r\n        cookieData[name].searchValue = searchValue;\r\n        cookieData[name].searchValueHighlight = searchValueHighlight;\r\n        cookieData[name].searchStringFlags = searchStringFlags;\r\n        cookieData[name].searchRegexFlags = searchRegexFlags;\r\n        cookieData[name].name = nameValue;\r\n        //unsure if this one does anything except eat up storage, replacing.\r\n        // cookieData[name] = this.state;\r\n\r\n        // console.log('saving cookie -- ', cookieData)\r\n\r\n\r\n        localStorage.setItem('Searches2', JSON.stringify(cookieData));\r\n        this.setState({ Searches: cookieData });\r\n\r\n        if (val) {\r\n            if (cookieData[this.state.name]) {\r\n                delete cookieData[this.state.name];\r\n                localStorage.setItem('Searches2', JSON.stringify(cookieData));\r\n                this.setState({ Searches: cookieData })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    pullStateFromCookie() {\r\n        if (localStorage.getItem('cookie3')) {\r\n            let fetchedCookie = JSON.parse(localStorage.getItem('cookie3'));\r\n            Object.keys(fetchedCookie).forEach(element => {\r\n                if (element === \"name\") { } else {\r\n                    this.setState({\r\n                        [element]: fetchedCookie[element]\r\n                    })\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n        if (localStorage.getItem('Searches2')) {\r\n            let fetchedcookie3 = JSON.parse(localStorage.getItem('Searches2'));\r\n            this.setState({\r\n                Searches: fetchedcookie3\r\n            })\r\n        }\r\n    }\r\n\r\n    loadSearchFromSavedSearches(val) {\r\n        if (this.state.Searches && this.state.Searches[val]) {\r\n            let fetchedSearch = this.state.Searches[val];\r\n            // if(fetchedSearch.searchType === \"string\"){\r\n            //     alert(\"could not load - this page only accepts regex search types\")\r\n\r\n            // }else{\r\n            Object.keys(fetchedSearch).forEach(element => {\r\n                console.log(\"fetchedKey for \", element)\r\n                if (element !== \"Searches\" && element !== \"input\" && element !== \"output\" && element !== \"noCountOutput\" && element !== \"csvOutput\" && element !== \"csvDedupeOutput\") {//searchValueHighlight\r\n                    this.setState({\r\n                        [element]: fetchedSearch[element]\r\n                    })\r\n                }\r\n            });\r\n            // }\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    updateInputValue(e) {\r\n        e.preventDefault();\r\n        this.setState({ input: e.target.value });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    updateSearchValue(e) {\r\n        e.preventDefault();\r\n        this.setState({ searchValue: e.target.value });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    updatesearchValueHighlight(e) {\r\n        e.preventDefault();\r\n        this.setState({ searchValueHighlight: e.target.value });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    setName(e) {\r\n        e.preventDefault();\r\n        this.setState({ name: e.target.value });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    updatesearchStringFlagsValue(val) {\r\n        // console.log(\"calling searchStringFlags with \" + val)\r\n        // let searchStringFlags = this.state.searchStringFlags;\r\n\r\n        this.setState({ searchStringFlags: val });\r\n\r\n\r\n        // if (searchStringFlags.indexOf(val) !== -1) {\r\n        //     this.setState({ searchStringFlags: searchStringFlags.replace(val, \"\") });\r\n        // } else {\r\n        //     this.setState({ searchStringFlags: searchStringFlags + val });\r\n        // }\r\n\r\n        // console.log(\"new value is now \" + this.state.searchStringFlags)\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n    updateRegexFlagsValue(val) {\r\n        // console.log(\"calling updateRegexFlagsValue with \" + val)\r\n        let searchRegexFlags = this.state.searchRegexFlags;\r\n\r\n        if (searchRegexFlags.indexOf(val) !== -1) {\r\n            this.setState({ searchRegexFlags: searchRegexFlags.replace(val, \"\") });\r\n        } else {\r\n            this.setState({ searchRegexFlags: searchRegexFlags + val });\r\n        }\r\n\r\n        // console.log(\"new value is now \" + this.state.searchRegexFlags)\r\n        this.saveStateToCookie()\r\n\r\n    }\r\n\r\n\r\n    updateSearchType(val) {\r\n\r\n        this.setState({ searchType: val });\r\n\r\n        // console.log(\"new value is now \" + this.state.searchType)\r\n        this.saveStateToCookie()\r\n\r\n    }\r\n\r\n\r\n    hcpcManager(input) { // expands all hcpc ranges in document\r\n        let NumRegex = new RegExp(\"\\\\d{4}\", \"gmi\");\r\n        let LetterRegex = new RegExp(\"[A-CE-Z]\", \"gmi\");\r\n        let HCPCRegexRange = new RegExp(\"([A-CE-Z][0-9]{4}[\\\\t]{0,3}[-—]{0,2}(through){0,1}(to){0,1}[\\\\t]{0,3}[A-CE-Z][0-9]{4})\", \"gmi\");\r\n        // console.log(\"range matches include\", input.match(HCPCRegexRange))\r\n\r\n\r\n\r\n        let result = input.replace(HCPCRegexRange, function (element) {\r\n\r\n            let letters = element.match(LetterRegex);\r\n            let numbers = element.match(NumRegex);\r\n            let store = [];\r\n\r\n            if (letters.length !== 2 | numbers.length !== 2 | numbers[0] > numbers[1]) { alert(\"failed match\") } else {\r\n                let i = numbers[0]\r\n                for (i; i <= numbers[1]; i++) {\r\n                    store.push(letters[0] + i)\r\n                }\r\n            }\r\n\r\n            store = store.join(\",\")\r\n            return store\r\n        });\r\n\r\n        return result\r\n\r\n\r\n\r\n    }\r\n\r\n    setSearchValue() {\r\n        let input = this.state.input;\r\n        let searchRegexFlags = this.state.searchRegexFlags;\r\n        let search = this.state.searchValue;\r\n        let searchHighlight = this.state.searchValueHighlight;\r\n        let searchType = this.state.searchType;\r\n        let caseSensitive;\r\n\r\n        // console.log(\"setSearchValue, step 0 - input is \", input)\r\n\r\n\r\n        input = this.hcpcManager(input);\r\n\r\n        // console.log(\"setSearchValue, step 1 passed - input is \", input)\r\n\r\n        if (searchRegexFlags.indexOf(\"i\") === -1) { // if case sensitive true  - no i flag\r\n            caseSensitive = true\r\n        } else {\r\n            caseSensitive = false\r\n        }\r\n\r\n        //if the regex option is chosen search as is - assign to array for the forEach loop below\r\n        //if the list option is chosen split into an array and regex search each element\r\n        if (searchType === \"string\") {\r\n            if (searchRegexFlags.indexOf(\"g\") === -1) {\r\n                this.setState({ searchRegexFlags: searchRegexFlags + \"g\" });\r\n                searchRegexFlags = searchRegexFlags + \"g\"\r\n            }\r\n            if (searchRegexFlags.indexOf(\"m\") === -1) {\r\n                this.setState({ searchRegexFlags: searchRegexFlags + \"m\" });\r\n                searchRegexFlags = searchRegexFlags + \"m\"\r\n            }\r\n\r\n            search = search.split(\",\");\r\n            searchHighlight = searchHighlight.split(\",\");\r\n            search = Array.from(new Set(search));\r\n            searchHighlight = Array.from(new Set(searchHighlight));\r\n            search = search.map(element => \"(\" + element + \"[a-zA-Z\\\\:\\\\,\\\\.\\\\-\\\\'•=\\\\/\\\\s\\\\n0-9\\\\\\\\ \\\\\\\"]{0,9999})\")\r\n            searchHighlight = searchHighlight.map(element => \"(\" + element + \")\")\r\n\r\n        } else {\r\n            search = [search]\r\n            searchHighlight = [searchHighlight]\r\n        }\r\n        let output = [];\r\n        let matcher2 = [];\r\n        // console.log(\"setSearchValue, step 2 passed - input is\" ,input)\r\n\r\n\r\n        search.forEach(element => {\r\n            if (element == null) {\r\n                console.log(\"null search\", element)\r\n                this.setState({ output: \"No Matches\" });\r\n                this.saveStateToCookie()\r\n                return\r\n            } else {\r\n                // console.log(\"not null search\",element)\r\n\r\n                // update this to keep a track of the specific order of matches\r\n                let match;\r\n                let matcher = []; // input.match(new RegExp(element, searchRegexFlags))\r\n                let test = new RegExp(element, searchRegexFlags);\r\n                console.log(test + \" = test \")\r\n\r\n                // console.log(\"not null regex\",test)\r\n                let i = 0\r\n                while ((match = test.exec(input)) != null && i < 500) {\r\n                    matcher.push([match[0], parseInt(match.index)])\r\n                    console.log(match[0] + \" = match[0] \")\r\n\r\n                    i++\r\n                }\r\n\r\n                //if no matches\r\n                if (matcher === null) {\r\n                    this.setState({ output: \"No Matches\" });\r\n                    this.saveStateToCookie()\r\n                    return\r\n                }\r\n                matcher2 = [...matcher2, ...matcher]\r\n            }\r\n        }\r\n        )\r\n\r\n        // console.log(\"setSearchValue, step 3 passed\", \" matcher2 == \", matcher2)\r\n\r\n        if (matcher2.length >= 1 && Array.isArray(matcher2)) {\r\n            // matcher = matcher.split(\",\") \r\n            matcher2 = matcher2.sort(([a, b], [c, d]) => b - d);\r\n            matcher2.forEach(element => {\r\n                // console.log(\"matcher32\", element)\r\n                if (Array.isArray(searchHighlight)) {\r\n                    // console.log(searchHighlight + \" = searchHighlight\")\r\n\r\n                    searchHighlight.forEach(term => {\r\n                        let test2 = new RegExp(term, searchRegexFlags);\r\n                        // console.log(test2 + \" = test2\")\r\n                        console.log(element[0] + \" = element[0] \")\r\n\r\n                        let match = element[0].match(test2)\r\n                        // console.log(match + \" = match\")\r\n                        if (match == null) {\r\n                            // console.log(match + \" = nullMatch\")\r\n\r\n                        } else {\r\n                            match.forEach(subMatch => {\r\n                                // console.log(subMatch + \" = submatch\")\r\n\r\n                                let newMatch = \"<strong>\" + subMatch + \"</strong>\"\r\n                                element[0] = element[0].replaceAll(subMatch, newMatch)\r\n                            });\r\n                        }\r\n\r\n                    });\r\n                    output = [...output, element[0]]\r\n                }\r\n            });\r\n\r\n\r\n\r\n        }\r\n\r\n        // console.log(\"step 4\")\r\n\r\n        let noCountOutput = output.join(\"<br><br><br>\");\r\n        let csvOutput = output.join(\",\");\r\n\r\n        let uniqueOutput = [];\r\n        let counts = [];\r\n        let countOutput = [];\r\n        let csvDedupeOutput = [];\r\n\r\n        output.forEach(element => {\r\n            if (!caseSensitive) {\r\n                // console.log(\"element,\", element)\r\n                let lowerCaseUniqueOutput = uniqueOutput.map(element => element.toLowerCase())\r\n                let pos = lowerCaseUniqueOutput.indexOf(element.toLowerCase());\r\n                if (pos === -1) {\r\n                    uniqueOutput.push(element)\r\n                    counts.push(1)\r\n                } else {\r\n                    counts[pos] = counts[pos] + 1;\r\n                }\r\n\r\n            } else {\r\n                let pos = uniqueOutput.indexOf(element);\r\n                if (pos === -1) {\r\n                    uniqueOutput.push(element)\r\n                    counts.push(1)\r\n                } else {\r\n                    counts[pos] = counts[pos] + 1;\r\n                }\r\n            }\r\n        });\r\n\r\n        uniqueOutput.forEach((element, index) => {\r\n            countOutput.push(element + \" - \" + counts[index] + \" times\");\r\n            csvDedupeOutput.push(element);\r\n        });\r\n\r\n\r\n\r\n\r\n\r\n        this.setState({\r\n            output: countOutput.join(\"\\n\\n\\n\"),\r\n            noCountOutput: noCountOutput,\r\n            csvOutput: csvOutput,\r\n            csvDedupeOutput: csvDedupeOutput.join(\",\")\r\n        });\r\n        this.saveStateToCookie()\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Container >\r\n                <Helmet>\r\n                    <meta charSet=\"utf-8\" />\r\n                    <title>Highlight</title>\r\n                </Helmet>\r\n                <Row>\r\n\r\n                    <Col lg=\"9\" xl=\"9\" md=\"9\" sm=\"12\">\r\n                        <Jumbotron className=\"mainPanel panel\">\r\n                            <Row>\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    <TextArea\r\n                                        name=\"Input\"\r\n                                        value={this.state.input}\r\n                                        rows=\"22\"\r\n                                        onChange={this.updateInputValue}\r\n                                        fontSize=\"10px\"\r\n                                    />\r\n                                </Col>\r\n                                <Col lg=\"6\" xl=\"6\" md=\"6\" sm=\"12\">\r\n                                    {this.state.searchStringFlags.indexOf(\"c\") !== -1 && <TextAreaJodit\r\n                                        name=\"Output\"\r\n                                        value={this.state.noCountOutput}\r\n                                        rows=\"12\"\r\n                                        readonly=\"true\"\r\n                                        styler={{\"fontSize\":\"12px\"}}\r\n                                    />}\r\n\r\n                                    {this.state.searchStringFlags.indexOf(\"a\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.output}\r\n                                        rows=\"18\"\r\n                                        styler={{\"fontSize\":\"10px\"}}\r\n\r\n                                    />}\r\n\r\n                                    {this.state.searchStringFlags.indexOf(\"s\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.csvDedupeOutput}\r\n                                        rows=\"18\"\r\n                                        styler={{\"fontSize\":\"10px\"}}\r\n\r\n                                    />}\r\n\r\n                                    {this.state.searchStringFlags.indexOf(\"h\") !== -1 && <TextArea\r\n                                        name=\"Output\"\r\n                                        value={this.state.csvOutput}\r\n                                        rows=\"18\"\r\n                                        fontSize=\"10px\"\r\n\r\n                                    />}\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <TextAreaQuery\r\n                                name=\"Search String\"\r\n                                value={this.state.searchValue}\r\n                                rows=\"3\"\r\n                                onChange={this.updateSearchValue}\r\n                                buttonOnClick={this.setSearchValue}\r\n                                buttonText=\"Search\"\r\n                            />\r\n\r\n                            <TextAreaQuery\r\n                                name=\"Search String to Hightlight\"\r\n                                value={this.state.searchValueHighlight}\r\n                                rows=\"3\"\r\n                                onChange={this.updatesearchValueHighlight}\r\n                            // buttonOnClick={this.setsearchValueHighlight}\r\n                            // buttonText=\"Search\"\r\n                            />\r\n\r\n                            <Card1\r\n                                text={<div><p>A variant of the lookup tool, this page takes 2 regexes or lists of strings and returns any match for the first regex bolds anything that matches the second regex .\r\n                                    </p><ul>\r\n                                        <p style={{ \"fontWeight\": \"900\" }}>Press Reset Page and click search for an example</p>\r\n                                        <li>The first regex matches the keyword 'Start' and 999 characters after it</li>\r\n                                        <li>The second regex matches the keyword 'End'</li>\r\n                                        <li>As a result we get the first 999 characters after Start with every mention of 'End' being bold</li>\r\n\r\n                                        <li>Note: Some features are disabled in list mode</li>\r\n\r\n\r\n                                    </ul></div>}\r\n\r\n\r\n                            />\r\n\r\n\r\n                        </Jumbotron>\r\n                    </Col>\r\n                    <Col lg=\"3\" xl=\"3\" md=\"3\" sm=\"12\">\r\n                        <Jumbotron className=\"sidePanel panel\">\r\n                            <Col lg=\"12\" xl=\"12\" md=\"12\" sm=\"12\">\r\n                                <h5>Lookup Highlight</h5>\r\n                            </Col>\r\n                            <ButtonGroup size=\"sm\" className=\"buttonGroup\">\r\n                                <Button\r\n                                    color={this.state.searchRegexFlags.indexOf(\"i\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"i\")}\r\n                                >\r\n                                    Case Insensitive</Button>\r\n                                <Button\r\n                                    color={this.state.searchRegexFlags.indexOf(\"g\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"g\")}\r\n                                >\r\n                                    Global</Button>\r\n                                <Button\r\n                                    color={this.state.searchRegexFlags.indexOf(\"m\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateRegexFlagsValue(\"m\")}\r\n                                >\r\n                                    Multiline</Button>\r\n                            </ButtonGroup>\r\n\r\n\r\n                            <ButtonGroup size=\"lg\" className=\"buttonGroup\">\r\n                                <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"c\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"c\")}\r\n                                >\r\n                                    Show All</Button>\r\n                                {/* <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"a\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"a\")}\r\n                                >\r\n                                    Count</Button>\r\n                                <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"s\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"s\")}\r\n                                >\r\n                                    CSV Trimmed</Button>\r\n                                <Button\r\n                                    color={this.state.searchStringFlags.indexOf(\"h\") !== -1 ? \"info\" : \"secondary\"}\r\n                                    onClick={() => this.updatesearchStringFlagsValue(\"h\")}\r\n                                >\r\n                                    CSV</Button> */}\r\n\r\n                            </ButtonGroup>\r\n\r\n\r\n                            <ButtonGroup size=\"\" className=\"buttonGroup\">\r\n                                {/* <label>Search Type</label> */}\r\n                                <Button\r\n                                    color={this.state.searchType.indexOf(\"regex\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateSearchType(\"regex\")}\r\n                                >\r\n                                    Regex</Button>\r\n                                <Button\r\n                                    color={this.state.searchType.indexOf(\"string\") !== -1 ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => this.updateSearchType(\"string\")}\r\n                                >\r\n                                    List</Button>\r\n\r\n                            </ButtonGroup>\r\n\r\n                            <TextAreaQuery2\r\n                                name=\"Save Search\"\r\n                                value={this.state.name}\r\n                                rows=\"1\"\r\n                                onChange={this.setName}\r\n                                buttonOnClick={() => this.saveSearchesToSearchesCookie()}\r\n                                buttonOnClick2={() => this.saveSearchesToSearchesCookie(this.state.name)}\r\n                                buttonOnClick3={() => this.resetAll()}\r\n                                buttonText={\"Save\"}\r\n                                buttonText2={\"Delete\"}\r\n                                buttonText3={\"Reset Page\"}\r\n\r\n                            />\r\n\r\n                            {this.state.Searches && Object.keys(this.state.Searches).map((element) => {\r\n                                return element !== \"Searches\" ?\r\n                                    <Button\r\n                                        onClick={() => this.loadSearchFromSavedSearches(element)}\r\n                                        color=\"primary\"\r\n                                        style={{ border: \"solid white 1px\", marginLeft: \"1px\" }}\r\n                                    >{element}</Button> : \"\"\r\n                            })\r\n                            }\r\n\r\n\r\n\r\n                        </Jumbotron>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(LookupHighlight)\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Navbar1 from './components/subComponents/Navbar1';\n\nimport './App.css';\nimport {\n  Route,\n  NavLink,\n  HashRouter,\n  Switch,\n  BrowserRouter\n} from \"react-router-dom\";\nimport HomePage from './components/HomePage';\nimport Lookup from './components/Lookup';\nimport LookupAdvanced from './components/LookupAdvanced';\nimport HCPC from './components/HCPC';\nimport Formatter from './components/Formatter';\nimport MasterPAFormatter from './components/MasterPAFormatter';\nimport GSheetFormatter from './components/GSheetFormatter';\nimport LookupHighlight from './components/LookupHighlight';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <div>\n      <Navbar1 \n      Home={<NavLink to=\"/\" style={{color: \"black\",textDecoration: 'none'}}>Home</NavLink>}\n      lookupLink={<NavLink to=\"/Lookup\">Lookup</NavLink>}\n      lookupLinkAdvanced={<NavLink to=\"/LookupAdvanced\">Lookup Advanced</NavLink>}\n      LookupLinkHighlight={<NavLink to=\"/LookupHighlight\">Lookup Highlight</NavLink>}\n      \n      HCPC={<NavLink to=\"/HCPC\">HCPC Range Expander</NavLink>}\n      Policies={<NavLink to=\"/Formatter\">Policies</NavLink>}\n      GSheet={<NavLink to=\"/GSheetFormatter\">GSheet</NavLink>}\n      MasterPA={<NavLink to=\"/MasterPAFormatter\">MasterPA</NavLink>}\n      />\n        <div className=\"content\">\n          <Route exact path=\"/\" render={(props) => <HomePage \n\n          lookupLink={<NavLink style={{color:\"white\"}} to=\"/Lookup\">Lookup</NavLink>}\n\n          lookupLinkAdvanced={<NavLink  style={{color:\"white\"}} to=\"/LookupAdvanced\">Lookup Advanced</NavLink>}\n          LookupLinkHighlight={<NavLink  style={{color:\"white\"}} to=\"/LookupHighlight\">Lookup Highlight</NavLink>}\n\n          HCPC={<NavLink style={{color:\"white\"}} to=\"/HCPC\">HCPC Range Expander</NavLink>}\n\n          Policies={<NavLink  style={{color:\"white\"}} to=\"/Formatter\">Policies</NavLink>}\n\n          GSheet={<NavLink  style={{color:\"white\"}} to=\"/GSheetFormatter\">GSheet</NavLink>}\n\n          MasterPA={<NavLink  style={{color:\"white\"}} to=\"/MasterPAFormatter\">MasterPA</NavLink>}\n          \n          \n          \n\n          />} />\n          <Route exact path=\"/Lookup\" render={(props) => <Lookup />} />\n          <Route exact path=\"/LookupAdvanced\" render={(props) => <LookupAdvanced />} />\n          <Route exact path=\"/LookupHighlight\" render={(props) => <LookupHighlight />} />\n          <Route exact path=\"/HCPC\" render={(props) => <HCPC />} />\n          <Route exact path=\"/Formatter\" render={(props) => <Formatter />} />\n          <Route exact path=\"/MasterPAFormatter\" render={(props) => <MasterPAFormatter />} />\n          <Route exact path=\"/GSheetFormatter\" render={(props) => <GSheetFormatter />} />\n        </div>\n      </div>\n\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}